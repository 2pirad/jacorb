Usage
-----

* Ensure your environment is set up properly so that jaco is included in the path

  e.g.:
  > setenv PATH ~/JacORB/bin:$PATH (csh)

  > export PATH=~/JacORB/bin:$PATH (sh)

* Start the Naming Service

  refer to the documentation how to configure the naming service
  properly so that it can be accessed via ORB.resolve_initial_reference("NameService")

* Start the Notification Service

  e.g.:
  > cd $JACORB_HOME/bin
  > ntfy

* Start the Whiteboard Factory

  > cd $JACORB_HOME/demo/notification/whiteboard
  > start-factory.sh  

  The whiteboard factory uses ORB.resolve_initial_references("NotificationService") to 
  access the NotificationService. Add a ORBInitRef entry to your .jacorb_properties file

  e.g.:
  ORBInitRef.NotificationService=corbaname::<yourhost>:12456#NotificationService

  alternatively you can specify the Reference to the Notification Service as a parameter

  e.g.:
  > cd $JACORB_HOME/demo/notification/whiteboard
  > start-factory.sh corbaloc::magellan:32861/NotificationService

  (Start the notification service with the option -printCorbaloc to get the initial reference)

  The Whiteboard Factory registers itself with the Naming Service.

* Start Workgroup

  > cd $JACORB_HOME/demo/notification/whiteboard
  > start-workgroup.sh

  the workgroup accesses the Whiteboard Factory via the NamingService.
  You can draw in the Window by pushing the mouse button, dragging the
  mouse and releasing the button again. 	
  If you select the Delete Button you can overpaint parts of your
  drawing with black colour again. If you press Clear 	 
  the whole Drawing Area will be erased.
  If you want to join a Remote Whiteboard select Menu->Select. You'll
  see the list of available whiteboards. 
  As no Whiteboard will be available yet, just type in some Name and
  select Join. The Whiteboard will be created. 
  
  Now start one (or more) Workgroup and join the Whiteboard you've created. 
  What you draw in one Window will be sent to the other Window and displayed there too.

Implementation Notes
--------------------

For each Workgroup that joins a Whiteboard a new 
Consumer-/SupplierAdmin Pair is created and returned to the  
Workgroup. An unique Identifier is created and supplied to each
Workgroup. 

The Workgroup publishes two Kinds of Events:

* LineEvent. This Event contains Informations over a single Line: you
  have startpoint (x0, y0), endpoint (x1, y1), colour (r, g, b),
  brushsize. 

* ClearEvent. This Event contains no Data.

The Events are wrapped in a StructuredEvent. The Workgroup Id is put
in the Filterable Headers of the StructuredEvent. This is necessary
because the Whiteboard preconfigures the ConsumerAdmin used by each
Workgroup not to forward Events which derived from the connected
Workgroup.

(e.g. $.header.variable_header(WORKGROUP_ID) != 1)

The Workgroup creates a StructuredProxyPushConsumer and uses it to send Events as they occur.

Besides that, the Workgroup creates two StructuredProxyPushSuppliers
and connects them to its DrawHandler 
and ClearHandler. The PushSuppliers are configured with a Filter to
just supply LineEvents or ClearEvents 
respectively. This Way the DrawHandler just receives LineEvents and
the ClearHandler just receives ClearEvents. 
On Repetition of an Event both Handlers act accordingly.


$Id: README,v 1.4 2003-11-16 14:20:51 alphonse.bendt Exp $
