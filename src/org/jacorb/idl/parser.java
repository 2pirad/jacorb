
//----------------------------------------------------
// The following code was generated by CUP v0.9e
// Mon Mar 18 16:43:07 GMT 2002
//----------------------------------------------------

package org.jacorb.idl;

import java_cup.runtime.*;
import java.util.*;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {96, 0},     {9, 2},     {9, 1},     {11, 2}, 
        {11, 1},     {10, 2},     {10, 2},     {10, 2},     {10, 2}, 
        {10, 2},     {10, 2},     {12, 5},     {13, 6},     {13, 7}, 
        {13, 7},     {13, 7},     {13, 2},     {13, 3},     {13, 3}, 
        {13, 3},     {14, 2},     {14, 1},     {15, 2},     {15, 2}, 
        {15, 2},     {15, 2},     {15, 2},     {93, 2},     {93, 1}, 
        {90, 3},     {90, 1},     {16, 1},     {16, 2},     {16, 3}, 
        {16, 1},     {17, 1},     {17, 1},     {17, 3},     {17, 2}, 
        {18, 3},     {20, 2},     {20, 1},     {19, 7},     {19, 6}, 
        {21, 3},     {21, 2},     {21, 5},     {21, 1},     {7, 1}, 
        {7, 1},     {22, 2},     {22, 1},     {23, 1},     {23, 1}, 
        {23, 6},     {23, 5},     {24, 4},     {24, 4},     {25, 1}, 
        {25, 3},     {26, 3},     {27, 5},     {28, 1},     {28, 1}, 
        {28, 1},     {28, 1},     {28, 1},     {28, 1},     {28, 1}, 
        {28, 1},     {29, 1},     {31, 1},     {31, 3},     {32, 1}, 
        {32, 3},     {33, 1},     {33, 3},     {34, 1},     {34, 3}, 
        {34, 3},     {35, 1},     {35, 3},     {35, 3},     {36, 1}, 
        {36, 3},     {36, 3},     {36, 3},     {37, 2},     {37, 1}, 
        {8, 1},     {8, 1},     {8, 1},     {38, 1},     {38, 1}, 
        {38, 3},     {74, 1},     {74, 1},     {74, 3},     {74, 1}, 
        {74, 1},     {74, 1},     {74, 1},     {74, 1},     {75, 3}, 
        {75, 2},     {75, 3},     {75, 2},     {30, 1},     {39, 1}, 
        {39, 1},     {39, 1},     {39, 1},     {39, 1},     {45, 2}, 
        {40, 2},     {41, 1},     {41, 1},     {46, 1},     {46, 1}, 
        {46, 1},     {57, 1},     {57, 1},     {57, 1},     {57, 1}, 
        {57, 1},     {57, 1},     {57, 1},     {47, 1},     {47, 1}, 
        {47, 1},     {48, 1},     {48, 1},     {48, 1},     {92, 3}, 
        {92, 1},     {78, 1},     {78, 1},     {79, 1},     {59, 1}, 
        {59, 1},     {60, 1},     {61, 1},     {62, 1},     {58, 1}, 
        {58, 1},     {58, 2},     {58, 2},     {58, 1},     {58, 2}, 
        {63, 1},     {64, 1},     {65, 2},     {66, 1},     {66, 1}, 
        {67, 1},     {68, 1},     {69, 1},     {50, 5},     {86, 1}, 
        {86, 2},     {77, 3},     {52, 9},     {44, 1},     {44, 1}, 
        {44, 1},     {44, 1},     {44, 1},     {54, 1},     {54, 2}, 
        {55, 3},     {87, 3},     {87, 2},     {87, 4},     {87, 3}, 
        {56, 2},     {49, 5},     {94, 1},     {94, 3},     {53, 2}, 
        {72, 6},     {72, 4},     {71, 4},     {71, 4},     {71, 1}, 
        {71, 1},     {73, 6},     {80, 2},     {95, 1},     {95, 2}, 
        {81, 3},     {85, 4},     {85, 3},     {91, 1},     {91, 3}, 
        {51, 4},     {51, 5},     {84, 6},     {5, 1},     {5, 1}, 
        {42, 1},     {42, 1},     {70, 1},     {89, 3},     {89, 2}, 
        {88, 3},     {88, 1},     {82, 3},     {6, 1},     {6, 1}, 
        {6, 1},     {83, 4},     {83, 1},     {2, 4},     {2, 1}, 
        {3, 1},     {3, 3},     {43, 1},     {43, 1},     {43, 1}, 
        {4, 0}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{0,-221,2,-2,8,-2,10,-2,13,-2,14,-2,21,-2,22,-2,24,-2,25,-2,32,-2,38,-2,43,-2,45,-2,47,-2,-1,0},
    /*1*/{2,30,8,28,10,8,13,27,14,11,21,29,22,14,24,21,25,13,32,23,38,12,43,26,45,24,47,17,-1,0},
    /*2*/{0,5,-1,0},
    /*3*/{0,-4,-1,0},
    /*4*/{0,-1,-1,0},
    /*5*/{51,386,-1,0},
    /*6*/{51,385,-1,0},
    /*7*/{47,379,-1,0},
    /*8*/{51,378,-1,0},
    /*9*/{51,-113,-1,0},
    /*10*/{80,373,-1,0},
    /*11*/{80,364,-1,0},
    /*12*/{80,193,-1,0},
    /*13*/{21,357,-1,0},
    /*14*/{0,-6,2,30,8,28,10,8,13,27,14,11,21,29,22,14,24,21,25,13,32,23,38,12,43,26,45,24,47,17,62,-6,-1,0},
    /*15*/{51,-37,-1,0},
    /*16*/{80,313,-1,0},
    /*17*/{51,-38,-1,0},
    /*18*/{51,312,-1,0},
    /*19*/{51,-114,-1,0},
    /*20*/{80,308,-1,0},
    /*21*/{51,307,-1,0},
    /*22*/{21,301,-1,0},
    /*23*/{80,274,-1,0},
    /*24*/{51,273,-1,0},
    /*25*/{3,91,5,86,7,75,12,100,13,27,17,239,18,89,23,72,26,43,27,97,35,248,36,95,37,87,38,12,44,80,45,24,46,84,49,96,50,98,76,45,80,42,-1,0},
    /*26*/{80,227,-1,0},
    /*27*/{5,86,7,75,12,100,17,222,18,89,23,72,26,43,27,97,36,95,37,87,44,80,49,96,50,98,76,45,80,42,-1,0},
    /*28*/{80,209,-1,0},
    /*29*/{21,35,47,36,-1,0},
    /*30*/{51,-112,-1,0},
    /*31*/{51,-110,-1,0},
    /*32*/{51,-111,-1,0},
    /*33*/{0,-3,-1,0},
    /*34*/{80,38,-1,0},
    /*35*/{80,37,-1,0},
    /*36*/{51,-39,-1,0},
    /*37*/{51,-19,55,40,61,-221,-1,0},
    /*38*/{61,52,-1,0},
    /*39*/{26,43,76,45,80,42,-1,0},
    /*40*/{61,-30,-1,0},
    /*41*/{39,-33,51,-33,52,-33,53,-33,55,-33,57,-33,58,-33,60,-33,61,-33,64,-33,66,-33,70,-33,71,-33,72,-33,73,-33,74,-33,76,-33,77,-33,78,-33,80,-33,-1,0},
    /*42*/{39,-36,51,-36,52,-36,53,-36,55,-36,57,-36,58,-36,60,-36,61,-36,64,-36,66,-36,70,-36,71,-36,72,-36,73,-36,74,-36,76,-36,77,-36,78,-36,80,-36,-1,0},
    /*43*/{39,-32,52,48,60,-32,61,-32,76,49,-1,0},
    /*44*/{80,47,-1,0},
    /*45*/{61,-29,-1,0},
    /*46*/{39,-34,51,-34,52,-34,53,-34,55,-34,57,-34,58,-34,60,-34,61,-34,64,-34,66,-34,70,-34,71,-34,72,-34,73,-34,74,-34,76,-34,77,-34,78,-34,80,-34,-1,0},
    /*47*/{26,43,76,45,80,42,-1,0},
    /*48*/{80,50,-1,0},
    /*49*/{39,-35,51,-35,52,-35,53,-35,55,-35,57,-35,58,-35,60,-35,61,-35,64,-35,66,-35,70,-35,71,-35,72,-35,73,-35,74,-35,76,-35,77,-35,78,-35,80,-35,-1,0},
    /*50*/{39,-31,60,-31,61,-31,-1,0},
    /*51*/{3,-221,4,55,5,-221,7,-221,8,28,12,-221,13,27,14,11,18,-221,23,-221,25,13,26,-221,27,-221,28,57,34,54,36,-221,37,-221,38,12,43,26,44,-221,45,24,46,-221,48,-221,49,-221,50,-221,62,-221,76,-221,80,-221,-1,0},
    /*52*/{51,208,-1,0},
    /*53*/{4,205,-1,0},
    /*54*/{3,91,5,86,7,75,12,100,18,89,23,72,26,43,27,97,36,95,37,87,44,80,46,84,49,96,50,98,76,45,80,42,-1,0},
    /*55*/{62,199,-1,0},
    /*56*/{3,-199,5,-199,7,-199,12,-199,18,-199,23,-199,26,-199,27,-199,36,-199,37,-199,44,-199,46,-199,48,-199,49,-199,50,-199,76,-199,80,-199,-1,0},
    /*57*/{3,91,5,86,7,75,12,100,18,89,23,72,26,43,27,97,36,95,37,87,44,80,46,84,48,99,49,96,50,98,76,45,80,42,-1,0},
    /*58*/{51,69,-1,0},
    /*59*/{3,-200,5,-200,7,-200,12,-200,18,-200,23,-200,26,-200,27,-200,36,-200,37,-200,44,-200,46,-200,48,-200,49,-200,50,-200,62,-23,76,-200,80,-200,-1,0},
    /*60*/{51,68,-1,0},
    /*61*/{51,67,-1,0},
    /*62*/{51,66,-1,0},
    /*63*/{3,-221,4,55,5,-221,7,-221,8,28,12,-221,13,27,14,11,18,-221,23,-221,25,13,26,-221,27,-221,28,57,34,54,36,-221,37,-221,38,12,43,26,44,-221,45,24,46,-221,48,-221,49,-221,50,-221,62,-221,76,-221,80,-221,-1,0},
    /*64*/{62,-22,-1,0},
    /*65*/{3,-26,4,-26,5,-26,7,-26,8,-26,12,-26,13,-26,14,-26,15,-26,18,-26,23,-26,25,-26,26,-26,27,-26,28,-26,30,-26,31,-26,34,-26,36,-26,37,-26,38,-26,43,-26,44,-26,45,-26,46,-26,48,-26,49,-26,50,-26,62,-26,76,-26,80,-26,-1,0},
    /*66*/{3,-28,4,-28,5,-28,7,-28,8,-28,12,-28,13,-28,14,-28,15,-28,18,-28,23,-28,25,-28,26,-28,27,-28,28,-28,30,-28,31,-28,34,-28,36,-28,37,-28,38,-28,43,-28,44,-28,45,-28,46,-28,48,-28,49,-28,50,-28,62,-28,76,-28,80,-28,-1,0},
    /*67*/{3,-25,4,-25,5,-25,7,-25,8,-25,12,-25,13,-25,14,-25,15,-25,18,-25,23,-25,25,-25,26,-25,27,-25,28,-25,30,-25,31,-25,34,-25,36,-25,37,-25,38,-25,43,-25,44,-25,45,-25,46,-25,48,-25,49,-25,50,-25,62,-25,76,-25,80,-25,-1,0},
    /*68*/{3,-27,4,-27,5,-27,7,-27,8,-27,12,-27,13,-27,14,-27,15,-27,18,-27,23,-27,25,-27,26,-27,27,-27,28,-27,30,-27,31,-27,34,-27,36,-27,37,-27,38,-27,43,-27,44,-27,45,-27,46,-27,48,-27,49,-27,50,-27,62,-27,76,-27,80,-27,-1,0},
    /*69*/{51,-126,52,-126,66,-126,80,-126,-1,0},
    /*70*/{80,-219,-1,0},
    /*71*/{23,198,51,-152,52,-152,60,-152,66,-152,80,-152,-1,0},
    /*72*/{51,-124,52,-124,66,-124,80,-124,-1,0},
    /*73*/{76,49,80,-220,-1,0},
    /*74*/{51,-154,52,-154,60,-154,66,-154,80,-154,-1,0},
    /*75*/{80,167,-1,0},
    /*76*/{51,-149,52,-149,60,-149,66,-149,80,-149,-1,0},
    /*77*/{80,-218,-1,0},
    /*78*/{80,-201,-1,0},
    /*79*/{23,72,36,95,-1,0},
    /*80*/{51,-123,52,-123,66,-123,80,-123,-1,0},
    /*81*/{51,-140,52,-140,66,-140,80,-140,-1,0},
    /*82*/{80,-202,-1,0},
    /*83*/{51,-128,52,-128,66,-128,80,-128,-1,0},
    /*84*/{51,-125,52,-125,66,-125,80,-125,-1,0},
    /*85*/{51,-156,52,-156,60,-156,66,-156,80,-156,-1,0},
    /*86*/{51,-185,52,-185,65,161,66,-185,80,-185,-1,0},
    /*87*/{51,-127,52,-127,66,-127,80,-127,-1,0},
    /*88*/{51,-142,52,-142,66,-142,80,-142,-1,0},
    /*89*/{51,-141,52,-141,66,-141,80,-141,-1,0},
    /*90*/{51,-158,52,-158,66,-158,80,-158,-1,0},
    /*91*/{51,-146,52,-146,60,-146,66,-146,80,-146,-1,0},
    /*92*/{51,-145,52,-145,60,-145,66,-145,80,-145,-1,0},
    /*93*/{51,-122,52,-122,66,-122,80,-122,-1,0},
    /*94*/{51,-151,52,-151,60,-151,66,-151,80,-151,-1,0},
    /*95*/{51,-155,52,-155,60,-155,66,-155,80,-155,-1,0},
    /*96*/{51,-157,52,-157,66,-157,80,-157,-1,0},
    /*97*/{51,-186,52,-186,65,101,66,-186,80,-186,-1,0},
    /*98*/{80,-203,-1,0},
    /*99*/{51,-144,52,-144,66,-144,80,-144,-1,0},
    /*100*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*101*/{51,-73,52,-73,55,-73,60,-73,64,-73,66,-73,70,-73,71,152,-1,0},
    /*102*/{51,-102,52,-102,53,-102,55,-102,57,-102,58,-102,60,-102,64,-102,66,-102,70,-102,71,-102,72,-102,73,-102,74,-102,77,-102,78,-102,-1,0},
    /*103*/{16,-92,26,-92,41,-92,59,-92,67,-92,68,-92,76,-92,79,-92,80,-92,83,-92,84,-92,85,-92,86,-92,-1,0},
    /*104*/{51,-101,52,-101,53,-101,55,-101,57,-101,58,-101,60,-101,64,-101,66,-101,70,-101,71,-101,72,-101,73,-101,74,-101,77,-101,78,-101,-1,0},
    /*105*/{51,-98,52,-98,53,-98,55,-98,57,-98,58,-98,60,-98,64,-98,66,-98,70,-98,71,-98,72,-98,73,-98,74,-98,77,-98,78,-98,-1,0},
    /*106*/{51,-94,52,-94,53,-94,55,-94,57,-94,58,-94,60,-94,64,-94,66,-94,70,-94,71,-94,72,-94,73,-94,74,-94,76,49,77,-94,78,-94,-1,0},
    /*107*/{51,-103,52,-103,53,-103,55,-103,57,-103,58,-103,60,-103,64,-103,66,-103,70,-103,71,-103,72,-103,73,-103,74,-103,77,-103,78,-103,-1,0},
    /*108*/{68,158,80,159,-1,0},
    /*109*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*110*/{16,-93,26,-93,41,-93,59,-93,67,-93,68,-93,76,-93,79,-93,80,-93,83,-93,84,-93,85,-93,86,-93,-1,0},
    /*111*/{51,-79,52,-79,55,-79,57,133,58,134,60,-79,64,-79,66,-79,70,-79,71,-79,72,-79,77,-79,78,-79,-1,0},
    /*112*/{81,154,-1,0},
    /*113*/{51,-85,52,-85,53,-85,55,-85,57,-85,58,-85,60,-85,64,-85,66,-85,70,-85,71,-85,72,-85,73,-85,74,-85,77,-85,78,-85,-1,0},
    /*114*/{51,-72,52,-72,55,-72,60,-72,64,-72,66,-72,70,150,-1,0},
    /*115*/{66,149,-1,0},
    /*116*/{51,-97,52,-97,53,-97,55,-97,57,-97,58,-97,60,-97,64,-97,66,-97,70,-97,71,-97,72,-97,73,-97,74,-97,77,-97,78,-97,-1,0},
    /*117*/{51,-90,52,-90,53,-90,55,-90,57,-90,58,-90,60,-90,64,-90,66,-90,70,-90,71,-90,72,-90,73,-90,74,-90,77,-90,78,-90,-1,0},
    /*118*/{16,-91,26,-91,41,-91,59,-91,67,-91,68,-91,76,-91,79,-91,80,-91,83,-91,84,-91,85,-91,86,-91,-1,0},
    /*119*/{51,-104,52,-104,53,-104,55,-104,57,-104,58,-104,60,-104,64,-104,66,-104,70,-104,71,-104,72,-104,73,-104,74,-104,77,-104,78,-104,-1,0},
    /*120*/{51,-95,52,-95,53,-95,55,-95,57,-95,58,-95,60,-95,64,-95,66,-95,70,-95,71,-95,72,-95,73,-95,74,-95,77,-95,78,-95,-1,0},
    /*121*/{51,-100,52,-100,53,-100,55,-100,57,-100,58,-100,60,-100,64,-100,66,-100,70,-100,71,-100,72,-100,73,-100,74,-100,77,-100,78,-100,-1,0},
    /*122*/{51,-75,52,-75,55,-75,60,-75,64,-75,66,-75,70,-75,71,-75,72,147,-1,0},
    /*123*/{51,-82,52,-82,53,136,55,-82,57,-82,58,-82,60,-82,64,-82,66,-82,70,-82,71,-82,72,-82,73,138,74,137,77,-82,78,-82,-1,0},
    /*124*/{68,144,80,145,-1,0},
    /*125*/{52,-109,64,-109,66,-109,-1,0},
    /*126*/{51,-77,52,-77,55,-77,60,-77,64,-77,66,-77,70,-77,71,-77,72,-77,77,131,78,130,-1,0},
    /*127*/{16,120,26,43,41,108,59,110,67,113,68,109,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*128*/{51,-89,52,-89,53,-89,55,-89,57,-89,58,-89,60,-89,64,-89,66,-89,70,-89,71,-89,72,-89,73,-89,74,-89,77,-89,78,-89,-1,0},
    /*129*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*130*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*131*/{51,-81,52,-81,55,-81,57,133,58,134,60,-81,64,-81,66,-81,70,-81,71,-81,72,-81,77,-81,78,-81,-1,0},
    /*132*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*133*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*134*/{51,-84,52,-84,53,136,55,-84,57,-84,58,-84,60,-84,64,-84,66,-84,70,-84,71,-84,72,-84,73,138,74,137,77,-84,78,-84,-1,0},
    /*135*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*136*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*137*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*138*/{51,-87,52,-87,53,-87,55,-87,57,-87,58,-87,60,-87,64,-87,66,-87,70,-87,71,-87,72,-87,73,-87,74,-87,77,-87,78,-87,-1,0},
    /*139*/{51,-88,52,-88,53,-88,55,-88,57,-88,58,-88,60,-88,64,-88,66,-88,70,-88,71,-88,72,-88,73,-88,74,-88,77,-88,78,-88,-1,0},
    /*140*/{51,-86,52,-86,53,-86,55,-86,57,-86,58,-86,60,-86,64,-86,66,-86,70,-86,71,-86,72,-86,73,-86,74,-86,77,-86,78,-86,-1,0},
    /*141*/{51,-83,52,-83,53,136,55,-83,57,-83,58,-83,60,-83,64,-83,66,-83,70,-83,71,-83,72,-83,73,138,74,137,77,-83,78,-83,-1,0},
    /*142*/{51,-80,52,-80,55,-80,57,133,58,134,60,-80,64,-80,66,-80,70,-80,71,-80,72,-80,77,-80,78,-80,-1,0},
    /*143*/{51,-108,52,-108,53,-108,55,-108,57,-108,58,-108,60,-108,64,-108,66,-108,70,-108,71,-108,72,-108,73,-108,74,-108,77,-108,78,-108,-1,0},
    /*144*/{68,146,-1,0},
    /*145*/{51,-107,52,-107,53,-107,55,-107,57,-107,58,-107,60,-107,64,-107,66,-107,70,-107,71,-107,72,-107,73,-107,74,-107,77,-107,78,-107,-1,0},
    /*146*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*147*/{51,-78,52,-78,55,-78,60,-78,64,-78,66,-78,70,-78,71,-78,72,-78,77,131,78,130,-1,0},
    /*148*/{51,-184,52,-184,66,-184,80,-184,-1,0},
    /*149*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*150*/{51,-74,52,-74,55,-74,60,-74,64,-74,66,-74,70,-74,71,152,-1,0},
    /*151*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*152*/{51,-76,52,-76,55,-76,60,-76,64,-76,66,-76,70,-76,71,-76,72,147,-1,0},
    /*153*/{67,155,-1,0},
    /*154*/{51,-99,52,-99,53,-99,55,-99,57,-99,58,-99,60,-99,64,-99,66,-99,70,-99,71,-99,72,-99,73,-99,74,-99,77,-99,78,-99,-1,0},
    /*155*/{60,157,-1,0},
    /*156*/{51,-96,52,-96,53,-96,55,-96,57,-96,58,-96,60,-96,64,-96,66,-96,70,-96,71,-96,72,-96,73,-96,74,-96,77,-96,78,-96,-1,0},
    /*157*/{51,-106,52,-106,53,-106,55,-106,57,-106,58,-106,60,-106,64,-106,66,-106,70,-106,71,-106,72,-106,73,-106,74,-106,77,-106,78,-106,-1,0},
    /*158*/{68,160,-1,0},
    /*159*/{51,-105,52,-105,53,-105,55,-105,57,-105,58,-105,60,-105,64,-105,66,-105,70,-105,71,-105,72,-105,73,-105,74,-105,77,-105,78,-105,-1,0},
    /*160*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*161*/{66,163,-1,0},
    /*162*/{51,-183,52,-183,66,-183,80,-183,-1,0},
    /*163*/{51,-150,52,-150,60,-150,66,-150,80,-150,-1,0},
    /*164*/{51,-148,52,-148,60,-148,66,-148,80,-148,-1,0},
    /*165*/{51,-147,52,-147,60,-147,66,-147,80,-147,-1,0},
    /*166*/{59,168,-1,0},
    /*167*/{19,186,20,189,29,185,60,187,-1,0},
    /*168*/{9,-221,33,170,51,-221,-1,0},
    /*169*/{59,182,-1,0},
    /*170*/{9,175,51,-221,-1,0},
    /*171*/{9,-213,51,-213,-1,0},
    /*172*/{51,-198,-1,0},
    /*173*/{51,-215,-1,0},
    /*174*/{59,176,-1,0},
    /*175*/{68,109,79,125,-1,0},
    /*176*/{52,180,60,-216,-1,0},
    /*177*/{60,179,-1,0},
    /*178*/{51,-214,-1,0},
    /*179*/{68,109,79,125,-1,0},
    /*180*/{60,-217,-1,0},
    /*181*/{26,43,76,45,80,42,-1,0},
    /*182*/{60,184,-1,0},
    /*183*/{9,-212,51,-212,-1,0},
    /*184*/{3,-210,5,-210,7,-210,12,-210,18,-210,23,-210,26,-210,27,-210,36,-210,37,-210,44,-210,46,-210,49,-210,50,-210,76,-210,80,-210,-1,0},
    /*185*/{3,-209,5,-209,7,-209,12,-209,18,-209,23,-209,26,-209,27,-209,36,-209,37,-209,44,-209,46,-209,49,-209,50,-209,76,-209,80,-209,-1,0},
    /*186*/{9,-205,33,-205,51,-205,-1,0},
    /*187*/{60,197,-1,0},
    /*188*/{3,-211,5,-211,7,-211,12,-211,18,-211,23,-211,26,-211,27,-211,36,-211,37,-211,44,-211,46,-211,49,-211,50,-211,76,-211,80,-211,-1,0},
    /*189*/{52,195,60,-207,-1,0},
    /*190*/{3,91,5,86,7,75,12,100,18,89,23,72,26,43,27,97,36,95,37,87,44,80,46,84,49,96,50,98,76,45,80,42,-1,0},
    /*191*/{80,193,-1,0},
    /*192*/{51,-139,52,-139,60,-139,-1,0},
    /*193*/{52,-208,60,-208,-1,0},
    /*194*/{19,186,20,189,29,185,-1,0},
    /*195*/{60,-206,-1,0},
    /*196*/{9,-204,33,-204,51,-204,-1,0},
    /*197*/{51,-153,52,-153,60,-153,66,-153,80,-153,-1,0},
    /*198*/{51,-15,-1,0},
    /*199*/{80,193,-1,0},
    /*200*/{51,-194,52,203,-1,0},
    /*201*/{51,-193,-1,0},
    /*202*/{80,193,-1,0},
    /*203*/{51,-195,-1,0},
    /*204*/{3,91,5,86,7,75,12,100,18,89,23,72,26,43,27,97,36,95,37,87,44,80,46,84,49,96,50,98,76,45,80,42,-1,0},
    /*205*/{80,193,-1,0},
    /*206*/{51,-192,-1,0},
    /*207*/{3,-24,4,-24,5,-24,7,-24,8,-24,12,-24,13,-24,14,-24,15,-24,18,-24,23,-24,25,-24,26,-24,27,-24,28,-24,30,-24,31,-24,34,-24,36,-24,37,-24,38,-24,43,-24,44,-24,45,-24,46,-24,48,-24,49,-24,50,-24,62,-24,76,-24,80,-24,-1,0},
    /*208*/{51,-18,55,40,61,-221,-1,0},
    /*209*/{61,211,-1,0},
    /*210*/{3,-221,4,55,5,-221,7,-221,8,28,12,-221,13,27,14,11,18,-221,23,-221,25,13,26,-221,27,-221,28,57,34,54,36,-221,37,-221,38,12,43,26,44,-221,45,24,46,-221,48,-221,49,-221,50,-221,62,-221,76,-221,80,-221,-1,0},
    /*211*/{62,213,-1,0},
    /*212*/{51,-14,-1,0},
    /*213*/{80,-70,-1,0},
    /*214*/{80,-69,-1,0},
    /*215*/{80,-65,-1,0},
    /*216*/{76,49,80,-71,-1,0},
    /*217*/{80,-64,-1,0},
    /*218*/{80,-68,-1,0},
    /*219*/{80,-66,-1,0},
    /*220*/{80,-67,-1,0},
    /*221*/{80,-143,-1,0},
    /*222*/{80,224,-1,0},
    /*223*/{56,225,-1,0},
    /*224*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*225*/{51,-63,-1,0},
    /*226*/{61,228,-1,0},
    /*227*/{80,229,-1,0},
    /*228*/{52,232,62,-178,-1,0},
    /*229*/{62,231,-1,0},
    /*230*/{51,-177,60,-177,80,-177,-1,0},
    /*231*/{80,229,-1,0},
    /*232*/{62,-179,-1,0},
    /*233*/{51,-132,80,-132,-1,0},
    /*234*/{51,-134,80,-134,-1,0},
    /*235*/{51,-115,-1,0},
    /*236*/{51,-117,80,-117,-1,0},
    /*237*/{51,-120,52,-120,66,-120,80,-120,-1,0},
    /*238*/{65,268,-1,0},
    /*239*/{51,-118,80,-118,-1,0},
    /*240*/{51,-133,80,-133,-1,0},
    /*241*/{51,-121,52,-121,66,-121,76,49,80,-121,-1,0},
    /*242*/{51,-130,52,-130,66,-130,80,-130,-1,0},
    /*243*/{80,255,-1,0},
    /*244*/{51,-129,52,-129,66,-129,80,-129,-1,0},
    /*245*/{51,-119,52,-119,66,-119,80,-119,-1,0},
    /*246*/{51,-131,52,-131,66,-131,80,-131,-1,0},
    /*247*/{65,249,-1,0},
    /*248*/{3,91,5,86,7,75,12,100,17,239,18,89,23,72,26,43,27,97,35,248,36,95,37,87,44,80,46,84,49,96,50,98,76,45,80,42,-1,0},
    /*249*/{52,251,66,252,-1,0},
    /*250*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*251*/{51,-182,52,-182,66,-182,80,-182,-1,0},
    /*252*/{66,254,-1,0},
    /*253*/{51,-181,52,-181,66,-181,80,-181,-1,0},
    /*254*/{51,-139,52,-139,63,264,-1,0},
    /*255*/{51,-137,52,-137,-1,0},
    /*256*/{51,-136,52,260,-1,0},
    /*257*/{51,-138,52,-138,-1,0},
    /*258*/{51,-116,-1,0},
    /*259*/{80,255,-1,0},
    /*260*/{51,-135,-1,0},
    /*261*/{51,-189,52,-189,63,264,-1,0},
    /*262*/{51,-188,52,-188,-1,0},
    /*263*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*264*/{64,266,-1,0},
    /*265*/{51,-191,52,-191,63,-191,-1,0},
    /*266*/{51,-190,52,-190,-1,0},
    /*267*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*268*/{52,270,-1,0},
    /*269*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*270*/{66,272,-1,0},
    /*271*/{51,-187,52,-187,66,-187,80,-187,-1,0},
    /*272*/{0,-12,2,-12,8,-12,10,-12,13,-12,14,-12,21,-12,22,-12,24,-12,25,-12,32,-12,38,-12,43,-12,45,-12,47,-12,62,-12,-1,0},
    /*273*/{40,275,-1,0},
    /*274*/{59,276,-1,0},
    /*275*/{5,86,7,75,13,27,23,72,26,43,36,95,44,80,49,96,76,45,80,42,-1,0},
    /*276*/{60,-167,-1,0},
    /*277*/{60,-165,-1,0},
    /*278*/{60,283,-1,0},
    /*279*/{60,-168,76,49,-1,0},
    /*280*/{60,-164,-1,0},
    /*281*/{60,-166,-1,0},
    /*282*/{61,284,-1,0},
    /*283*/{6,289,11,286,-1,0},
    /*284*/{62,300,-1,0},
    /*285*/{55,298,-1,0},
    /*286*/{6,289,11,286,62,-169,-1,0},
    /*287*/{3,91,5,86,7,75,12,100,13,27,17,239,18,89,23,72,26,43,27,97,35,248,36,95,37,87,38,12,44,80,45,24,46,84,49,96,50,98,76,45,80,42,-1,0},
    /*288*/{16,120,26,43,41,108,57,104,58,119,59,110,67,113,68,109,75,111,76,45,79,125,80,42,83,117,84,106,85,103,86,105,-1,0},
    /*289*/{55,291,-1,0},
    /*290*/{3,-172,5,-172,6,289,7,-172,11,286,12,-172,13,-172,17,-172,18,-172,23,-172,26,-172,27,-172,35,-172,36,-172,37,-172,38,-172,44,-172,45,-172,46,-172,49,-172,50,-172,76,-172,80,-172,-1,0},
    /*291*/{3,-174,5,-174,7,-174,12,-174,13,-174,17,-174,18,-174,23,-174,26,-174,27,-174,35,-174,36,-174,37,-174,38,-174,44,-174,45,-174,46,-174,49,-174,50,-174,76,-174,80,-174,-1,0},
    /*292*/{51,296,-1,0},
    /*293*/{80,255,-1,0},
    /*294*/{51,-176,-1,0},
    /*295*/{6,-171,11,-171,62,-171,-1,0},
    /*296*/{62,-170,-1,0},
    /*297*/{3,-173,5,-173,6,289,7,-173,11,286,12,-173,13,-173,17,-173,18,-173,23,-173,26,-173,27,-173,35,-173,36,-173,37,-173,38,-173,44,-173,45,-173,46,-173,49,-173,50,-173,76,-173,80,-173,-1,0},
    /*298*/{3,-175,5,-175,7,-175,12,-175,13,-175,17,-175,18,-175,23,-175,26,-175,27,-175,35,-175,36,-175,37,-175,38,-175,44,-175,45,-175,46,-175,49,-175,50,-175,76,-175,80,-175,-1,0},
    /*299*/{51,-163,80,-163,-1,0},
    /*300*/{80,302,-1,0},
    /*301*/{51,-21,55,40,61,-221,-1,0},
    /*302*/{61,304,-1,0},
    /*303*/{3,-221,4,55,5,-221,7,-221,8,28,12,-221,13,27,14,11,18,-221,23,-221,25,13,26,-221,27,-221,28,57,34,54,36,-221,37,-221,38,12,43,26,44,-221,45,24,46,-221,48,-221,49,-221,50,-221,62,-221,76,-221,80,-221,-1,0},
    /*304*/{62,306,-1,0},
    /*305*/{51,-17,-1,0},
    /*306*/{0,-9,2,-9,8,-9,10,-9,13,-9,14,-9,21,-9,22,-9,24,-9,25,-9,32,-9,38,-9,43,-9,45,-9,47,-9,62,-9,-1,0},
    /*307*/{61,309,-1,0},
    /*308*/{2,30,8,28,10,8,13,27,14,11,21,29,22,14,24,21,25,13,32,23,38,12,43,26,45,24,47,17,-1,0},
    /*309*/{62,311,-1,0},
    /*310*/{51,-13,-1,0},
    /*311*/{0,-8,2,-8,8,-8,10,-8,13,-8,14,-8,21,-8,22,-8,24,-8,25,-8,32,-8,38,-8,43,-8,45,-8,47,-8,62,-8,-1,0},
    /*312*/{3,91,5,86,7,75,12,100,13,27,17,239,18,89,23,72,26,43,27,97,35,248,36,95,37,87,38,12,39,318,44,80,45,24,46,84,49,96,50,98,51,-40,55,317,61,-221,76,45,80,42,-1,0},
    /*313*/{61,-49,-1,0},
    /*314*/{61,326,-1,0},
    /*315*/{51,-41,-1,0},
    /*316*/{26,-221,42,320,76,-221,80,-221,-1,0},
    /*317*/{26,43,76,45,80,42,-1,0},
    /*318*/{61,-47,-1,0},
    /*319*/{26,-50,76,-50,80,-50,-1,0},
    /*320*/{26,-51,76,-51,80,-51,-1,0},
    /*321*/{26,43,76,45,80,42,-1,0},
    /*322*/{39,324,61,-46,-1,0},
    /*323*/{26,43,76,45,80,42,-1,0},
    /*324*/{61,-48,-1,0},
    /*325*/{3,-221,4,55,5,-221,7,-221,8,28,12,-221,13,27,14,11,15,332,18,-221,23,-221,25,13,26,-221,27,-221,28,57,30,327,31,329,34,54,36,-221,37,-221,38,12,43,26,44,-221,45,24,46,-221,48,-221,49,-221,50,-221,62,-221,76,-221,80,-221,-1,0},
    /*326*/{3,91,5,86,7,75,12,100,13,27,17,239,18,89,23,72,26,43,27,97,35,248,36,95,37,87,38,12,44,80,45,24,46,84,49,96,50,98,76,45,80,42,-1,0},
    /*327*/{3,-55,4,-55,5,-55,7,-55,8,-55,12,-55,13,-55,14,-55,15,-55,18,-55,23,-55,25,-55,26,-55,27,-55,28,-55,30,-55,31,-55,34,-55,36,-55,37,-55,38,-55,43,-55,44,-55,45,-55,46,-55,48,-55,49,-55,50,-55,62,-55,76,-55,80,-55,-1,0},
    /*328*/{3,91,5,86,7,75,12,100,13,27,17,239,18,89,23,72,26,43,27,97,35,248,36,95,37,87,38,12,44,80,45,24,46,84,49,96,50,98,76,45,80,42,-1,0},
    /*329*/{3,-200,5,-200,7,-200,12,-200,18,-200,23,-200,26,-200,27,-200,36,-200,37,-200,44,-200,46,-200,48,-200,49,-200,50,-200,62,-53,76,-200,80,-200,-1,0},
    /*330*/{3,-54,4,-54,5,-54,7,-54,8,-54,12,-54,13,-54,14,-54,15,-54,18,-54,23,-54,25,-54,26,-54,27,-54,28,-54,30,-54,31,-54,34,-54,36,-54,37,-54,38,-54,43,-54,44,-54,45,-54,46,-54,48,-54,49,-54,50,-54,62,-54,76,-54,80,-54,-1,0},
    /*331*/{80,337,-1,0},
    /*332*/{62,336,-1,0},
    /*333*/{3,-221,4,55,5,-221,7,-221,8,28,12,-221,13,27,14,11,15,332,18,-221,23,-221,25,13,26,-221,27,-221,28,57,30,327,31,329,34,54,36,-221,37,-221,38,12,43,26,44,-221,45,24,46,-221,48,-221,49,-221,50,-221,62,-221,76,-221,80,-221,-1,0},
    /*334*/{62,-52,-1,0},
    /*335*/{51,-45,-1,0},
    /*336*/{59,338,-1,0},
    /*337*/{19,339,60,341,-1,0},
    /*338*/{3,91,5,86,7,75,12,100,18,89,23,72,26,43,27,97,36,95,37,87,44,80,46,84,49,96,50,98,76,45,80,42,-1,0},
    /*339*/{60,346,-1,0},
    /*340*/{51,345,-1,0},
    /*341*/{52,343,60,-60,-1,0},
    /*342*/{19,339,-1,0},
    /*343*/{60,-61,-1,0},
    /*344*/{3,-57,4,-57,5,-57,7,-57,8,-57,12,-57,13,-57,14,-57,15,-57,18,-57,23,-57,25,-57,26,-57,27,-57,28,-57,30,-57,31,-57,34,-57,36,-57,37,-57,38,-57,43,-57,44,-57,45,-57,46,-57,48,-57,49,-57,50,-57,62,-57,76,-57,80,-57,-1,0},
    /*345*/{51,347,-1,0},
    /*346*/{3,-56,4,-56,5,-56,7,-56,8,-56,12,-56,13,-56,14,-56,15,-56,18,-56,23,-56,25,-56,26,-56,27,-56,28,-56,30,-56,31,-56,34,-56,36,-56,37,-56,38,-56,43,-56,44,-56,45,-56,46,-56,48,-56,49,-56,50,-56,62,-56,76,-56,80,-56,-1,0},
    /*347*/{80,193,-1,0},
    /*348*/{52,-62,60,-62,-1,0},
    /*349*/{80,255,-1,0},
    /*350*/{51,352,-1,0},
    /*351*/{3,-58,4,-58,5,-58,7,-58,8,-58,12,-58,13,-58,14,-58,15,-58,18,-58,23,-58,25,-58,26,-58,27,-58,28,-58,30,-58,31,-58,34,-58,36,-58,37,-58,38,-58,43,-58,44,-58,45,-58,46,-58,48,-58,49,-58,50,-58,62,-58,76,-58,80,-58,-1,0},
    /*352*/{80,255,-1,0},
    /*353*/{51,355,-1,0},
    /*354*/{3,-59,4,-59,5,-59,7,-59,8,-59,12,-59,13,-59,14,-59,15,-59,18,-59,23,-59,25,-59,26,-59,27,-59,28,-59,30,-59,31,-59,34,-59,36,-59,37,-59,38,-59,43,-59,44,-59,45,-59,46,-59,48,-59,49,-59,50,-59,62,-59,76,-59,80,-59,-1,0},
    /*355*/{0,-5,62,-5,-1,0},
    /*356*/{80,358,-1,0},
    /*357*/{51,-20,55,40,61,-221,-1,0},
    /*358*/{61,360,-1,0},
    /*359*/{3,-221,4,55,5,-221,7,-221,8,28,12,-221,13,27,14,11,18,-221,23,-221,25,13,26,-221,27,-221,28,57,34,54,36,-221,37,-221,38,12,43,26,44,-221,45,24,46,-221,48,-221,49,-221,50,-221,62,-221,76,-221,80,-221,-1,0},
    /*360*/{62,362,-1,0},
    /*361*/{51,-16,-1,0},
    /*362*/{51,-180,-1,0},
    /*363*/{61,365,-1,0},
    /*364*/{3,91,5,86,7,75,12,100,13,27,17,239,18,89,23,72,26,43,27,97,35,248,36,95,37,87,38,12,44,80,45,24,46,84,49,96,50,98,76,45,80,42,-1,0},
    /*365*/{62,372,-1,0},
    /*366*/{80,255,-1,0},
    /*367*/{3,91,5,86,7,75,12,100,13,27,17,239,18,89,23,72,26,43,27,97,35,248,36,95,37,87,38,12,44,80,45,24,46,84,49,96,50,98,62,-160,76,45,80,42,-1,0},
    /*368*/{62,-161,-1,0},
    /*369*/{51,371,-1,0},
    /*370*/{3,-162,5,-162,7,-162,12,-162,13,-162,17,-162,18,-162,23,-162,26,-162,27,-162,35,-162,36,-162,37,-162,38,-162,44,-162,45,-162,46,-162,49,-162,50,-162,62,-162,76,-162,80,-162,-1,0},
    /*371*/{51,-159,80,-159,-1,0},
    /*372*/{61,374,-1,0},
    /*373*/{3,91,5,86,7,75,12,100,13,27,17,239,18,89,23,72,26,43,27,97,35,248,36,95,37,87,38,12,44,80,45,24,46,84,49,96,50,98,62,376,76,45,80,42,-1,0},
    /*374*/{62,377,-1,0},
    /*375*/{51,-196,-1,0},
    /*376*/{51,-197,-1,0},
    /*377*/{0,-11,2,-11,8,-11,10,-11,13,-11,14,-11,21,-11,22,-11,24,-11,25,-11,32,-11,38,-11,43,-11,45,-11,47,-11,62,-11,-1,0},
    /*378*/{80,380,-1,0},
    /*379*/{39,318,55,317,61,-221,-1,0},
    /*380*/{61,382,-1,0},
    /*381*/{3,-221,4,55,5,-221,7,-221,8,28,12,-221,13,27,14,11,15,332,18,-221,23,-221,25,13,26,-221,27,-221,28,57,30,327,31,329,34,54,36,-221,37,-221,38,12,43,26,44,-221,45,24,46,-221,48,-221,49,-221,50,-221,62,-221,76,-221,80,-221,-1,0},
    /*382*/{62,384,-1,0},
    /*383*/{51,-44,-1,0},
    /*384*/{0,-7,2,-7,8,-7,10,-7,13,-7,14,-7,21,-7,22,-7,24,-7,25,-7,32,-7,38,-7,43,-7,45,-7,47,-7,62,-7,-1,0},
    /*385*/{0,-10,2,-10,8,-10,10,-10,13,-10,14,-10,21,-10,22,-10,24,-10,25,-10,32,-10,38,-10,43,-10,45,-10,47,-10,62,-10,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{4,3,9,2,96,1,-1,-1},
    /*1*/{10,14,11,33,12,8,13,5,17,24,18,17,19,15,27,18,39,6,45,31,49,9,50,32,51,21,52,30,53,19,-1,-1},
    /*2*/{-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{-1,-1},
    /*8*/{-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{-1,-1},
    /*12*/{79,362,-1,-1},
    /*13*/{-1,-1},
    /*14*/{10,14,11,355,12,8,13,5,17,24,18,17,19,15,27,18,39,6,45,31,49,9,50,32,51,21,52,30,53,19,-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{-1,-1},
    /*19*/{-1,-1},
    /*20*/{-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{16,241,40,235,41,243,46,236,47,237,48,239,49,234,50,233,52,240,57,245,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,242,72,244,73,246,-1,-1},
    /*26*/{-1,-1},
    /*27*/{16,216,28,222,58,217,59,220,60,81,61,218,62,89,63,76,64,92,65,91,66,215,67,219,68,213,71,214,-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{4,40,93,38,-1,-1},
    /*38*/{-1,-1},
    /*39*/{16,43,90,45,-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{16,43,90,50,-1,-1},
    /*48*/{-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{4,59,5,57,14,55,15,63,27,60,39,52,45,31,49,9,50,32,51,62,52,30,53,19,84,61,85,58,-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{16,73,43,199,57,77,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,70,-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{16,73,42,75,43,78,57,77,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,70,82,71,70,-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{4,59,5,57,14,64,15,63,27,60,39,52,45,31,49,9,50,32,51,62,52,30,53,19,84,61,85,58,-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{63,163,64,165,65,164,-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
    /*90*/{-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{-1,-1},
    /*100*/{8,127,16,106,29,125,30,115,31,114,32,101,33,122,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*101*/{-1,-1},
    /*102*/{-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{8,127,16,106,29,155,31,114,32,101,33,122,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{-1,-1},
    /*115*/{-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{16,106,38,128,74,120,75,121,-1,-1},
    /*128*/{-1,-1},
    /*129*/{8,127,16,106,35,142,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*130*/{8,127,16,106,35,131,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*131*/{-1,-1},
    /*132*/{8,127,16,106,36,141,37,113,38,117,74,120,75,121,-1,-1},
    /*133*/{8,127,16,106,36,134,37,113,38,117,74,120,75,121,-1,-1},
    /*134*/{-1,-1},
    /*135*/{8,127,16,106,37,140,38,117,74,120,75,121,-1,-1},
    /*136*/{8,127,16,106,37,139,38,117,74,120,75,121,-1,-1},
    /*137*/{8,127,16,106,37,138,38,117,74,120,75,121,-1,-1},
    /*138*/{-1,-1},
    /*139*/{-1,-1},
    /*140*/{-1,-1},
    /*141*/{-1,-1},
    /*142*/{-1,-1},
    /*143*/{-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{8,127,16,106,34,147,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*147*/{-1,-1},
    /*148*/{-1,-1},
    /*149*/{8,127,16,106,32,150,33,122,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*150*/{-1,-1},
    /*151*/{8,127,16,106,33,152,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*152*/{-1,-1},
    /*153*/{-1,-1},
    /*154*/{-1,-1},
    /*155*/{-1,-1},
    /*156*/{-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{-1,-1},
    /*160*/{8,127,16,106,29,125,30,161,31,114,32,101,33,122,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{-1,-1},
    /*166*/{89,168,-1,-1},
    /*167*/{6,190,82,189,88,187,-1,-1},
    /*168*/{4,171,83,170,-1,-1},
    /*169*/{-1,-1},
    /*170*/{2,172,4,173,-1,-1},
    /*171*/{-1,-1},
    /*172*/{-1,-1},
    /*173*/{-1,-1},
    /*174*/{-1,-1},
    /*175*/{3,177,75,176,-1,-1},
    /*176*/{-1,-1},
    /*177*/{-1,-1},
    /*178*/{-1,-1},
    /*179*/{3,180,75,176,-1,-1},
    /*180*/{-1,-1},
    /*181*/{16,43,90,182,-1,-1},
    /*182*/{-1,-1},
    /*183*/{-1,-1},
    /*184*/{-1,-1},
    /*185*/{-1,-1},
    /*186*/{-1,-1},
    /*187*/{-1,-1},
    /*188*/{-1,-1},
    /*189*/{-1,-1},
    /*190*/{16,73,43,191,57,77,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,70,-1,-1},
    /*191*/{79,193,-1,-1},
    /*192*/{-1,-1},
    /*193*/{-1,-1},
    /*194*/{6,190,82,189,88,195,-1,-1},
    /*195*/{-1,-1},
    /*196*/{-1,-1},
    /*197*/{-1,-1},
    /*198*/{-1,-1},
    /*199*/{79,200,91,201,-1,-1},
    /*200*/{-1,-1},
    /*201*/{-1,-1},
    /*202*/{79,200,91,203,-1,-1},
    /*203*/{-1,-1},
    /*204*/{16,73,43,205,57,77,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,70,-1,-1},
    /*205*/{79,200,91,206,-1,-1},
    /*206*/{-1,-1},
    /*207*/{-1,-1},
    /*208*/{4,40,93,209,-1,-1},
    /*209*/{-1,-1},
    /*210*/{4,59,5,57,14,211,15,63,27,60,39,52,45,31,49,9,50,32,51,62,52,30,53,19,84,61,85,58,-1,-1},
    /*211*/{-1,-1},
    /*212*/{-1,-1},
    /*213*/{-1,-1},
    /*214*/{-1,-1},
    /*215*/{-1,-1},
    /*216*/{-1,-1},
    /*217*/{-1,-1},
    /*218*/{-1,-1},
    /*219*/{-1,-1},
    /*220*/{-1,-1},
    /*221*/{-1,-1},
    /*222*/{-1,-1},
    /*223*/{-1,-1},
    /*224*/{8,127,16,106,29,225,31,114,32,101,33,122,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*225*/{-1,-1},
    /*226*/{-1,-1},
    /*227*/{94,229,-1,-1},
    /*228*/{-1,-1},
    /*229*/{-1,-1},
    /*230*/{-1,-1},
    /*231*/{94,232,-1,-1},
    /*232*/{-1,-1},
    /*233*/{-1,-1},
    /*234*/{-1,-1},
    /*235*/{-1,-1},
    /*236*/{-1,-1},
    /*237*/{-1,-1},
    /*238*/{-1,-1},
    /*239*/{-1,-1},
    /*240*/{-1,-1},
    /*241*/{-1,-1},
    /*242*/{-1,-1},
    /*243*/{78,256,79,255,80,257,92,258,-1,-1},
    /*244*/{-1,-1},
    /*245*/{-1,-1},
    /*246*/{-1,-1},
    /*247*/{-1,-1},
    /*248*/{16,241,46,249,47,237,57,245,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,242,72,244,73,246,-1,-1},
    /*249*/{-1,-1},
    /*250*/{8,127,16,106,29,125,30,252,31,114,32,101,33,122,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*251*/{-1,-1},
    /*252*/{-1,-1},
    /*253*/{-1,-1},
    /*254*/{81,261,95,262,-1,-1},
    /*255*/{-1,-1},
    /*256*/{-1,-1},
    /*257*/{-1,-1},
    /*258*/{-1,-1},
    /*259*/{78,256,79,255,80,257,92,260,-1,-1},
    /*260*/{-1,-1},
    /*261*/{81,261,95,266,-1,-1},
    /*262*/{-1,-1},
    /*263*/{8,127,16,106,29,125,30,264,31,114,32,101,33,122,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*264*/{-1,-1},
    /*265*/{-1,-1},
    /*266*/{-1,-1},
    /*267*/{8,127,16,106,29,125,30,268,31,114,32,101,33,122,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*268*/{-1,-1},
    /*269*/{8,127,16,106,29,125,30,270,31,114,32,101,33,122,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*270*/{-1,-1},
    /*271*/{-1,-1},
    /*272*/{-1,-1},
    /*273*/{-1,-1},
    /*274*/{-1,-1},
    /*275*/{16,279,44,278,49,276,58,280,63,76,64,92,65,91,66,277,67,281,-1,-1},
    /*276*/{-1,-1},
    /*277*/{-1,-1},
    /*278*/{-1,-1},
    /*279*/{-1,-1},
    /*280*/{-1,-1},
    /*281*/{-1,-1},
    /*282*/{-1,-1},
    /*283*/{54,284,55,286,87,287,-1,-1},
    /*284*/{-1,-1},
    /*285*/{-1,-1},
    /*286*/{54,296,55,286,87,287,-1,-1},
    /*287*/{16,241,41,293,46,236,47,237,48,239,49,234,50,233,52,240,56,292,57,245,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,242,72,244,73,246,-1,-1},
    /*288*/{8,127,16,106,29,289,31,114,32,101,33,122,34,126,35,111,36,123,37,113,38,117,74,120,75,121,-1,-1},
    /*289*/{-1,-1},
    /*290*/{87,291,-1,-1},
    /*291*/{-1,-1},
    /*292*/{-1,-1},
    /*293*/{78,294,79,255,80,257,-1,-1},
    /*294*/{-1,-1},
    /*295*/{-1,-1},
    /*296*/{-1,-1},
    /*297*/{87,298,-1,-1},
    /*298*/{-1,-1},
    /*299*/{-1,-1},
    /*300*/{-1,-1},
    /*301*/{4,40,93,302,-1,-1},
    /*302*/{-1,-1},
    /*303*/{4,59,5,57,14,304,15,63,27,60,39,52,45,31,49,9,50,32,51,62,52,30,53,19,84,61,85,58,-1,-1},
    /*304*/{-1,-1},
    /*305*/{-1,-1},
    /*306*/{-1,-1},
    /*307*/{-1,-1},
    /*308*/{10,14,11,309,12,8,13,5,17,24,18,17,19,15,27,18,39,6,45,31,49,9,50,32,51,21,52,30,53,19,-1,-1},
    /*309*/{-1,-1},
    /*310*/{-1,-1},
    /*311*/{-1,-1},
    /*312*/{4,313,16,241,21,314,41,315,46,236,47,237,48,239,49,234,50,233,52,240,57,245,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,242,72,244,73,246,-1,-1},
    /*313*/{-1,-1},
    /*314*/{-1,-1},
    /*315*/{-1,-1},
    /*316*/{4,320,7,321,-1,-1},
    /*317*/{16,43,90,318,-1,-1},
    /*318*/{-1,-1},
    /*319*/{-1,-1},
    /*320*/{-1,-1},
    /*321*/{16,43,90,322,-1,-1},
    /*322*/{-1,-1},
    /*323*/{16,43,90,324,-1,-1},
    /*324*/{-1,-1},
    /*325*/{4,329,5,57,15,330,22,332,23,333,24,327,27,60,39,52,45,31,49,9,50,32,51,62,52,30,53,19,84,61,85,58,-1,-1},
    /*326*/{16,241,41,352,46,236,47,237,48,239,49,234,50,233,52,240,57,245,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,242,72,244,73,246,-1,-1},
    /*327*/{-1,-1},
    /*328*/{16,241,41,349,46,236,47,237,48,239,49,234,50,233,52,240,57,245,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,242,72,244,73,246,-1,-1},
    /*329*/{-1,-1},
    /*330*/{-1,-1},
    /*331*/{-1,-1},
    /*332*/{-1,-1},
    /*333*/{4,329,5,57,15,330,22,334,23,333,24,327,27,60,39,52,45,31,49,9,50,32,51,62,52,30,53,19,84,61,85,58,-1,-1},
    /*334*/{-1,-1},
    /*335*/{-1,-1},
    /*336*/{-1,-1},
    /*337*/{25,339,26,341,-1,-1},
    /*338*/{16,73,43,347,57,77,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,70,-1,-1},
    /*339*/{-1,-1},
    /*340*/{-1,-1},
    /*341*/{-1,-1},
    /*342*/{25,343,26,341,-1,-1},
    /*343*/{-1,-1},
    /*344*/{-1,-1},
    /*345*/{-1,-1},
    /*346*/{-1,-1},
    /*347*/{79,348,-1,-1},
    /*348*/{-1,-1},
    /*349*/{78,256,79,255,80,257,92,350,-1,-1},
    /*350*/{-1,-1},
    /*351*/{-1,-1},
    /*352*/{78,256,79,255,80,257,92,353,-1,-1},
    /*353*/{-1,-1},
    /*354*/{-1,-1},
    /*355*/{-1,-1},
    /*356*/{-1,-1},
    /*357*/{4,40,93,358,-1,-1},
    /*358*/{-1,-1},
    /*359*/{4,59,5,57,14,360,15,63,27,60,39,52,45,31,49,9,50,32,51,62,52,30,53,19,84,61,85,58,-1,-1},
    /*360*/{-1,-1},
    /*361*/{-1,-1},
    /*362*/{-1,-1},
    /*363*/{-1,-1},
    /*364*/{16,241,41,366,46,236,47,237,48,239,49,234,50,233,52,240,57,245,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,242,72,244,73,246,77,367,86,365,-1,-1},
    /*365*/{-1,-1},
    /*366*/{78,256,79,255,80,257,92,369,-1,-1},
    /*367*/{16,241,41,366,46,236,47,237,48,239,49,234,50,233,52,240,57,245,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,242,72,244,73,246,77,367,86,368,-1,-1},
    /*368*/{-1,-1},
    /*369*/{-1,-1},
    /*370*/{-1,-1},
    /*371*/{-1,-1},
    /*372*/{-1,-1},
    /*373*/{16,241,41,366,46,236,47,237,48,239,49,234,50,233,52,240,57,245,58,80,59,93,60,81,62,89,63,76,64,92,65,91,66,72,67,84,68,69,69,87,71,242,72,244,73,246,77,367,86,374,-1,-1},
    /*374*/{-1,-1},
    /*375*/{-1,-1},
    /*376*/{-1,-1},
    /*377*/{-1,-1},
    /*378*/{-1,-1},
    /*379*/{4,313,21,380,-1,-1},
    /*380*/{-1,-1},
    /*381*/{4,329,5,57,15,330,22,382,23,333,24,327,27,60,39,52,45,31,49,9,50,32,51,62,52,30,53,19,84,61,85,58,-1,-1},
    /*382*/{-1,-1},
    /*383*/{-1,-1},
    /*384*/{-1,-1},
    /*385*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF symbol index */
  public int EOF_sym() {return 0;}

  /** error symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {
 
        lexer.init(); 

    }

  /** scan to get the next token */
  public java_cup.runtime.token scan()
    throws java.lang.Exception
    {
 
        return lexer.next_token(); 

    }



    static String command_line[] = null;

    public static Vector import_list = new Vector();
    public static Hashtable pack_replace = new Hashtable();
    public static Stack scopes = new Stack();

    public static String currentVersion = "";
    public static String compiler_version = "1.4 beta 3, March 2002";

    private static final String yearString = "1997-2002";
   
    static String out_dir = "."; 
    static String package_prefix = null;

    static boolean parse_only = false;
    static boolean global_import = false;

    /** used for internal checking that name conversion 
        to mapped Java names is done only after parsing */
    public static boolean done_parsing = false;

    /** compiler flags */
    public static boolean include_state = false;
    public static boolean strict_names = true;

    public static boolean generateIR = false;
    public static boolean generate_skeletons = true;
    public static boolean generate_stubs = true;

    private static boolean generateIncluded = false;
    private static boolean inhibitionState = false;
    private static boolean localityContraint = false;

    private static int activeParseThreads;

    /*  a la CORBA 2.4, allow forward declarations that remain undefined */
    public static boolean sloppy = false;

    /**
     *  allows reinitialization if compiler is not 
     *  run from a command-line
     */

    private static void init()
    {
        command_line = null;
        import_list = new Vector();
        pack_replace = new Hashtable();
        scopes = new Stack();

        out_dir = "."; 
        package_prefix = null;

        parse_only = false;
        global_import = false;

        include_state = false;
        generateIR = false;
        generate_skeletons = true;

        generateIncluded = false;
        boolean inhibitionState = false;
        boolean localityContraint = false;
    }

    public static void main( String argv[] ) 
    {
        //        init();
        boolean result = compile( argv );
    }

    
    public static boolean compile( String argv[] ) 
    {
        init();
        Hashtable tmpDefines = new Hashtable();
        Hashtable tmpUnDefines = new Hashtable();
        try
        {
            command_line = argv;
            if( argv.length > 0 )
            {
                int i;
                for( i = 0; i < argv.length; i++ )
                {
                    if( argv[i].equals("-syntax"))
                    {
                        parse_only = true;
                        continue;
                    } 
                    if( argv[i].equals("-global_import"))
                    {
                        global_import = true;
                        continue;
                    } 
                    if( argv[i].equals("-noskel"))
                    {
                        generate_skeletons = false;
                        continue;
                    } 
                    if( argv[i].equals("-nostub"))
                    {
                        generate_stubs = false;
                        continue;
                    } 
                    if( argv[i].equals("-sloppy_forward"))
                    {
                        sloppy = true;
                        continue;
                    } 
                    if( argv[i].equals("-sloppy_names"))
                    {
                        strict_names = false;
                        continue;
                    } 
                    if( argv[i].equals("-d")) 
                    {
                        if( i+1 == argv.length || argv[i+1].charAt(0)=='-' )
                            usage(argv, "-d");
                        out_dir = argv[++i];
                        continue;
                    } 
                    if( argv[i].equals("-W")) 
                    {
                        if( i+1 == argv.length || argv[i+1].charAt(0)=='-' )
                            usage(argv, "-W");
                        org.jacorb.idl.Environment.verbosityLevel(Integer.parseInt( argv[++i]));
                        continue;
                    } 
                    if( argv[i].startsWith("-D")) 
                    {
                        String def = argv[i].substring(2);
                        String val;
                        
                        if( def.indexOf('=') > 0 )
                        {
                            val = def.substring( def.indexOf('=') + 1);
                            def = def.substring( 0, def.indexOf('='));
                        }
                        else
                            val = "1";
                        tmpDefines.put( def, val );
                        continue;
                    }
                    if( argv[i].startsWith("-U")) 
                    {
                        tmpUnDefines.put( argv[i].substring(2), "" );
                        continue;
                    } 
                    if( argv[i].equals("-p")) 
                    {
                        if( i+1 == argv.length || argv[i+1].charAt(0)=='-' )
                            usage(argv, "-p");
                        package_prefix = argv[++i];
                        continue;
                    } 
                    if( argv[i].equals("-i2jpackage")) 
                    {
                        if( i+1 == argv.length || argv[i+1].charAt(0)=='-')
                            usage(argv, "-i2jpackage");

                        int split_idx = argv[i+1].indexOf(':');
                        if( split_idx  < 0 )
                            usage(argv, "-i2jpackage");
                        String idlp = argv[i+1].substring(0,split_idx);
                        String jp = argv[i+1].substring(split_idx+1);

                        pack_replace.put( idlp, jp );
                        Environment.output(3,"Replace pack " + idlp + " with " + jp );
                        i++;
                        continue;
                    } 
                    if( argv[i].equals("-ir")) 
                    {  
                        generateIR = true;
                        continue;
                    } 
                    if( argv[i].equals("-i")) 
                    {
                        if( i+1 == argv.length || argv[i+1].charAt(0)=='-' )
                            usage(argv, "-i");
                        import_list.addElement( argv[++i]) ;
                        continue;
                    } 
                    if( argv[i].startsWith("-I")) 
                    {
                        GlobalInputStream.setIncludePath(argv[i].substring(2));
                        continue;
                    }
                    if( argv[i].equals("-h") || argv[i].equals("-help") )
                    {
                        help();
                        System.exit(0);
                    }
                    if( argv[i].equals("-all"))
                    {
                        generateIncluded = true;
                        continue;
                    }
                    if( argv[i].equals("-v") || argv[i].equals("-version"))
                    {
                        version();
                        System.exit(0);
                    }
                    if( argv[i].endsWith(".idl"))
                    {
                        break;
                    }

                    // else:
                    usage(argv, "Unrecognized option");

                }
                for( int j=i; j < argv.length; j++)
                {
                    if( argv[j].endsWith(".idl"))
                    {
                        Environment.output( 4, argv[j] );
                        GlobalInputStream.init();
                        try
                        {               
                            GlobalInputStream.setInput( argv[j] );
                        }       
                        catch (java.io.IOException io )
                        {
                            System.err.println("Could not find file " + argv[j]);
                            parser.help();
                        }
                                /* reset tables everywhere */
                        lexer.reset();
                        NameTable.init();
                        ConstDecl.init();
                        TypeMap.init();

                                /* define/undefine symbols */
                        for( Enumeration e = tmpDefines.keys(); e.hasMoreElements(); )
                        {
                            String key = (String)e.nextElement();
                            lexer.define( key, (String)tmpDefines.get( key ));
                        }
                        for( Enumeration e = tmpUnDefines.keys(); e.hasMoreElements(); )
                        {
                            lexer.undefine( (String)e.nextElement() );
                        }
                        new parser().parse();
                    }
                    else
                    {
                        System.err.println("Not an IDL file:" + argv[j]);
                    }
                }
            }
        }
        catch( org.jacorb.idl.ParseException e )
        {
            return false;
        }
        catch( Exception e )
        {
            System.err.println( "Error: " + e.getMessage());
            org.jacorb.idl.Environment.output( 2, e );
            usage(argv, e.getMessage());
        }
        return true;
    }

    public static void usage(String [] argv, String msg)
    {
        // debug:
        for( int i = 0; i < argv.length; i++)
            System.out.print( argv[i] + " " );
        System.out.println(" : " + msg);

        System.out.println("Usage: idl [-h|-help][-v|-version][-syntax][-all][-Idir][-Dsymbol[=value]][-U <symbol>][-noskel][-nostub][-ir][-sloppy_names] [-i2jpackage x:y][-d <Output Dir>][-p <package_prefix>][-i <import_package][-W debug_level] <filelist>");
        System.exit(1);
    }

    private static void help()
    {     
        System.out.println("\t-syntax\tsyntax check only, no code generation, implies -no_ir");
//ystem.out.println("\t-no_ir\tdo not generate information for the Interface Repository");
        System.out.println("\t-noskel\tdisables generation of POA skeletons");
        System.out.println("\t-nostub\tdisables generation of client stubs");
        System.out.println("\t-Idir\tset include path for idl files");
        System.out.println("\t-sloppy_forward\tallow forward declarations wo. later definitions");
        System.out.println("\t-sloppy_names\tless strict checking of names for backward compatibility");
        System.out.println("\t-Dx\tdefine preprocessor symbol x with value 1");
        System.out.println("\t-Dx=y\tdefine preprocessor symbol x with value y");
        System.out.println("\t-U\tundefine preprocessor symbol");
        System.out.println("\t-p pack\tapply pack as prefix to all names in generated Java code");
        System.out.println("\t\t\tand put code into package <pack>");
        System.out.println("\t-i2jpackage x:a.b.c\t replace IDL package name x by a.b.c in generated Java code (e.g. CORBA:org.omg.CORBA)");
        System.out.println("\t-i <x>\tgenerated Java code will include \"import <x>;\"");
        System.out.println("\t-ir <x>\tgenerate information required by the Interface Repository");
        System.out.println("\t-global_import \tgenerated Java code will include import statements for all global types");
        System.out.println("\t-d dir\troot of directory tree for output");
        System.out.println("\t-W [1..4]\tdebug level");
        System.out.println("\t-all generate code for all IDL files, even included ones");
        System.out.println("\t-v|version \tprint version information");
        System.out.println("\t-h|help \tthese few lines of help");
        System.out.println("\t<filelist>\t");
  }

    private static void version()
    {
        System.out.println("JacORB IDL compiler V" + compiler_version + ",\n   (C) Gerald Brose, FU Berlin, " + yearString + ".");
    }

    /* override error routines */

    public void report_fatal_error( String message, Object info)
        throws ParseException
    {
       done_parsing();
       lexer.emit_error(message);
       System.err.println("Can't recover from previous error(s), giving up.");
       throw new ParseException();
       // System.exit(1);
    }

    public static void fatal_error(String message, str_token p_info)
        throws ParseException
    {
       //done_parsing();
       lexer.emit_error(message, p_info);
       System.err.println("Can't recover from previous error(s), giving up.");
       throw new ParseException();
       // System.exit(1);
    }

    public void report_error(String message, Object info)
    {
       lexer.emit_error(message);
    }

    public static void error(String message, str_token p_info)
    {
       lexer.emit_error(message, p_info);
    }

    public static void error( String message )
    {
       lexer.emit_error( message );
    }

        /* bookkeeping with IDL scopes */

        /** called from the lexer/scanner whenever a scope opening
            symbol is encountered */

        public static void openScope()
        {
            scopes.push(new ScopeData());
        }

        /** called from within the parser whenever parsing a scope 
            symbol is complete */

        public static void closeScope(Scope symbol)
        {
                ScopeData data = (ScopeData) scopes.pop();
                symbol.setScopeData( data );
        }

        public static ScopeData currentScopeData()
        {
                return (ScopeData)scopes.peek();
        }


        // an interface inheriting from an forward declared interface
        // needs to wait on an object until the ancestor has been parsed
        // if get_pending returns null, the ancestor was not forward 
        // declared and thus has already been parsed

        // forward declared interfaces are put into this list

      public static java.util.Hashtable pending_interfaces = new java.util.Hashtable();

      public static synchronized void set_pending( String name )
      {
           // name will only be marked pending if it has not already been
           // parsed before and if is not already pending

           if( ! ( pending_interfaces.containsKey(name) ||
                   NameTable.parsed_interfaces.containsKey(name)) )
           {
                   pending_interfaces.put(name, new Object());
           }
      }

       public static synchronized void remove_pending( String name )
       {
            Object o = pending_interfaces.remove(name);
            if( o != null) 
            {
                synchronized( o )
                { 
                     o.notifyAll();
                }
            }
            if( pending_interfaces.size() == 0 )
            {
                // notify the main thread that the parsing phase is complete
                synchronized( pending_interfaces )
                {
                     pending_interfaces.notifyAll();
                }
            }
       }

      public static Object get_pending( String name )
      {
          return pending_interfaces.get(name);
      }

      public static synchronized void decActiveParseThreads()
      {
          Environment.output(3,"decActiveParseThreads");
          activeParseThreads--;
      }

      public static synchronized void incActiveParseThreads()
      {
          Environment.output(3,"incActiveParseThreads");
          activeParseThreads++;
      }

      public static synchronized int activeParseThreads()
      {
          Environment.output(3,"activeParseThreads returns "+activeParseThreads );
          return activeParseThreads;
      }

        public static boolean generateIncluded()
        {
                return generateIncluded;
        }


    public static boolean getInhibitionState()
    {
        return inhibitionState;
    }

    public static void setInhibitionState(boolean flag)
    {
        inhibitionState = flag;
    }

    public static void set_included( boolean i )
    {
        include_state = i;
    }

    public static boolean hasImports()
    {
        return import_list.size() > 0 ;
    }

    static void addGlobalNamesToImport()
    {
        for( Enumeration e = NameTable.getGlobalTypes(); 
                e.hasMoreElements(); )
        {
                String s = (String) e.nextElement();
                import_list.addElement( s );
                Environment.output(4,"Adding import for global name " + s );
        }       
    }


    /** 
     * Package replacements as requested
     * by compiler options
     */

    public static String pack_replace(String old)
    {
//        for( Enumeration e = pack_replace.keys(); e.hasMoreElements();)
//        {
//              String key = (String)e.nextElement();
//
//              Environment.output(4,"Comparing name " + old + " with key " + key );
//
//              if( old.startsWith( key ))
//              {
//                  String result = (String)pack_replace.get( key ) + 
//                                   old.substring( key.length() + 1 );
//                  return result;
//              }
//        }
//        return old;

        String n_str = (String)pack_replace.get(old);
        if( n_str == null )
            return old;
        else
            return n_str;
    }


};

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {




  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* object for return from actions */
      java_cup.runtime.symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // empty ::= 
            {
              CUP$result = new java_cup.runtime.symbol(/*empty*/4);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // param_type_spec ::= scopename 
            {
              CUP$result = new TypeSpec(/*param_type_spec*/43);
               ((TypeSpec)CUP$result).type_spec = (/*s*/(ScopedName)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // param_type_spec ::= string_type 
            {
              CUP$result = new TypeSpec(/*param_type_spec*/43);
               ((TypeSpec)CUP$result).type_spec = (/*s*/(StringType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // param_type_spec ::= base_type_spec 
            {
              CUP$result = new TypeSpec(/*param_type_spec*/43);
               ((TypeSpec)CUP$result).type_spec = (/*s*/(BaseType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // string_literal_list ::= string_literal COMMA string_literal_list 
            {
              CUP$result = new java_cup.runtime.symbol(/*string_literal_list*/3);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // string_literal_list ::= string_literal 
            {
              CUP$result = new java_cup.runtime.symbol(/*string_literal_list*/3);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // context_expr ::= empty 
            {
              CUP$result = new java_cup.runtime.symbol(/*context_expr*/2);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // context_expr ::= CONTEXT LPAREN string_literal_list RPAREN 
            {
              CUP$result = new java_cup.runtime.symbol(/*context_expr*/2);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // raises_expr ::= empty 
            {
              CUP$result = new RaisesExpr(/*raises_expr*/83);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // raises_expr ::= RAISES LPAREN scopename_list RPAREN 
            {
              CUP$result = new RaisesExpr(/*raises_expr*/83);
               
                ((RaisesExpr)CUP$result).nameList = (Vector)(/*snl*/(SymbolList)CUP$stack.elementAt(CUP$top-1)).v.clone(); 
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // param_attribute ::= INOUT 
            {
              CUP$result = new java_cup.runtime.int_token(/*param_attribute*/6);
               ((java_cup.runtime.int_token)CUP$result).int_val = 3; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // param_attribute ::= OUT 
            {
              CUP$result = new java_cup.runtime.int_token(/*param_attribute*/6);
               ((java_cup.runtime.int_token)CUP$result).int_val = 2; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // param_attribute ::= IN 
            {
              CUP$result = new java_cup.runtime.int_token(/*param_attribute*/6);
               ((java_cup.runtime.int_token)CUP$result).int_val = 1; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // param_dcl ::= param_attribute param_type_spec simple_declarator 
            {
              CUP$result = new ParamDecl(/*param_dcl*/82);
               
                ((ParamDecl)CUP$result).paramAttribute = (/*pa*/(java_cup.runtime.int_token)CUP$stack.elementAt(CUP$top-2)).int_val;
                ((ParamDecl)CUP$result).paramTypeSpec = (/*pts*/(TypeSpec)CUP$stack.elementAt(CUP$top-1));
                ((ParamDecl)CUP$result).simple_declarator = (/*sd*/(SimpleDeclarator)CUP$stack.elementAt(CUP$top-0));
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // param_dcls ::= param_dcl 
            {
              CUP$result = new SymbolList(/*param_dcls*/88);
               
                        ((SymbolList)CUP$result).v.insertElementAt((/*pd*/(ParamDecl)CUP$stack.elementAt(CUP$top-0)),0); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // param_dcls ::= param_dcl COMMA param_dcls 
            {
              CUP$result = new SymbolList(/*param_dcls*/88);
               
                        ((SymbolList)CUP$result).v = (Vector)(/*pds*/(SymbolList)CUP$stack.elementAt(CUP$top-0)).v.clone(); 
                        ((SymbolList)CUP$result).v.insertElementAt((/*pd*/(ParamDecl)CUP$stack.elementAt(CUP$top-2)),0); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // parameter_dcls ::= LPAREN RPAREN 
            {
              CUP$result = new SymbolList(/*parameter_dcls*/89);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // parameter_dcls ::= LPAREN param_dcls RPAREN 
            {
              CUP$result = new SymbolList(/*parameter_dcls*/89);
               
                        ((SymbolList)CUP$result).v = (Vector)(/*pds*/(SymbolList)CUP$stack.elementAt(CUP$top-1)).v.clone(); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // void_type_spec ::= VOID 
            {
              CUP$result = new VoidTypeSpec(/*void_type_spec*/70);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // op_type_spec ::= void_type_spec 
            {
              CUP$result = new TypeSpec(/*op_type_spec*/42);
               ((TypeSpec)CUP$result).type_spec = (/*s*/(VoidTypeSpec)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // op_type_spec ::= param_type_spec 
            {
              CUP$result = new TypeSpec(/*op_type_spec*/42);
               ((TypeSpec)CUP$result).type_spec = (/*s*/(TypeSpec)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // op_attribute ::= empty 
            {
              CUP$result = new java_cup.runtime.int_token(/*op_attribute*/5);
               ((java_cup.runtime.int_token)CUP$result).int_val = 0; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // op_attribute ::= ONEWAY 
            {
              CUP$result = new java_cup.runtime.int_token(/*op_attribute*/5);
               ((java_cup.runtime.int_token)CUP$result).int_val = 1; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // op_dcl ::= op_attribute op_type_spec ID parameter_dcls raises_expr context_expr 
            {
              CUP$result = new OpDecl(/*op_dcl*/84);
               
                        ((OpDecl)CUP$result).opAttribute = (/*oa*/(java_cup.runtime.int_token)CUP$stack.elementAt(CUP$top-5)).int_val;
                        ((OpDecl)CUP$result).opTypeSpec = (/*ots*/(TypeSpec)CUP$stack.elementAt(CUP$top-4));
                        ((OpDecl)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-3)));    
                        ((OpDecl)CUP$result).paramDecls = (Vector)(/*pds*/(SymbolList)CUP$stack.elementAt(CUP$top-2)).v.clone();
                        ((OpDecl)CUP$result).raisesExpr = (/*re*/(RaisesExpr)CUP$stack.elementAt(CUP$top-1));
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // except_dcl ::= EXCEPTION ID LCBRACE member_list RCBRACE 
            {
              CUP$result = new StructType(/*except_dcl*/51);
               
                        ((StructType)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-3)));    
                        ((StructType)CUP$result).exc = true;
                        ((StructType)CUP$result).set_memberlist( (/*ml*/(MemberList)CUP$stack.elementAt(CUP$top-1)) );
                        ((StructType)CUP$result).set_included( parser.include_state );
                        parser.closeScope( (Scope)((StructType)CUP$result) );
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // except_dcl ::= EXCEPTION ID LCBRACE RCBRACE 
            {
              CUP$result = new StructType(/*except_dcl*/51);
               
                        ((StructType)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-2)));    
                        ((StructType)CUP$result).exc = true;
                        ((StructType)CUP$result).set_included( parser.include_state );
                        parser.closeScope( (Scope)((StructType)CUP$result) );
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // simple_declarator_list ::= simple_declarator COMMA simple_declarator_list 
            {
              CUP$result = new SymbolList(/*simple_declarator_list*/91);
               
                        ((SymbolList)CUP$result).v = (Vector)(/*sdl*/(SymbolList)CUP$stack.elementAt(CUP$top-0)).v.clone();
                        ((SymbolList)CUP$result).v.insertElementAt((/*sd*/(SimpleDeclarator)CUP$stack.elementAt(CUP$top-2)),0); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // simple_declarator_list ::= simple_declarator 
            {
              CUP$result = new SymbolList(/*simple_declarator_list*/91);
               
                        ((SymbolList)CUP$result).v.insertElementAt((/*sd*/(SimpleDeclarator)CUP$stack.elementAt(CUP$top-0)),0); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // attr_dcl ::= ATTRIBUTE param_type_spec simple_declarator_list 
            {
              CUP$result = new AttrDecl(/*attr_dcl*/85);
              
                        ((AttrDecl)CUP$result).readOnly = false;
                        ((AttrDecl)CUP$result).param_type_spec = (/*pts*/(TypeSpec)CUP$stack.elementAt(CUP$top-1));
                        ((AttrDecl)CUP$result).declarators = (/*sdl*/(SymbolList)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // attr_dcl ::= READONLY ATTRIBUTE param_type_spec simple_declarator_list 
            {
              CUP$result = new AttrDecl(/*attr_dcl*/85);
              
                        ((AttrDecl)CUP$result).readOnly = true;
                        ((AttrDecl)CUP$result).param_type_spec = (/*pts*/(TypeSpec)CUP$stack.elementAt(CUP$top-1));
                        ((AttrDecl)CUP$result).declarators = (/*sdl*/(SymbolList)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // fixed_array_size ::= LSBRACE positive_int_const RSBRACE 
            {
              CUP$result = new FixedArraySize(/*fixed_array_size*/81);
               
                        ((FixedArraySize)CUP$result).pos_int_const = (/*pic*/(PosIntConst)CUP$stack.elementAt(CUP$top-1));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // fixed_array_size_list ::= fixed_array_size fixed_array_size_list 
            {
              CUP$result = new SymbolList(/*fixed_array_size_list*/95);
               
                        ((SymbolList)CUP$result).v = (Vector)(/*fasl*/(SymbolList)CUP$stack.elementAt(CUP$top-0)).v.clone();
                        ((SymbolList)CUP$result).v.insertElementAt((/*fas*/(FixedArraySize)CUP$stack.elementAt(CUP$top-1)),0); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // fixed_array_size_list ::= fixed_array_size 
            {
              CUP$result = new SymbolList(/*fixed_array_size_list*/95);
               
                        ((SymbolList)CUP$result).v.insertElementAt((/*fas*/(FixedArraySize)CUP$stack.elementAt(CUP$top-0)),0); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // array_declarator ::= ID fixed_array_size_list 
            {
              CUP$result = new ArrayDeclarator(/*array_declarator*/80);
               
                        ((ArrayDeclarator)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-1)));    
                        ((ArrayDeclarator)CUP$result).fixed_array_size_list = (/*fasl*/(SymbolList)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // fixed_point_type ::= FIXED LESSTHAN positive_int_const COMMA positive_int_const GREATERTHAN 
            {
              CUP$result = new FixedPointType(/*fixed_point_type*/73);
               
                ((FixedPointType)CUP$result).digit_expr = (/*digits*/(PosIntConst)CUP$stack.elementAt(CUP$top-3)).const_expr;
                ((FixedPointType)CUP$result).scale_expr = (/*scale*/(PosIntConst)CUP$stack.elementAt(CUP$top-1)).const_expr;
         
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // string_type ::= WSTRING 
            {
              CUP$result = new StringType(/*string_type*/71);
               ((StringType)CUP$result).setWide(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // string_type ::= STRING 
            {
              CUP$result = new StringType(/*string_type*/71);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // string_type ::= WSTRING LESSTHAN positive_int_const GREATERTHAN 
            {
              CUP$result = new StringType(/*string_type*/71);
               
                ((StringType)CUP$result).max = (/*pic*/(PosIntConst)CUP$stack.elementAt(CUP$top-1)).const_expr; 
                ((StringType)CUP$result).setWide();
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // string_type ::= STRING LESSTHAN positive_int_const GREATERTHAN 
            {
              CUP$result = new StringType(/*string_type*/71);
               ((StringType)CUP$result).max = (/*pic*/(PosIntConst)CUP$stack.elementAt(CUP$top-1)).const_expr; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // sequence_type ::= SEQUENCE LESSTHAN simple_type_spec GREATERTHAN 
            {
              CUP$result = new SequenceType(/*sequence_type*/72);
              
                        ((SequenceType)CUP$result).setTypeSpec( (/*sts*/(SimpleTypeSpec)CUP$stack.elementAt(CUP$top-1)) );
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // sequence_type ::= SEQUENCE LESSTHAN simple_type_spec COMMA positive_int_const GREATERTHAN 
            {
              CUP$result = new SequenceType(/*sequence_type*/72);
              
                        ((SequenceType)CUP$result).max = (/*pic*/(PosIntConst)CUP$stack.elementAt(CUP$top-1)).const_expr;
                        ((SequenceType)CUP$result).setTypeSpec( (/*sts*/(SimpleTypeSpec)CUP$stack.elementAt(CUP$top-3)) );
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // native_type ::= NATIVE simple_declarator 
            {
              CUP$result = new NativeType(/*native_type*/53);
              
                        ((NativeType)CUP$result).declarator = (/*sd*/(SimpleDeclarator)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // enumerator_list ::= ID COMMA enumerator_list 
            {
              CUP$result = new SymbolList(/*enumerator_list*/94);
               
                        ((SymbolList)CUP$result).v = (Vector)(/*el*/(SymbolList)CUP$stack.elementAt(CUP$top-0)).v.clone();
                        ((SymbolList)CUP$result).v.insertElementAt((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-2)).str_val,0); 
                        ((SymbolList)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-2)));    
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // enumerator_list ::= ID 
            {
              CUP$result = new SymbolList(/*enumerator_list*/94);
               
                        ((SymbolList)CUP$result).v.insertElementAt((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)).str_val,0); 
                        ((SymbolList)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)));    
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // enum_type ::= ENUM ID LCBRACE enumerator_list RCBRACE 
            {
              CUP$result = new EnumType(/*enum_type*/49);
               
                        ((EnumType)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-3)));    
                        ((EnumType)CUP$result).enumlist = (/*el*/(SymbolList)CUP$stack.elementAt(CUP$top-1));
                        ((EnumType)CUP$result).set_included( parser.include_state );
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // element_spec ::= type_spec declarator 
            {
              CUP$result = new ElementSpec(/*element_spec*/56);
              
                        ((ElementSpec)CUP$result).t.type_spec = (/*ts*/(TypeSpec)CUP$stack.elementAt(CUP$top-1));
                        ((ElementSpec)CUP$result).d = (/*dc*/(Declarator)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // case_label_list ::= DEFAULT COLON case_label_list 
            {
              CUP$result = new SymbolList(/*case_label_list*/87);
              
                        ((SymbolList)CUP$result).v = (Vector)(/*cll*/(SymbolList)CUP$stack.elementAt(CUP$top-0)).v.clone();
                        ((SymbolList)CUP$result).v.addElement(null);
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // case_label_list ::= CASE const_expr COLON case_label_list 
            {
              CUP$result = new SymbolList(/*case_label_list*/87);
              
                        ((SymbolList)CUP$result).v = (Vector)(/*cll*/(SymbolList)CUP$stack.elementAt(CUP$top-0)).v.clone();
                        ((SymbolList)CUP$result).v.addElement((/*c*/(ConstExpr)CUP$stack.elementAt(CUP$top-2)));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // case_label_list ::= DEFAULT COLON 
            {
              CUP$result = new SymbolList(/*case_label_list*/87);
               ((SymbolList)CUP$result).v.addElement( null ); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // case_label_list ::= CASE const_expr COLON 
            {
              CUP$result = new SymbolList(/*case_label_list*/87);
               ((SymbolList)CUP$result).v.addElement((/*c*/(ConstExpr)CUP$stack.elementAt(CUP$top-1))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // case ::= case_label_list element_spec SEMI 
            {
              CUP$result = new Case(/*case*/55);
              
                        ((Case)CUP$result).element_spec = (/*es*/(ElementSpec)CUP$stack.elementAt(CUP$top-1));
                        ((Case)CUP$result).case_label_list = (/*c*/(SymbolList)CUP$stack.elementAt(CUP$top-2));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // switch_body ::= case switch_body 
            {
              CUP$result = new SwitchBody(/*switch_body*/54);
              
                ((SwitchBody)CUP$result).caseListVector = (Vector)(/*sb*/(SwitchBody)CUP$stack.elementAt(CUP$top-0)).caseListVector.clone();
                ((SwitchBody)CUP$result).caseListVector.addElement( (/*c*/(Case)CUP$stack.elementAt(CUP$top-1)) );
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // switch_body ::= case 
            {
              CUP$result = new SwitchBody(/*switch_body*/54);
              
                ((SwitchBody)CUP$result).caseListVector.addElement((/*c*/(Case)CUP$stack.elementAt(CUP$top-0)));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // switch_type_spec ::= scopename 
            {
              CUP$result = new TypeSpec(/*switch_type_spec*/44);
               ((TypeSpec)CUP$result).type_spec = (/*s*/(ScopedName)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // switch_type_spec ::= enum_type 
            {
              CUP$result = new TypeSpec(/*switch_type_spec*/44);
               ((TypeSpec)CUP$result).set_constr((/*e*/(EnumType)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // switch_type_spec ::= bool_type 
            {
              CUP$result = new TypeSpec(/*switch_type_spec*/44);
               ((TypeSpec)CUP$result).type_spec = (/*b*/(BooleanType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // switch_type_spec ::= char_type 
            {
              CUP$result = new TypeSpec(/*switch_type_spec*/44);
               ((TypeSpec)CUP$result).type_spec = (/*c*/(CharType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // switch_type_spec ::= int_type 
            {
              CUP$result = new TypeSpec(/*switch_type_spec*/44);
               ((TypeSpec)CUP$result).type_spec = (/*i*/(IntType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // union_type ::= UNION ID SWITCH LPAREN switch_type_spec RPAREN LCBRACE switch_body RCBRACE 
            {
              CUP$result = new UnionType(/*union_type*/52);
               
                        ((UnionType)CUP$result).setSwitchType( (/*s*/(TypeSpec)CUP$stack.elementAt(CUP$top-4)) ); 
                        ((UnionType)CUP$result).setSwitchBody( (/*sb*/(SwitchBody)CUP$stack.elementAt(CUP$top-1)) ); 
                        ((UnionType)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-7)));
                        ((UnionType)CUP$result).set_included( parser.include_state );
                        parser.closeScope( (Scope)((UnionType)CUP$result) );
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // member ::= type_spec declarators SEMI 
            {
              CUP$result = new Member(/*member*/77);
               
                        ((Member)CUP$result).type_spec = (/*ts*/(TypeSpec)CUP$stack.elementAt(CUP$top-2));
                        ((Member)CUP$result).declarators = (/*ds*/(SymbolList)CUP$stack.elementAt(CUP$top-1));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // member_list ::= member member_list 
            {
              CUP$result = new MemberList(/*member_list*/86);
               
                        ((MemberList)CUP$result).v = (Vector)(/*ml*/(MemberList)CUP$stack.elementAt(CUP$top-0)).v.clone();
                        ((MemberList)CUP$result).v.insertElementAt((/*m*/(Member)CUP$stack.elementAt(CUP$top-1)),0); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // member_list ::= member 
            {
              CUP$result = new MemberList(/*member_list*/86);
               
                        ((MemberList)CUP$result).v.insertElementAt((/*m*/(Member)CUP$stack.elementAt(CUP$top-0)),0); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // struct_type ::= STRUCT ID LCBRACE member_list RCBRACE 
            {
              CUP$result = new StructType(/*struct_type*/50);
               
                        ((StructType)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-3)));    
                        ((StructType)CUP$result).exc = false;
                        ((StructType)CUP$result).set_memberlist( (/*ml*/(MemberList)CUP$stack.elementAt(CUP$top-1)) );
                        ((StructType)CUP$result).set_included( parser.include_state );
                        parser.closeScope( (Scope)((StructType)CUP$result) );
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // any_type ::= ANY 
            {
              CUP$result = new AnyType(/*any_type*/69);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // octet_type ::= OCTET 
            {
              CUP$result = new OctetType(/*octet_type*/68);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // bool_type ::= BOOLEAN 
            {
              CUP$result = new BooleanType(/*bool_type*/67);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // char_type ::= WCHAR 
            {
              CUP$result = new CharType(/*char_type*/66);
               ((CharType)CUP$result).setWide(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // char_type ::= CHAR 
            {
              CUP$result = new CharType(/*char_type*/66);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // long_long_type ::= LONG LONG 
            {
              CUP$result = new LongLongType(/*long_long_type*/65);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // long_type ::= LONG 
            {
              CUP$result = new LongType(/*long_type*/64);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // short_type ::= SHORT 
            {
              CUP$result = new ShortType(/*short_type*/63);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // int_type ::= UNSIGNED short_type 
            {
              CUP$result = new IntType(/*int_type*/58);
               
                        ((IntType)CUP$result).type_spec = (/*s*/(ShortType)CUP$stack.elementAt(CUP$top-0)); 
                        ((IntType)CUP$result).setUnsigned();
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // int_type ::= short_type 
            {
              CUP$result = new IntType(/*int_type*/58);
               
                        ((IntType)CUP$result).type_spec = (/*s*/(ShortType)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // int_type ::= UNSIGNED long_long_type 
            {
              CUP$result = new IntType(/*int_type*/58);
               
                        ((IntType)CUP$result).type_spec = (/*l*/(LongLongType)CUP$stack.elementAt(CUP$top-0)); 
                        ((IntType)CUP$result).setUnsigned();
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // int_type ::= UNSIGNED long_type 
            {
              CUP$result = new IntType(/*int_type*/58);
               
                        ((IntType)CUP$result).type_spec = (/*l*/(LongType)CUP$stack.elementAt(CUP$top-0)); 
                        ((IntType)CUP$result).setUnsigned();
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // int_type ::= long_long_type 
            {
              CUP$result = new IntType(/*int_type*/58);
               
                        ((IntType)CUP$result).type_spec = (/*ll*/(LongLongType)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // int_type ::= long_type 
            {
              CUP$result = new IntType(/*int_type*/58);
               
                        ((IntType)CUP$result).type_spec = (/*l*/(LongType)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // double_type ::= DOUBLE 
            {
              CUP$result = new DoubleType(/*double_type*/62);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // fixed_pt_const_type ::= FIXED 
            {
              CUP$result = new FixedPointConstType(/*fixed_pt_const_type*/61);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // float_type ::= FLOAT 
            {
              CUP$result = new FloatType(/*float_type*/60);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // float_pt_type ::= double_type 
            {
              CUP$result = new FloatPtType(/*float_pt_type*/59);
              ((FloatPtType)CUP$result).type_spec = (/*d*/(DoubleType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // float_pt_type ::= float_type 
            {
              CUP$result = new FloatPtType(/*float_pt_type*/59);
              ((FloatPtType)CUP$result).type_spec = (/*f*/(FloatType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // simple_declarator ::= ID 
            {
              CUP$result = new SimpleDeclarator(/*simple_declarator*/79);
               
                        ((SimpleDeclarator)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)));    
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // declarator ::= array_declarator 
            {
              CUP$result = new Declarator(/*declarator*/78);
               ((Declarator)CUP$result).d = (/*s*/(ArrayDeclarator)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // declarator ::= simple_declarator 
            {
              CUP$result = new Declarator(/*declarator*/78);
               ((Declarator)CUP$result).d = (/*s*/(SimpleDeclarator)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // declarators ::= declarator 
            {
              CUP$result = new SymbolList(/*declarators*/92);
               
                        ((SymbolList)CUP$result).v.insertElementAt((/*d*/(Declarator)CUP$stack.elementAt(CUP$top-0)),0);
                 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declarators ::= declarator COMMA declarators 
            {
              CUP$result = new SymbolList(/*declarators*/92);
               
                        ((SymbolList)CUP$result).v = (Vector)(/*ds*/(SymbolList)CUP$stack.elementAt(CUP$top-0)).v.clone();
                        ((SymbolList)CUP$result).v.insertElementAt((/*d*/(Declarator)CUP$stack.elementAt(CUP$top-2)),0); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // constr_type_spec ::= enum_type 
            {
              CUP$result = new ConstrTypeSpec(/*constr_type_spec*/48);
               
                        ((ConstrTypeSpec)CUP$result).c_type_spec = (/*e*/(EnumType)CUP$stack.elementAt(CUP$top-0)); 
                        ((ConstrTypeSpec)CUP$result).set_token((/*e*/(EnumType)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // constr_type_spec ::= union_type 
            {
              CUP$result = new ConstrTypeSpec(/*constr_type_spec*/48);
               
                        ((ConstrTypeSpec)CUP$result).c_type_spec = (/*u*/(UnionType)CUP$stack.elementAt(CUP$top-0)); 
                        ((ConstrTypeSpec)CUP$result).set_token((/*u*/(UnionType)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // constr_type_spec ::= struct_type 
            {
              CUP$result = new ConstrTypeSpec(/*constr_type_spec*/48);
               
                        ((ConstrTypeSpec)CUP$result).c_type_spec = (/*s*/(StructType)CUP$stack.elementAt(CUP$top-0)); 
                        ((ConstrTypeSpec)CUP$result).set_token((/*s*/(StructType)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // template_type_spec ::= fixed_point_type 
            {
              CUP$result = new TemplateTypeSpec(/*template_type_spec*/47);
               
                        ((TemplateTypeSpec)CUP$result).type_spec = (/*f*/(FixedPointType)CUP$stack.elementAt(CUP$top-0)); 
                        ((TemplateTypeSpec)CUP$result).set_token((/*f*/(FixedPointType)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // template_type_spec ::= string_type 
            {
              CUP$result = new TemplateTypeSpec(/*template_type_spec*/47);
               
                        ((TemplateTypeSpec)CUP$result).type_spec = (/*s*/(StringType)CUP$stack.elementAt(CUP$top-0)); 
                        ((TemplateTypeSpec)CUP$result).set_token((/*s*/(StringType)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // template_type_spec ::= sequence_type 
            {
              CUP$result = new TemplateTypeSpec(/*template_type_spec*/47);
               
                        ((TemplateTypeSpec)CUP$result).type_spec = (/*s*/(SequenceType)CUP$stack.elementAt(CUP$top-0)); 
                        ((TemplateTypeSpec)CUP$result).set_token((/*s*/(SequenceType)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // base_type_spec ::= VALUEBASE 
            {
              CUP$result = new BaseType(/*base_type_spec*/57);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // base_type_spec ::= any_type 
            {
              CUP$result = new BaseType(/*base_type_spec*/57);
               ((BaseType)CUP$result).type_spec = (/*s*/(AnyType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // base_type_spec ::= octet_type 
            {
              CUP$result = new BaseType(/*base_type_spec*/57);
               ((BaseType)CUP$result).type_spec = (/*s*/(OctetType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // base_type_spec ::= bool_type 
            {
              CUP$result = new BaseType(/*base_type_spec*/57);
               ((BaseType)CUP$result).type_spec = (/*s*/(BooleanType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // base_type_spec ::= char_type 
            {
              CUP$result = new BaseType(/*base_type_spec*/57);
               ((BaseType)CUP$result).type_spec = (/*s*/(CharType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // base_type_spec ::= int_type 
            {
              CUP$result = new BaseType(/*base_type_spec*/57);
               
                        ((BaseType)CUP$result).type_spec = (/*s*/(IntType)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // base_type_spec ::= float_pt_type 
            {
              CUP$result = new BaseType(/*base_type_spec*/57);
               ((BaseType)CUP$result).type_spec = (/*s*/(FloatPtType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // simple_type_spec ::= scopename 
            {
              CUP$result = new SimpleTypeSpec(/*simple_type_spec*/46);
               
                        ((SimpleTypeSpec)CUP$result).type_spec = (/*s*/(ScopedName)CUP$stack.elementAt(CUP$top-0)); 
                        ((SimpleTypeSpec)CUP$result).set_token((/*s*/(ScopedName)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // simple_type_spec ::= template_type_spec 
            {
              CUP$result = new SimpleTypeSpec(/*simple_type_spec*/46);
               
                        ((SimpleTypeSpec)CUP$result).type_spec = (/*s*/(TemplateTypeSpec)CUP$stack.elementAt(CUP$top-0)); 
                        ((SimpleTypeSpec)CUP$result).set_token((/*s*/(TemplateTypeSpec)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // simple_type_spec ::= base_type_spec 
            {
              CUP$result = new SimpleTypeSpec(/*simple_type_spec*/46);
               
                        ((SimpleTypeSpec)CUP$result).type_spec = (/*s*/(BaseType)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type_spec ::= constr_type_spec 
            {
              CUP$result = new TypeSpec(/*type_spec*/41);
               
                        ((TypeSpec)CUP$result).type_spec = (/*s*/(ConstrTypeSpec)CUP$stack.elementAt(CUP$top-0)); 
                        ((TypeSpec)CUP$result).set_token((/*s*/(ConstrTypeSpec)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type_spec ::= simple_type_spec 
            {
              CUP$result = new TypeSpec(/*type_spec*/41);
               
                        ((TypeSpec)CUP$result).type_spec = (/*s*/(SimpleTypeSpec)CUP$stack.elementAt(CUP$top-0)); 
                        ((TypeSpec)CUP$result).set_token((/*s*/(SimpleTypeSpec)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // type_declarator ::= type_spec declarators 
            {
              CUP$result = new TypeDeclarator(/*type_declarator*/40);
              
                        ((TypeDeclarator)CUP$result).type_spec = (/*ts*/(TypeSpec)CUP$stack.elementAt(CUP$top-1));
                        ((TypeDeclarator)CUP$result).declarators = (/*ds*/(SymbolList)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // type_def ::= TYPEDEF type_declarator 
            {
              CUP$result = new TypeDef(/*type_def*/45);
               
                ((TypeDef)CUP$result).type_declarator = (/*t*/(TypeDeclarator)CUP$stack.elementAt(CUP$top-0)); 
                ((TypeDef)CUP$result).set_included( parser.include_state );
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // type_dcl ::= native_type 
            {
              CUP$result = new TypeDeclaration(/*type_dcl*/39);
               ((TypeDeclaration)CUP$result).type_decl = (/*n*/(NativeType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // type_dcl ::= enum_type 
            {
              CUP$result = new TypeDeclaration(/*type_dcl*/39);
               ((TypeDeclaration)CUP$result).type_decl = (/*e*/(EnumType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type_dcl ::= union_type 
            {
              CUP$result = new TypeDeclaration(/*type_dcl*/39);
               ((TypeDeclaration)CUP$result).type_decl = (/*u*/(UnionType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type_dcl ::= struct_type 
            {
              CUP$result = new TypeDeclaration(/*type_dcl*/39);
               ((TypeDeclaration)CUP$result).type_decl = (/*s*/(StructType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type_dcl ::= type_def 
            {
              CUP$result = new TypeDeclaration(/*type_dcl*/39);
               ((TypeDeclaration)CUP$result).type_decl = (/*t*/(TypeDef)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // positive_int_const ::= const_expr 
            {
              CUP$result = new PosIntConst(/*positive_int_const*/30);
               ((PosIntConst)CUP$result).const_expr = (/*c*/(ConstExpr)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // string_literal ::= LDBLQUOTE DBLQUOTE 
            {
              CUP$result = new Literal(/*string_literal*/75);
               
                        ((Literal)CUP$result).string = "\"\"";
                        ((Literal)CUP$result).wide = true;
                  
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // string_literal ::= LDBLQUOTE ID DBLQUOTE 
            {
              CUP$result = new Literal(/*string_literal*/75);
               
                        ((Literal)CUP$result).string = "\"" + (/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-1)).str_val + "\"";
                        ((Literal)CUP$result).wide = true;
                  
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // string_literal ::= DBLQUOTE DBLQUOTE 
            {
              CUP$result = new Literal(/*string_literal*/75);
               ((Literal)CUP$result).string = "\"\""; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // string_literal ::= DBLQUOTE ID DBLQUOTE 
            {
              CUP$result = new Literal(/*string_literal*/75);
               ((Literal)CUP$result).string = "\"" + (/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-1)).str_val + "\""; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // literal ::= FALSE 
            {
              CUP$result = new Literal(/*literal*/74);
               
                        ((Literal)CUP$result).string = "false"; 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // literal ::= TRUE 
            {
              CUP$result = new Literal(/*literal*/74);
               
                        ((Literal)CUP$result).string = "true"; 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literal ::= FLOAT_NUMBER 
            {
              CUP$result = new Literal(/*literal*/74);
               
                        ((Literal)CUP$result).string = "" + (/*n*/(java_cup.runtime.float_token)CUP$stack.elementAt(CUP$top-0)).float_val ; 
                        ((Literal)CUP$result).token = (/*n*/(java_cup.runtime.float_token)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal ::= FIXED_NUMBER 
            {
              CUP$result = new Literal(/*literal*/74);
               
                        ((Literal)CUP$result).string = "" + (/*f*/(fixed_token)CUP$stack.elementAt(CUP$top-0)).fixed_val; 
                        ((Literal)CUP$result).token = (/*f*/(fixed_token)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal ::= string_literal 
            {
              CUP$result = new Literal(/*literal*/74);
               
                        ((Literal)CUP$result).string = (/*s*/(Literal)CUP$stack.elementAt(CUP$top-0)).string;                 
                        ((Literal)CUP$result).wide = (/*s*/(Literal)CUP$stack.elementAt(CUP$top-0)).wide; 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literal ::= QUOTE CH QUOTE 
            {
              CUP$result = new Literal(/*literal*/74);
              
                        ((Literal)CUP$result).string = "\'" + (/*c*/(java_cup.runtime.char_token)CUP$stack.elementAt(CUP$top-1)).char_val + "\'"; 
                        ((Literal)CUP$result).token = (/*c*/(java_cup.runtime.char_token)CUP$stack.elementAt(CUP$top-1));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal ::= LONG_NUMBER 
            {
              CUP$result = new Literal(/*literal*/74);
              
                        ((Literal)CUP$result).string = "" + (/*l*/(java_cup.runtime.long_token)CUP$stack.elementAt(CUP$top-0)).long_val;
                        ((Literal)CUP$result).token = (/*l*/(java_cup.runtime.long_token)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // literal ::= NUMBER 
            {
              CUP$result = new Literal(/*literal*/74);
               
                        ((Literal)CUP$result).string = "" + (/*n*/(java_cup.runtime.int_token)CUP$stack.elementAt(CUP$top-0)).int_val; 
                        ((Literal)CUP$result).token = (/*n*/(java_cup.runtime.int_token)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // primary_expr ::= LPAREN const_expr RPAREN 
            {
              CUP$result = new PrimaryExpr(/*primary_expr*/38);
               ((PrimaryExpr)CUP$result).symbol = (/*c*/(ConstExpr)CUP$stack.elementAt(CUP$top-1)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // primary_expr ::= literal 
            {
              CUP$result = new PrimaryExpr(/*primary_expr*/38);
               ((PrimaryExpr)CUP$result).symbol = (/*l*/(Literal)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // primary_expr ::= scopename 
            {
              CUP$result = new PrimaryExpr(/*primary_expr*/38);
               ((PrimaryExpr)CUP$result).symbol = (/*s*/(ScopedName)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unary_op ::= TILDE 
            {
              CUP$result = new java_cup.runtime.str_token(/*unary_op*/8);
               ((java_cup.runtime.str_token)CUP$result).str_val = "~"; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unary_op ::= PLUS 
            {
              CUP$result = new java_cup.runtime.str_token(/*unary_op*/8);
               ((java_cup.runtime.str_token)CUP$result).str_val = "+"; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unary_op ::= MINUS 
            {
              CUP$result = new java_cup.runtime.str_token(/*unary_op*/8);
               ((java_cup.runtime.str_token)CUP$result).str_val = "-"; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // unary_expr ::= primary_expr 
            {
              CUP$result = new UnaryExpr(/*unary_expr*/37);
               ((UnaryExpr)CUP$result).primary_expr = (/*p*/(PrimaryExpr)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unary_expr ::= unary_op primary_expr 
            {
              CUP$result = new UnaryExpr(/*unary_expr*/37);
              
                        ((UnaryExpr)CUP$result).primary_expr = (/*p*/(PrimaryExpr)CUP$stack.elementAt(CUP$top-0));
                        ((UnaryExpr)CUP$result).unary_op = (/*u*/(java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top-1)).str_val;
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // mult_expr ::= mult_expr PERCENT unary_expr 
            {
              CUP$result = new MultExpr(/*mult_expr*/36);
              
                        ((MultExpr)CUP$result).unary_expr = (/*u*/(UnaryExpr)CUP$stack.elementAt(CUP$top-0)); 
                        ((MultExpr)CUP$result).mult_expr = (/*m*/(MultExpr)CUP$stack.elementAt(CUP$top-2));
                        ((MultExpr)CUP$result).operator = "%";
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // mult_expr ::= mult_expr SLASH unary_expr 
            {
              CUP$result = new MultExpr(/*mult_expr*/36);
              
                        ((MultExpr)CUP$result).unary_expr = (/*u*/(UnaryExpr)CUP$stack.elementAt(CUP$top-0)); 
                        ((MultExpr)CUP$result).mult_expr = (/*m*/(MultExpr)CUP$stack.elementAt(CUP$top-2));
                        ((MultExpr)CUP$result).operator = "/";
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // mult_expr ::= mult_expr STAR unary_expr 
            {
              CUP$result = new MultExpr(/*mult_expr*/36);
              
                        ((MultExpr)CUP$result).unary_expr = (/*u*/(UnaryExpr)CUP$stack.elementAt(CUP$top-0)); 
                        ((MultExpr)CUP$result).mult_expr = (/*m*/(MultExpr)CUP$stack.elementAt(CUP$top-2));
                        ((MultExpr)CUP$result).operator = "*";
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // mult_expr ::= unary_expr 
            {
              CUP$result = new MultExpr(/*mult_expr*/36);
               ((MultExpr)CUP$result).unary_expr = (/*u*/(UnaryExpr)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // add_expr ::= add_expr MINUS mult_expr 
            {
              CUP$result = new AddExpr(/*add_expr*/35);
              
                        ((AddExpr)CUP$result).add_expr = (/*a*/(AddExpr)CUP$stack.elementAt(CUP$top-2)); 
                        ((AddExpr)CUP$result).mult_expr = (/*m*/(MultExpr)CUP$stack.elementAt(CUP$top-0));
                        ((AddExpr)CUP$result).operator = "-";
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // add_expr ::= add_expr PLUS mult_expr 
            {
              CUP$result = new AddExpr(/*add_expr*/35);
              
                        ((AddExpr)CUP$result).add_expr = (/*a*/(AddExpr)CUP$stack.elementAt(CUP$top-2)); 
                        ((AddExpr)CUP$result).mult_expr = (/*m*/(MultExpr)CUP$stack.elementAt(CUP$top-0));
                        ((AddExpr)CUP$result).operator = "+";
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // add_expr ::= mult_expr 
            {
              CUP$result = new AddExpr(/*add_expr*/35);
              
                        ((AddExpr)CUP$result).mult_expr = (/*m*/(MultExpr)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // shift_expr ::= shift_expr RSHIFT add_expr 
            {
              CUP$result = new ShiftExpr(/*shift_expr*/34);
              
                        ((ShiftExpr)CUP$result).add_expr = (/*a*/(AddExpr)CUP$stack.elementAt(CUP$top-0)); 
                        ((ShiftExpr)CUP$result).shift_expr = (/*s*/(ShiftExpr)CUP$stack.elementAt(CUP$top-2));
                        ((ShiftExpr)CUP$result).operator = ">>";
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // shift_expr ::= shift_expr LSHIFT add_expr 
            {
              CUP$result = new ShiftExpr(/*shift_expr*/34);
              
                        ((ShiftExpr)CUP$result).add_expr = (/*a*/(AddExpr)CUP$stack.elementAt(CUP$top-0)); 
                        ((ShiftExpr)CUP$result).shift_expr = (/*s*/(ShiftExpr)CUP$stack.elementAt(CUP$top-2));
                        ((ShiftExpr)CUP$result).operator = "<<";
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // shift_expr ::= add_expr 
            {
              CUP$result = new ShiftExpr(/*shift_expr*/34);
               
                        ((ShiftExpr)CUP$result).add_expr = (/*a*/(AddExpr)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // and_expr ::= and_expr AMPERSAND shift_expr 
            {
              CUP$result = new AndExpr(/*and_expr*/33);
              
                        ((AndExpr)CUP$result).and_expr = (/*a*/(AndExpr)CUP$stack.elementAt(CUP$top-2)); 
                        ((AndExpr)CUP$result).shift_expr = (/*s*/(ShiftExpr)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // and_expr ::= shift_expr 
            {
              CUP$result = new AndExpr(/*and_expr*/33);
               
                        ((AndExpr)CUP$result).shift_expr = (/*s*/(ShiftExpr)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // xor_expr ::= xor_expr CIRCUM and_expr 
            {
              CUP$result = new XorExpr(/*xor_expr*/32);
              
                        ((XorExpr)CUP$result).and_expr = (/*a*/(AndExpr)CUP$stack.elementAt(CUP$top-0)); 
                        ((XorExpr)CUP$result).xor_expr = (/*x*/(XorExpr)CUP$stack.elementAt(CUP$top-2));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // xor_expr ::= and_expr 
            {
              CUP$result = new XorExpr(/*xor_expr*/32);
               
                        ((XorExpr)CUP$result).and_expr = (/*a*/(AndExpr)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // or_expr ::= or_expr BAR xor_expr 
            {
              CUP$result = new OrExpr(/*or_expr*/31);
              
                        ((OrExpr)CUP$result).or_expr = (/*o*/(OrExpr)CUP$stack.elementAt(CUP$top-2)); 
                        ((OrExpr)CUP$result).xor_expr = (/*x*/(XorExpr)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // or_expr ::= xor_expr 
            {
              CUP$result = new OrExpr(/*or_expr*/31);
               
                        ((OrExpr)CUP$result).xor_expr = (/*x*/(XorExpr)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // const_expr ::= or_expr 
            {
              CUP$result = new ConstExpr(/*const_expr*/29);
               
                        ((ConstExpr)CUP$result).or_expr = (/*o*/(OrExpr)CUP$stack.elementAt(CUP$top-0)); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // const_type ::= scopename 
            {
              CUP$result = new ConstType(/*const_type*/28);
               
                        ((ConstType)CUP$result).symbol = (/*s*/(ScopedName)CUP$stack.elementAt(CUP$top-0)); 
                        ((ConstType)CUP$result).set_token((/*s*/(ScopedName)CUP$stack.elementAt(CUP$top-0)).get_token());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // const_type ::= octet_type 
            {
              CUP$result = new ConstType(/*const_type*/28);
               ((ConstType)CUP$result).symbol = (/*s*/(OctetType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // const_type ::= string_type 
            {
              CUP$result = new ConstType(/*const_type*/28);
               ((ConstType)CUP$result).symbol = (/*s*/(StringType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // const_type ::= fixed_pt_const_type 
            {
              CUP$result = new ConstType(/*const_type*/28);
               ((ConstType)CUP$result).symbol = (/*s*/(FixedPointConstType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // const_type ::= float_pt_type 
            {
              CUP$result = new ConstType(/*const_type*/28);
               ((ConstType)CUP$result).symbol = (/*s*/(FloatPtType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // const_type ::= bool_type 
            {
              CUP$result = new ConstType(/*const_type*/28);
               ((ConstType)CUP$result).symbol = (/*s*/(BooleanType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // const_type ::= char_type 
            {
              CUP$result = new ConstType(/*const_type*/28);
               ((ConstType)CUP$result).symbol = (/*s*/(CharType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // const_type ::= int_type 
            {
              CUP$result = new ConstType(/*const_type*/28);
               ((ConstType)CUP$result).symbol = (/*s*/(IntType)CUP$stack.elementAt(CUP$top-0)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // const_dcl ::= CONST const_type ID EQUALS const_expr 
            {
              CUP$result = new ConstDecl(/*const_dcl*/27);
              
                        ((ConstDecl)CUP$result).set_name((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-2)).str_val);
                        ((ConstDecl)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-2)));    
                        ((ConstDecl)CUP$result).const_expr = (/*ce*/(ConstExpr)CUP$stack.elementAt(CUP$top-0));
                        ((ConstDecl)CUP$result).const_type = (ConstType)(/*ct*/(ConstType)CUP$stack.elementAt(CUP$top-3));
                        ((ConstDecl)CUP$result).set_included( parser.include_state );
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // init_param_decl ::= IN param_type_spec simple_declarator 
            {
              CUP$result = new IdlSymbol(/*init_param_decl*/26);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // init_param_decls ::= init_param_decl COMMA init_param_decls 
            {
              CUP$result = new IdlSymbol(/*init_param_decls*/25);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // init_param_decls ::= init_param_decl 
            {
              CUP$result = new IdlSymbol(/*init_param_decls*/25);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // state_member ::= PRIVATE type_spec declarators SEMI 
            {
              CUP$result = new StateMember(/*state_member*/24);
              
                           ((StateMember)CUP$result).isPublic    = false;
                           ((StateMember)CUP$result).type_spec   = (/*ts*/(TypeSpec)CUP$stack.elementAt(CUP$top-2));
                           ((StateMember)CUP$result).declarators = (/*ds*/(SymbolList)CUP$stack.elementAt(CUP$top-1));
                  
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // state_member ::= PUBLIC type_spec declarators SEMI 
            {
              CUP$result = new StateMember(/*state_member*/24);
              
                           ((StateMember)CUP$result).isPublic    = true;
                           ((StateMember)CUP$result).type_spec   = (/*ts*/(TypeSpec)CUP$stack.elementAt(CUP$top-2));
                           ((StateMember)CUP$result).declarators = (/*ds*/(SymbolList)CUP$stack.elementAt(CUP$top-1));
                  
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value_element ::= FACTORY ID LPAREN RPAREN SEMI 
            {
              CUP$result = new Definition(/*value_element*/23);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value_element ::= FACTORY ID LPAREN init_param_decls RPAREN SEMI 
            {
              CUP$result = new Definition(/*value_element*/23);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value_element ::= state_member 
            {
              CUP$result = new Definition(/*value_element*/23);
              
                        ((Definition)CUP$result).set_declaration ((/*sm*/(StateMember)CUP$stack.elementAt(CUP$top-0)));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value_element ::= export 
            {
              CUP$result = new Definition(/*value_element*/23);
              
                        ((Definition)CUP$result).set_declaration ((/*e*/(Definition)CUP$stack.elementAt(CUP$top-0)).get_declaration());
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value_elements ::= empty 
            {
              CUP$result = new Definitions(/*value_elements*/22);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value_elements ::= value_element value_elements 
            {
              CUP$result = new Definitions(/*value_elements*/22);
              
                        ((Definitions)CUP$result).v = (Vector)(/*es*/(Definitions)CUP$stack.elementAt(CUP$top-0)).v.clone();
                        ((Definitions)CUP$result).v.insertElementAt((/*e*/(Definition)CUP$stack.elementAt(CUP$top-1)),0);
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // truncatable ::= empty 
            {
              CUP$result = new java_cup.runtime.int_token(/*truncatable*/7);
               
                ((java_cup.runtime.int_token)CUP$result).int_val = 0; 
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // truncatable ::= TRUNCATABLE 
            {
              CUP$result = new java_cup.runtime.int_token(/*truncatable*/7);
               
                ((java_cup.runtime.int_token)CUP$result).int_val = 1; 
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value_inheritance_spec ::= empty 
            {
              CUP$result = new IdlSymbol(/*value_inheritance_spec*/21);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value_inheritance_spec ::= COLON truncatable scopename_list SUPPORTS scopename_list 
            {
              CUP$result = new IdlSymbol(/*value_inheritance_spec*/21);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value_inheritance_spec ::= SUPPORTS scopename_list 
            {
              CUP$result = new IdlSymbol(/*value_inheritance_spec*/21);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value_inheritance_spec ::= COLON truncatable scopename_list 
            {
              CUP$result = new IdlSymbol(/*value_inheritance_spec*/21);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value_dcl ::= VALUETYPE ID value_inheritance_spec LCBRACE value_elements RCBRACE 
            {
              CUP$result = new ValueDecl(/*value_dcl*/19);
              
                        ((ValueDecl)CUP$result).set_token ((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4)));
                        // ((ValueDecl)CUP$result).setInheritanceSpec ((/*is*/(IdlSymbol)CUP$stack.elementAt(CUP$top-3)));
                        ((ValueDecl)CUP$result).setValueElements ((/*ve*/(Definitions)CUP$stack.elementAt(CUP$top-1)));
                        ((ValueDecl)CUP$result).isCustomMarshalled (false);
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value_dcl ::= CUSTOM VALUETYPE ID value_inheritance_spec LCBRACE value_elements RCBRACE 
            {
              CUP$result = new ValueDecl(/*value_dcl*/19);
              
                        ((ValueDecl)CUP$result).set_token ((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4)));
                        // ((ValueDecl)CUP$result).setInheritanceSpec ((/*is*/(IdlSymbol)CUP$stack.elementAt(CUP$top-3)));
                        ((ValueDecl)CUP$result).setValueElements ((/*ve*/(Definitions)CUP$stack.elementAt(CUP$top-1)));
                        ((ValueDecl)CUP$result).isCustomMarshalled (true);
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value_body ::= export 
            {
              CUP$result = new IdlSymbol(/*value_body*/20);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value_body ::= export value_body 
            {
              CUP$result = new IdlSymbol(/*value_body*/20);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value_box_dcl ::= VALUETYPE ID type_spec 
            {
              CUP$result = new ValueBoxDecl(/*value_box_dcl*/18);
               
                        ((ValueBoxDecl)CUP$result).name = (/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-1)).str_val;
                        ((ValueBoxDecl)CUP$result).typeSpec = (/*ts*/(TypeSpec)CUP$stack.elementAt(CUP$top-0));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= VALUETYPE ID 
            {
              CUP$result = new Value(/*value*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value ::= ABSTRACT VALUETYPE ID 
            {
              CUP$result = new Value(/*value*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= value_box_dcl 
            {
              CUP$result = new Value(/*value*/17);
               
                        ((Value)CUP$result).setValue ((/*vbx*/(ValueBoxDecl)CUP$stack.elementAt(CUP$top-0)));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= value_dcl 
            {
              CUP$result = new Value(/*value*/17);
               
                        ((Value)CUP$result).setValue ((/*vd*/(ValueDecl)CUP$stack.elementAt(CUP$top-0)));
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // scopename ::= OBJECT 
            {
              CUP$result = new ScopedName(/*scopename*/16);
               
                        ((ScopedName)CUP$result).typeName = "org.omg.CORBA.Object";
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // scopename ::= scopename DBLCOLON ID 
            {
              CUP$result = new ScopedName(/*scopename*/16);
               
                        ((ScopedName)CUP$result).setId( (/*sn*/(ScopedName)CUP$stack.elementAt(CUP$top-2)).typeName+ "." + (/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)).str_val );
                        ((ScopedName)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)));
                 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // scopename ::= DBLCOLON ID 
            {
              CUP$result = new ScopedName(/*scopename*/16);
               
                        ((ScopedName)CUP$result).setId( "." + (/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
                        ((ScopedName)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)));    
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // scopename ::= ID 
            {
              CUP$result = new ScopedName(/*scopename*/16);
               
                        ((ScopedName)CUP$result).setId( (/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)).str_val );
                        ((ScopedName)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)));    
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // scopename_list ::= scopename 
            {
              CUP$result = new SymbolList(/*scopename_list*/90);
               ((SymbolList)CUP$result).v.insertElementAt((/*sn*/(ScopedName)CUP$stack.elementAt(CUP$top-0)),0); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // scopename_list ::= scopename COMMA scopename_list 
            {
              CUP$result = new SymbolList(/*scopename_list*/90);
               
                ((SymbolList)CUP$result).v = (Vector)(/*snl*/(SymbolList)CUP$stack.elementAt(CUP$top-0)).v.clone(); 
                ((SymbolList)CUP$result).v.insertElementAt((/*sn*/(ScopedName)CUP$stack.elementAt(CUP$top-2)),0); 
            
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inheritance_spec ::= empty 
            {
              CUP$result = new SymbolList(/*inheritance_spec*/93);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inheritance_spec ::= COLON scopename_list 
            {
              CUP$result = new SymbolList(/*inheritance_spec*/93);
               ((SymbolList)CUP$result).v = (Vector)(/*sl*/(SymbolList)CUP$stack.elementAt(CUP$top-0)).v.clone(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // export ::= op_dcl SEMI 
            {
              CUP$result = new Definition(/*export*/15);
               ((Definition)CUP$result).set_declaration((/*o*/(OpDecl)CUP$stack.elementAt(CUP$top-1))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // export ::= attr_dcl SEMI 
            {
              CUP$result = new Definition(/*export*/15);
               ((Definition)CUP$result).set_declaration((/*a*/(AttrDecl)CUP$stack.elementAt(CUP$top-1))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // export ::= except_dcl SEMI 
            {
              CUP$result = new Definition(/*export*/15);
               ((Definition)CUP$result).set_declaration((/*e*/(StructType)CUP$stack.elementAt(CUP$top-1))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // export ::= const_dcl SEMI 
            {
              CUP$result = new Definition(/*export*/15);
               ((Definition)CUP$result).set_declaration((/*c*/(ConstDecl)CUP$stack.elementAt(CUP$top-1))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // export ::= type_dcl SEMI 
            {
              CUP$result = new Definition(/*export*/15);
               ((Definition)CUP$result).set_declaration((/*t*/(TypeDeclaration)CUP$stack.elementAt(CUP$top-1))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // interface_body ::= empty 
            {
              CUP$result = new InterfaceBody(/*interface_body*/14);
               ((InterfaceBody)CUP$result).commit(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // interface_body ::= export interface_body 
            {
              CUP$result = new InterfaceBody(/*interface_body*/14);
               
                        ((InterfaceBody)CUP$result).v = (Vector)(/*i*/(InterfaceBody)CUP$stack.elementAt(CUP$top-0)).v.clone();
                        ((InterfaceBody)CUP$result).v.insertElementAt((/*e*/(Definition)CUP$stack.elementAt(CUP$top-1)),0);
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // interface ::= PSEUDO INTERFACE ID 
            {
              CUP$result = new Interface(/*interface*/13);
              
                ((Interface)CUP$result).set_pseudo();
                ((Interface)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)));    
                // ((Interface)CUP$result).set_locality( parser.getLocalityContraint());
                parser.closeScope( (Scope)((Interface)CUP$result) );
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // interface ::= LOCAL INTERFACE ID 
            {
              CUP$result = new Interface(/*interface*/13);
              
                ((Interface)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)));    
                ((Interface)CUP$result).set_abstract();
                ((Interface)CUP$result).set_locality( true );
                parser.closeScope( (Scope)((Interface)CUP$result) );
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // interface ::= ABSTRACT INTERFACE ID 
            {
              CUP$result = new Interface(/*interface*/13);
              
                ((Interface)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)));    
                ((Interface)CUP$result).set_abstract();
                // ((Interface)CUP$result).set_locality( parser.getLocalityContraint());
                parser.closeScope( (Scope)((Interface)CUP$result) );
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // interface ::= INTERFACE ID 
            {
              CUP$result = new Interface(/*interface*/13);
              
                ((Interface)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-0)));    
                // ((Interface)CUP$result).set_locality( parser.getLocalityContraint());
                parser.closeScope( (Scope)((Interface)CUP$result) );
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // interface ::= PSEUDO INTERFACE ID inheritance_spec LCBRACE interface_body RCBRACE 
            {
              CUP$result = new Interface(/*interface*/13);
               
                ((Interface)CUP$result).set_pseudo();
                ((Interface)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4)));
                ((Interface)CUP$result).inheritanceSpec = (/*is*/(SymbolList)CUP$stack.elementAt(CUP$top-3));
                ((Interface)CUP$result).body = (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)); 
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).set_pseudo();
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).set_name((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4)).str_val);
//              (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4))); 
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).my_interface = ((Interface)CUP$result);
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).setEnclosingSymbol(((Interface)CUP$result));
                ((Interface)CUP$result).set_included( parser.include_state );
                // ((Interface)CUP$result).set_locality( parser.getLocalityContraint());
                parser.closeScope( (Scope)((Interface)CUP$result) );
         
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // interface ::= LOCAL INTERFACE ID inheritance_spec LCBRACE interface_body RCBRACE 
            {
              CUP$result = new Interface(/*interface*/13);
               
                ((Interface)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4)));
                ((Interface)CUP$result).inheritanceSpec = (/*is*/(SymbolList)CUP$stack.elementAt(CUP$top-3));
                ((Interface)CUP$result).body = (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)) ;
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).set_name((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4)).str_val);
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).my_interface = ((Interface)CUP$result);
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).setEnclosingSymbol(((Interface)CUP$result));
                ((Interface)CUP$result).set_included( parser.include_state );
                ((Interface)CUP$result).set_locality( true );
                parser.closeScope( (Scope)((Interface)CUP$result) );
         
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // interface ::= ABSTRACT INTERFACE ID inheritance_spec LCBRACE interface_body RCBRACE 
            {
              CUP$result = new Interface(/*interface*/13);
               
                ((Interface)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4)));
                ((Interface)CUP$result).set_abstract();
                ((Interface)CUP$result).inheritanceSpec = (/*is*/(SymbolList)CUP$stack.elementAt(CUP$top-3));
                ((Interface)CUP$result).body = (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)) ;
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).set_name((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4)).str_val);
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).my_interface = ((Interface)CUP$result);
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).setEnclosingSymbol(((Interface)CUP$result));
                ((Interface)CUP$result).set_included( parser.include_state );
                // ((Interface)CUP$result).set_locality( parser.getLocalityContraint());
                parser.closeScope( (Scope)((Interface)CUP$result) );
         
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // interface ::= INTERFACE ID inheritance_spec LCBRACE interface_body RCBRACE 
            {
              CUP$result = new Interface(/*interface*/13);
               
                ((Interface)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4)));
                ((Interface)CUP$result).inheritanceSpec = (/*is*/(SymbolList)CUP$stack.elementAt(CUP$top-3));
                ((Interface)CUP$result).body = (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)) ;
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).set_name((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-4)).str_val);
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).my_interface = ((Interface)CUP$result);
                (/*b*/(InterfaceBody)CUP$stack.elementAt(CUP$top-1)).setEnclosingSymbol(((Interface)CUP$result));
                ((Interface)CUP$result).set_included( parser.include_state );
                // ((Interface)CUP$result).set_locality( parser.getLocalityContraint());
                parser.closeScope( (Scope)((Interface)CUP$result) );
         
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // module ::= MODULE ID LCBRACE definitions RCBRACE 
            {
              CUP$result = new Module(/*module*/12);
               
                ((Module)CUP$result).spec = (/*d*/(Definitions)CUP$stack.elementAt(CUP$top-1));
                ((Module)CUP$result).set_token((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-3)));
                ((Module)CUP$result).setPackage((/*i*/(org.jacorb.idl.str_token)CUP$stack.elementAt(CUP$top-3)).str_val );
                ((Module)CUP$result).set_included( parser.include_state );

                (/*d*/(Definitions)CUP$stack.elementAt(CUP$top-1)).setEnclosingSymbol(((Module)CUP$result));
                parser.closeScope( (Scope)((Module)CUP$result) );
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definition ::= value SEMI 
            {
              CUP$result = new Definition(/*definition*/10);
               
                        ((Definition)CUP$result).set_declaration((/*m*/(Value)CUP$stack.elementAt(CUP$top-1)));
                 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definition ::= module SEMI 
            {
              CUP$result = new Definition(/*definition*/10);
               
                        ((Definition)CUP$result).set_declaration((/*m*/(Module)CUP$stack.elementAt(CUP$top-1)));
                 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definition ::= interface SEMI 
            {
              CUP$result = new Definition(/*definition*/10);
               
                        ((Definition)CUP$result).set_declaration((/*p*/(Interface)CUP$stack.elementAt(CUP$top-1))); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= except_dcl SEMI 
            {
              CUP$result = new Definition(/*definition*/10);
               
                        ((Definition)CUP$result).set_declaration((/*e*/(StructType)CUP$stack.elementAt(CUP$top-1))); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= const_dcl SEMI 
            {
              CUP$result = new Definition(/*definition*/10);
               
                        ((Definition)CUP$result).set_declaration((/*c*/(ConstDecl)CUP$stack.elementAt(CUP$top-1))); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= type_dcl SEMI 
            {
              CUP$result = new Definition(/*definition*/10);
               
                        ((Definition)CUP$result).set_declaration((/*t*/(TypeDeclaration)CUP$stack.elementAt(CUP$top-1))); 
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // definitions ::= definition 
            {
              CUP$result = new Definitions(/*definitions*/11);
              
                        ((Definitions)CUP$result).v.insertElementAt((/*d*/(Definition)CUP$stack.elementAt(CUP$top-0)),0);
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // definitions ::= definition definitions 
            {
              CUP$result = new Definitions(/*definitions*/11);
              
                        ((Definitions)CUP$result).v = (Vector)(/*ds*/(Definitions)CUP$stack.elementAt(CUP$top-0)).v.clone();
                        ((Definitions)CUP$result).v.insertElementAt((/*d*/(Definition)CUP$stack.elementAt(CUP$top-1)),0);
                
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // specification ::= empty 
            {
              CUP$result = new Spec(/*specification*/9);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // specification ::= NT$0 definitions 
            {
              CUP$result = new Spec(/*specification*/9);
              
                /* parsing */

                // open the global scope
                parser.openScope();

                ((Spec)CUP$result).definitions = (Vector)(/*ds*/(Definitions)CUP$stack.elementAt(CUP$top-0)).v.clone();

                if( ((org.jacorb.idl.parser)CUP$parser).package_prefix != null )
                        ((Spec)CUP$result).setPackage( ((org.jacorb.idl.parser)CUP$parser).package_prefix );

                ((Spec)CUP$result).parse();

                if ( lexer.error_count != 0 )
                {
                        System.err.println(lexer.error_count + " error(s).");
                        System.exit(1);
                }

                // if there are still interfaces to be parsed, wait until the
                // threads performing this have finished. The last one 
                // will call notify() :) 

                if( parser.pending_interfaces.size() > 0  )
                {                  
                   // give other threads a chance to start and signal
                   // that they're active
                   Thread.yield();
                      
                   boolean runnableFound = false;

                   // still no one seems to be active, but we'll call 
                   // round to be sure
                   if( parser.activeParseThreads() == 0 )
                   {
                        Environment.output(3,"Check for runnable threads");

                        for( int t = 0;
                             t < InterfaceBody.parseThreads.size() && !runnableFound; 
                             t++ )
                        {
                            runnableFound = 
                                ((InterfaceBody.ParseThread)InterfaceBody.parseThreads.elementAt(t)).isRunnable();
                        }
                   }

                   // only block waiting if we know that there are active or
                   // runnable threads and that there are still pending tasks

                   if( ( parser.activeParseThreads() > 1 || runnableFound ) && 
                         parser.pending_interfaces.size() > 0 )
                   {
                       synchronized( parser.pending_interfaces )
                       {
                           Environment.output(3,"Wait for pending_interfaces");
                           parser.pending_interfaces.wait();
                           Environment.output(3,"Waking up after wait for pending_interfaces");
                       }
                   } 
                }
 
                if( parser.pending_interfaces.size() > 0 && 
                    !parser.sloppy )
                {
                    parser.fatal_error("Undefined interface: " + 
                        (String)(parser.pending_interfaces.keys().nextElement()), null );
                }

                /* complete global import list */
                if( parser.global_import )
                {
                        Environment.output(3,"Preparing global import");
                        parser.addGlobalNamesToImport();
                }
                else
                        Environment.output(3,"No global import");

                parser.done_parsing = true;

                /* code generation phase */

                try
                {

                   if (! ((org.jacorb.idl.parser)CUP$parser).parse_only  )
                   {
                        ((Spec)CUP$result).print(new java.io.PrintWriter( java.lang.System.out ));
                   }
                } 
                catch ( Exception e )
                {
                     Environment.output(1,e);
                }
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$0*/96);
              
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= specification EOF 
            {
              CUP$result = new java_cup.runtime.token(/*$START*/0);
              
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
};

