<?xml version="1.0"?>

<!DOCTYPE project [
  <!ENTITY common SYSTEM "file:../../../../common.xml"> 
]>

<project name="notification" default="notification.all" basedir="../../../..">

<!-- ============================================================= -->
<!--              JacORB - NotificationService build file          -->
<!-- $Id: build.xml,v 1.4 2003-06-05 13:04:09 alphonse.bendt Exp $ -->
<!-- ============================================================= -->

  &common;

  <property name="notification.dir"
    value="${basedir}/src/org/jacorb/notification" />

  <!-- load user specified properties -->
  <property file="${notification.dir}/notification_build.properties" />


  <!-- ================= -->
  <!-- check environment -->
  <!-- ================= -->
  <target name="check-antlr" unless="antlr.home">
    <fail>
      Property "antlr.home" is not set. 
      Please use the file "notification_build.properties" in the
      directory ${notification.dir} to set this property. The
      property must point to the directory which contains the file
      antlr.jar and the directory antlr.

      antlr is available at http://www.antlr.org
    </fail>
  </target>      

  <target name="check-util.concurrent" unless="concurrent.home">
    <fail>
      Property "concurrent.home" is not set.
      Please use the file "notification_build.properties" in the
      directory ${notification.dir} to set this property. The
      property must point to the directory which contains the compiled
      classes of util.concurrent.

      util.concurrent is available at 
      http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html
    </fail>
  </target>

  <!-- check wether to use java.util.regexp or gnu.regexp -->
  <target name="check-regexp">

    <available classname="java.util.regex.Pattern"
      property="available.regexp.jdk" />
    
    <available classname="gnu.regexp.RE"
      property="available.regexp.gnu" 
      classpath="${gnu.regexp.jar}" />
    
    <condition property="regexp.available">
      <or>
	<isset property="available.regexp.jdk" />
	<isset property="available.regexp.gnu" />
      </or>
    </condition>

    <fail unless="regexp.available" >
      A Patternmatcher is necessary to build and use this NotificationService.
      Use JDK 1.4 or install gnu.regexp and make it available in
      the Classpath.

      gnu.regexp is available at http://www.cacas.org/java/gnu/regexp/
    </fail>

  </target>


  <target name="check-environment">
    <antcall target="check-util.concurrent" />
    <antcall target="check-antlr" />
    <antcall target="check-regexp" />
  </target>

  <!-- ===== -->  
  <target name="pre_init" >

    <!-- taken from common.xml        -->
    <!-- set custom classpath here    -->
    <!-- before common.init is called -->
    <property name="architecture" value="unix"/>
    <condition property="architecture" value="windows">
       <or>
          <os family="windows"/>
          <os family="dos"/>
       </or>
    </condition>

    <path id="notification.classpath" >
      <pathelement location="${basedir}/classes" />
      <pathelement location="${sun.boot.class.path}"/>
      <pathelement location="${antlr.home}/" />
      <pathelement location="${antlr.home}/antlr.jar" />
      <pathelement location="${concurrent.home}/classes" />
      <pathelement location="${basedir}/lib/logkit.jar" />
      <pathelement location="${gnu.regexp.jar}" />      
    </path>

    <pathconvert 
      property="xbootclasspath" 
      targetos="${architecture}"
      refid="notification.classpath" />

    <property name="debug" value="true" />

  </target>


  <target name="notification.init" depends="pre_init, init, check-environment">

    <!-- directory where the antlr grammar is located -->
    <property name="grammar.dir" value="${notification.dir}/grammar" />

    <!-- package to which the parser classes are generated -->
    <property name="antlr.target.package" value="org/jacorb/notification/parser" />

    <mkdir dir="${src}/generated/${antlr.target.package}" />

    <antcall target="whats-my-classpath" />

  </target>

  <!-- default target -->
  <target name="notification.all" 
    depends="notification.init, antlr, server" />

  <!-- ====== -->
  <!-- Parser -->
  <!-- ====== -->
  <target name="antlr" depends="antlr.depend, antlr.generate, antlr.compile" />

  <target name="antlr.generate" 
    depends="notification.init, antlr.depend" 
    unless="antlr.generate.notRequired">
    
    <antcall target="antlr.force.generate" />
  </target>

  <!-- check if parser needs to be generated -->
  <target name="antlr.depend" depends="notification.init">
    <uptodate property = "antlr.generate.notRequired"
      targetfile="${src}/generated/${antlr.target.package}/TCLParser.java" >
      <srcfiles dir="${grammar.dir}" includes="**/*.g" />
    </uptodate>
  </target>  
  
  <!-- generate parser -->
  <target name="antlr.force.generate" depends="notification.init" >
    <delete>
      <fileset dir="${src}/generated/${antlr.target.package}" includes="*.java, *.txt" />
    </delete>
    
    <copy file="${grammar.dir}/CommonTokenTypes.txt"
      todir="${src}/generated/${antlr.target.package}" />
    
    <java classname="antlr.Tool"  fork="yes" failonerror="yes" classpathref="notification.classpath">
      <arg line="-o ${src}/generated/${antlr.target.package} ${grammar.dir}/tcl-lexer.g" />
    </java>
    
    <java classname="antlr.Tool" fork="yes" failonerror="yes"
      classpathref="notification.classpath">
      <arg line="-o ${src}/generated/${antlr.target.package} ${grammar.dir}/comp-lexer.g" />
    </java>

    <echo message="The Warnings 'Redefinition of token in tokens {...}: TOKEN' can be ignored" />
    
    <java classname="antlr.Tool" fork="yes" failonerror="yes" classpathref="notification.classpath">
      <arg line="-o ${src}/generated/${antlr.target.package} ${grammar.dir}/tcl.g" />
    </java>    
    
    <!-- didn't like the optional antlr task -->
    <!--     
    <antlr
    outputdirectory="${src}/generated/${antlr.target.package}"
    target="${grammar.dir}/tcl.g" /> 
    -->
  </target>

  <!-- compile generated parser and AST Classes -->
  <target name="antlr.compile" depends="notification.init, notification.idl, antlr.generate">
    <antcall target="jacorb-javac">
      <param name="javac-includes"
	value="org/jacorb/notification/node/*.java, generated/org/jacorb/notification/parser/*.java" />
    </antcall>
  </target> 

  <target name="server" depends="notification.init, server.compile" />

  <target name="server.compile" 
    depends="notification.init, 
             notification.idl, 
             check-regexp,
             notification.compile.regexp.gnu, 
             notification.compile.regexp.jdk" >

    <antcall target="jacorb-javac">

      <param name="javac-includes"
	value="org/jacorb/notification/**/*.java" />

      <param name="javac-excludes"
        value="org/jacorb/notification/util/GNUPatternWrapper.java, 
               org/jacorb/notification/util/JDK14PatternWrapper.java />

    </antcall>
  </target>
  
  <target name="notification.compile.regexp.gnu" if="available.regexp.gnu">
    <echo message="Compiling for gnu.regexp" />
    <antcall target="jacorb-javac" >
      <param name="javac-includes"
      value="org/jacorb/notification/util/PatternWrapper.java, 
                org/jacorb/notification/util/GNUPatternWrapper.java" />
    </antcall>
  </target>

  <target name="notification.compile.regexp.jdk" if="available.regexp.jdk">
    <echo message="Compiling for java.util.regexp" />
    <antcall target="jacorb-javac">
      <param name="javac-includes"
	value="org/jacorb/notification/util/PatternWrapper.java, 
               org/jacorb/notification/util/JDK14PatternWrapper.java"/>
      </antcall>
  </target>

  <target name="notification.idl" 
    depends="notification.init,
             load-taskdef,
             cos_notification.depend,
             cos_notification.compile" />

  <target name="cos_notification.depend" depends="notification.init">
    <condition property="cos_notification.generate.notRequired">
      <and>

	<available classpathref="notification.classpath" 
	  classname="org.omg.CosNotification.StructuredEvent" />
	
	<available classpathref="notification.classpath" 
	  classname="org.omg.CosNotification.Property" />

      </and>
    </condition>
  </target>

  <target name="cos_notification.compile" 
        depends="notification.init, cos_notification.generate" 
         unless="cos_notification.generate.notRequired">

    <antcall target="jacorb-javac">
      <param name="javac-includes"
	value="org/omg/CosEvent*/**.java,org/omg/CosNotif*/**.java" />
    </antcall>

  </target>

  <target name="cos_notification.generate" 
       depends="notification.init"
        unless="cos_notification.generate.notRequired" >
    
    <jacidl generateir="true"
      srcdir="${idl}/omg"
      omgprefix="true"
      destdir="${src}/generated"
      includepath="${idl}/omg"
      includes="CosNotif*.idl, CosEvent*.idl" />

  </target>

  <!-- clean -->
  <target name="clean" depends="notification.init">
    <delete>
      <fileset dir="${src}/generated"
	includes="org/jacorb/notification/**/*.*" />
    </delete>

    <delete>
      <fileset dir="${classdir}"
	includes="org/jacorb/notification/**/*.*" />
    </delete>

  </target>

</project>
