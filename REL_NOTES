gerald.brose@acm.org


                JacORB 1.4 RELEASE NOTES

                      www.jacorb.org
        ________________________________________

 Features

        - free CORBA 2.0 implementation (LGPL license)

        - 100% Java, no native code
        - fully multithreaded, very good performance

        - IDL compiler, complies to rev. 2.3 of the Java language mapping
        - DII, DSI,
        - native IIOP, supports IIOP 1.2 Code sets and IIOP over SSL
        - GIOP 1.2, Bidirectional GIOP
        - POA
        - OBV
        - DynAny
        - Implementation Repository with GUI
        - Interface Repository with GUI
        - Applet support and HTTP tunneling

        - Portable Interceptors (for service context passing)
        - Domain Management

        - Object Service implementations
                - Interoperable Naming Service (with graphical interface)
                - Trading Service (extension of Mark Spruiell's JTrader)
                - Event Service
                - Transaction, collection and concurrency services
                    (by Alex Sinishin and Viacheslav Tararin of DekaSoft
                    Ltd., Ukraine,taras@deka.kp.km.ua)


   H I S T O R Y      O F     C H A N G E S
 -------------------------------------------

1.4.0
=====

   - bug fixes:
         - ORB:
               - Fix for delegate to stop infinite loop of calling from ImR
                 to server and back again if server is down.
               - Fix to TypeCode::equal and TypeCode::equivalent operations
                 for handling recursive TypeCodes.
               - Implementation of Request interface now throws BAD_INV_ORDER
                 exception when appropriate.
               - The work_pending and perform_work operations now throw
                 BAD_INV_ORDER if the ORB has been shutdown.
               - Fix to corbaloc URL parsing to recognize corbaloc:rir URLs
                 with no key string specified.
               - Fix to parsing of IOR resources to allow multiple levels of
                 indirection before an IOR or corbaloc URL is obtained.
         - Portable Interceptors:
               - Fix so that interceptors registered with an ORB initializer
                 are also applied to any objects registered as initial
                 references.
         - IMR:
               - Fix for restarting persistent server with same POA/Impl name.

   - POA:
         - Added an extra byte to object keys that contains a flag to 
           indicate the Lifespan Policy of the POA managing the object.

   - ORB:
         - Implemented the DII threading operations:
               - send_multiple_requests_deferred
               - send_multiple_requests_oneway
               - poll_next_response
               - get_next_response
         - Added the TAG_ORB_TYPE component to IORs to indicate that they are
           generated by JacORB.
         - Added the property 'jacorb.use_imr_endpoint' that when switched off
           will write the server endpoint into the IOR instead of the ImR
           endpoint (defaults to on).
         - Implemented a failover mechanism in the client Delegate whereby
           the Delegate is able to find the ImR if the ImR goes down and comes
           back up at a new address.
         - Added property "jacorb.suppress_no_props_warning" that will
           suppress the warning message when no properties file can be
           found (if set to "on").

   - DynAny:
         - Implemented DynFixed interface.

   - Build:
         - JacORB classes directory no longer needed in CLASSPATH to
           build JacORB.

   - GIOP:
         - Added missing functionality to handle LocateRequests and
           LocateReplies.

   - Appligator:
         - New portable interceptor based implementation. Updates
           to support multiple appligators in different subnets and
           disable appligator use in local subnet. No HTTP tunneling.

   - IMR:
         - Background saving thread implemented.
           New property jacorb.imr.port_number to configure a fixed port.

   - Tools:
         - New 'fixior' utility provided to patch port and host information
           into an IOR.

   - IDL Compiler:
         - Flag '-nofinal' can be used to generate code where the class
           definitions are not final.
         - Forward and multiple declaration of Unions, ValueTypes, Structs
           and Interfaces

1.4 beta 4:
===========

	- bug fixes:
	      - Fixed bug that would lead to a NullPointerException
	        when using corbaloc IORs without the explicit protocol
	        qualifier (i.e. corbaloc::<host>:<port>/<object key>).


        The following just didn't make it into the beta 3 release

        notes:

	- SSL/JSSE
	      - added properties
		      jacorb.security.ssl.server.cipher_suites
		      jacorb.security.ssl.client.cipher_suites
		that allow for setting the enabled cipher suites for
		JSSE

        - SSL/IAIK
             - incompatibility notice: Please note that the IAIK SSL
	       and JCE libraries don't work using the JDK 1.4. This is
	       because the JDK 1.4 only accepts signed cryptography
	       providers, but the IAIK JCE isn't.

	- Corbaloc with SSL

             - added new corbaloc protocol qualifier "ssliop" to allow
	       for using corbaloc IORs together with SSL. Also added
	       properties
	            jacorb.security.ssl.corbaloc_ssliop.supported_options
	            jacorb.security.ssl.corbaloc_ssliop.required_options
	       to be able to configure these SSL connections.


1.4 beta 3:
===========

        - Documentation:
                Additional chapter added covering the dynamic any classes.
                Appendix added describing the various configuration properties.

        - Sockets:
                Support has been added for configurable socket factories.
                An additional factory has been provided that supports the
                use of ports from a configurable range to support firewall
                traversal.

        - Initial References:
                Support has been added for resolving object references from
                JNDI and as resources. This can be done using 'jndi:' or
                'resource:' based URLs. Unrecognised URL types are now passed
                down to the underlying JDK for processing ('https:', 'ftp:'
                etc.). Note that the javax.naming package required for JNDI
                support is not included in the JDK 1.2 and this package must be
                added explicitly to the CLASSPATH.

        - Local Objects:
                The org.jacorb.orb.LocalityConstrainedObject class has
                been superseded by org.omg.CORBA.LocalObject class as
                defined in the CORBA 2.4 IDL to Java mapping specification.
                Locally constrained objects, such as portable interceptors,
                should now extend this class.

         - Portable Interceptors:
               - Adapted to CORBA 2.5 IDL (ForwardRequest exception
                 now doesn't have the permanent flag anymore)

         - SSL/JSSE:
               - Integrated patch to be able to access the peers
                 certificates also using JSSE 1.0.2 with a JDK < 1.4
               - Added property
                 "jacorb.security.ssl.server.cipher_suites" to allow
                 selecting ciphersuites (Sun-JSSE only)

         - ORB:
               - Added support for corbaloc:ssliop style IORs to be
                 able to use corbaloc together with SSL. WARNING: This
                 is not (yet ;-) standardized by the OMG, but
                 agreed-upon by many more (TAO, MICO, ...) open source
                 ORBs. The SSL behaviour defaults to
                 EstablishTrustInTarget, but can also be configured by
                 the properties
                 jacorb.security.ssl.corbaloc_ssliop.supported_options
                 jacorb.security.ssl.corbaloc_ssliop.required_options


        - bug fixes:
                Naming Service:
                        - Fix for handling of name strings containing escaped
                          characters.
                DII:
                        - User exceptions now correctly encapsuled within
                          Request environment.
                IDL Compiler:
                        - Fix for unions with long long discriminator type.
                        - Fix for unions with anonymous arrays.
                        - Fix for interface with operations using wchar or
                          wstring inout parameters.
                        - Fix for typedef'd any holder class.
                        - Fix for long long constant values.
                        - Fix for large fixed constant values.
                        - Fix for constant enum values.
                        - Fix for format checking of fixed point types.
                        - Fix for code generation for local interfaces.
                Any:
                        - Fix for equal operation on aliased types.
                        - Fix for equal operation on wchar type.
                        - Fix for insertion and extraction of basic types when
                          any contains an aliased (from typedef) basic type.
                        - Fix for insert_Object operation to determine the
                          IDL name from the RepositoryId.
                        - Fix for read_value and write_value operations to make
                          them more portable.
                        - Fix for read_value and write_value operations where
                          Any contained wchar type.
                        - Added insert_fixed(BigDecimal) operation to CORBA
                          interface.
                        - Fix to insert_fixed(BigDecimal, TypeCode) operation
                          to check TypeCode parameter.
                ORB:
                        - Fix for IORs not containing zero character padding.
                        - Passing a null to object_to_string now returns the
                          correct string for a null object reference.
                        - Passing a local object to object_to_string now
                          throws a MARSHAL exception.
                        - Current and Principal deprecated. Use of any
                          operations for these types will throw NO_IMPLEMENT.
                        - DII support operations on singleton ORB now correctly
                          throw NO_IMPLEMENT.
                        - The create_operation_list operation is now
                          implemented.
                        - Added helper classes for CORBA system exceptions.
                DynAny:
                        - Operations called on a DynAny that has been
                          destroyed now throw an OBJECT_NOT_EXIST exception.
                        - Enabled creation of DynAnys with TCKind tk_null and
                          tk_void.
                        - Fixed the get_dyn_any/insert_dyn_any operations.
                        - Fixed handling of user exceptions.
                        - Fixed initialization of current position for
                          DynStructs and DynUnions.
                        - Fixed iteration operations for DynUnions.
                        - Fixed implementation of DynUnion operations
                          set_to_no_active_member, set_to_default_member and
                          set_discriminator.
                TypeCode:
                        - Fix for CDRInputStream::read_TypeCode operation to
                          handle recursive and repeated TypeCodes.
                        - Fix for ORBSingleton::create_struct_tc and
                          ORBSingleton::create_union_tc operations to
                          correctly construct recursive TypeCodes.
                        - Fix for TypeCode API to correctly handle recursive
                          TypeCodes.
                        - Fix for CDRInputStream and CDROutputStream to
                          correctly calculate the indirection offset value
                          for recursive and repeated TypeCodes.
                        - The create_native_tc, create_local_interface_tc and
                          create_abstract_interface_tc operations are now
                          implemented.
                        - Added validation of parameters to the
                          create_<type>_tc operations.
                        - Fix for _type() operation in FixedHolder class to
                          correctly determine TypeCodes of fixed point values.

1.4 beta 2:
===========

        - bug fixes
                ImR: used wrong name for property jacorb.implname
                Marshalling:
                        - occasionally, wrong buffer sizes were
                          calculated in CDROutputStream
                        - more bugs fixed for recursive and
                          repeated TypeCode
                IDL Compiler fix to handle escape characters

        - Added build compatibility to the JDK 1.4 and fixed
          compatibility problems with JDK 1.2

        - Portable Interceptors:
                   - Adapted to new IDL which requires interceptors
                     to implement operation destroy().

                   - Merged module IOP_N (Codecs, etc.) into module
                     IOP for JDK 1.4 compatibility.

        - SSL Support changes:
                   - Dropped direct support for the separately
                     downloadable jsse1.0.2 (please see
                     README.jsse_1_0_2 in the sun_jsse dir).

                   - Added support for the JDK 1.4, which now also
                     includes generic access to the peers certificates
                     via our partial Security Level 2 implementation.

        - new OBV demo

1.4 beta 1:
===========

        - This beta compiles only on JDK 1.3 or greater. We will also
          support JDK 1.2 in the next release, but will give up
          backwards compatibility with JDK 1.1.

        - bug fixes:
                in Any (equals()) and TypeCode (equivalent)
                marshalling streams:
                        recursive and repeated TypeCodes
                DynAnys:
                        diverse bugs, e.g., treat aliased types correctly
                        made implementations purely local
                IDL compiler:
                        name resolution bugs
                POA and ORB:
                        memory leaks, local invocations
                IAIK SSL:
                        fixed bug that prevented mutual authentication
                        in non-role-change mode.
                Delegate/ImR:
                        fixed bug that caused exceptions when multiple
                        concurrent requests were issued to the ImR.

        - Appligator/HTTP tunneling:
                not supported in this beta ! (please wait for the next
                release...)

        - SSL support changes:

                - added support for Suns SSL implementation
                  JSSE. Please note that for technical reasons, it
                  isn't possible to access the clients certificates on
                  the server side when Sun JSSE is used. To use Sun
                  JSSE instead of IAIKs classes, please set the
                  following properties:

                  jacorb.ssl.socket_factory=org.jacorb.security.ssl.sun_jsse.SSLSocketFactory
                  jacorb.ssl.server_socket_factory=org.jacorb.security.ssl.sun_jsse.SSLServerSocketFactory

                - Made a change in the SSL package structure: classes
                  for IAIKs libraries that were formerly in package
                  org.jacorb.security.ssl are now in the package
                  org.jacorb.security.ssl.iaik. This makes it
                  necessary to adapt the socket facory properties:

                  jacorb.ssl.socket_factory=org.jacorb.security.ssl.iaik.SSLSocketFactory
                  jacorb.ssl.server_socket_factory=org.jacorb.security.ssl.iaik.SSLServerSocketFactory

                - Removed property

                  jacorb.security.enforce_ssl

                  Enforcing SSL can now be achieved by setting the
                  required and supported options. Please see the
                  Programming Guide for more details on these
                  properties.

                - Replaced properties

                  jacorb.security.ssl.supported_options
                  jacorb.security.ssl.required_options

                  by

                  jacorb.security.ssl.client.supported_options
                  jacorb.security.ssl.client.required_options
                  jacorb.security.ssl.server.supported_options
                  jacorb.security.ssl.server.required_options

                  This allows for a more fine-grained setup of
                  SSL. Please see the Programming Guide for more
                  details on these properties.

                - modified the property "jacorb.security.keystore". It
                  now allows three ways of specifying the keystore
                  location:
                  a) absolute path
                  b) relative path to current dir
                  c) relative path to users home dir
                  These possibilities are searched in the order give above.

        - OBV support added
                some feature are still unimplemented:
                  - valuetype inheritance
                  - value factories (use causes npe's in the compiler!)
                  - code downloading
                  - custom marshalling

        - GIOP 1.2 and bidirectional GIOP

1.3.30

        - fixed a problem with client-side connection time outs (clients
             would only time out once, and not also after subsequent
             reconnects).

             Involved changing some of COMM_FAILURE exceptions thrown
             in the runtime to IMP_LIMIT for tiemouts - these are the
             ones yu want to catch! Also changed a few others to
             TRANSIENT where they are appropriate for failures in
             the *initial* connection setup.

        - IDL compiler bug fixes:

             fixed bugs in constant expressions

             Compiler now resets internal table between IDL files passed
                on the same command line

             Compiler did not complain if oneway operations declare
                exceptions or return types other than void. Now it does.

             Compiler did not complain about identifiers in the same
                scope that differed only in case, which it should according
                to the spec. Now it correctly rejects definitions like
                "teST" and "TEst".

             Compiler did not check the IDL 2.3 rules for redefinition of
                interfaces etc. in nested scopes, now it does. (If that
                breaks your IDL files, use the new switch -sloppy_names
                to have the compiler behave as before.)

             Fixed Problems in generated code
                - String members in exceptions and structs are now initialized
                  to "", otherwise there can be CORBA.MARSHAL exceptions
                  at runtime because of null values.
                - generated code in multi-dimensional sequences now
                  compiles with javac.
                - Arrays of anys: generated code now compiles with javac.
                - Corrected references to holder classes for out
                  parameters for types aliased to string

             Additional bug fixes...

        - added support for inverse DNS lookup of IP addresses, so IORs
          contain fully qualified host names instead of IP numbers. See
          INSTALL file for details.

        - added properties "jacorb.ior_proxy_[host|port]" that replace
          the actual host/port where the ORB listens for requests. This
          is for cases where servers are hidden behind proxies / firewalls.

        - fixed a bug where a release() or a LocationForward on a shared
          object reference caused the irregular termination of other
          concurrent requests over that reference.

        - added property "custom.props" which can contain a comma separated
          list of additional properties files. These properties will override
          properties set in the jacorb.properties file. This is useful for
          setups with multiple servers/clients, where each process needs its
          own configuration.

        - fixed bugs in trader build files (leftover from "org" change).

        - added "auto-register" feature to the ImR. This will register
          servers, that don't need to be restarted automatically, on their
          first startup, so they don't have to be registered manually. This
          feature is activated  via a  "-a" switch  to the  ImR process  or
          by  setting the property "jacorb.imr.allow_auto_register" to "on".

        - renamed property "jacorb.ImplementationRepositoryURL" to
          "ORBInitRef.ImplementationRepository", so the ImR is available
          through resolve_initial_references().

        - accepting now ORBInitializer class properties in the form of
          "org.omg.PortableInterceptor.ORBInitializerClass.<class name>"
          for compliance reasons. Old form of
          "org.omg.PortableInterceptor.ORBInitializerClass.<name>=<class name>"
          is still supported.


1.3.21
        - internal redesign: all package names now begin with "org.jacorb"
          NOTE: You MUST change existing jacorb.properties files to
          reflect these changes where property values point to JacORB
          classes, e.g. the value for property:

              org.omg.PortableInterceptor.ORBInitializerClass.standard_init

          must be changed to:

              org.jacorb.orb.standardInterceptors.IORInterceptorInitializer

        - IDL compiler:
                . added the -nostub switch to suppress generation of client
                  stubs
                . added the -sloppy_forward switch for forward declared
                  interfaces without definitions
                . name resolution bug fixed
                . stricter checks in lots of places (thanks to Paul Locke)
                . minor bug fixes

        - Any marshalling bugs for alias types fixed

        - fixed diverse bugs in wstring support

        - enhanced dior tool to display character codeset information

        - fixed minor bug in internal buffer management

        - fixed bug in fallback code after a non-permanent ForwardRequest
          by a portable interceptor

        - added few properties to allow for tailor-made authentication
          implementations (aka PrincipalAuthenticator). Also fixed a
          few minor glitches in the SSL setup, so that we can now
          interoperate with, e.g., Orbacus' SSL.

1.3.11:

        - fixed two minor but annoying syntax errors in the source
          code... (jacorb/ir/gui/ModelBuilder.java and
          jacorb/orb/domain/gui/BrowserFrame.java). Also fixed
          broken jacorb.jar file


Changes for 1.3.0:

        new:
                - Interface Repository with GUI Browser

        improvements and bug fixes:
                - Programming Guide:
                        - new chapter, update
                        - now in HTML
                - fixed a memory leak
                - Implementation Repository now uses a thread pool internally
                - IDL compiler
                        - function of -i2jpackage switch fixed
                        - code generated for helper method narrow()
                          now compliant (throw BAD_PARAM rather than
                          return null)
                - name server: fixed a problem with reloading persistent state
                        after restarting
                - dior utility (ParsedIOR class) now corretcly
                  displays multiple profiles
                - updated build files
                - ...

Changes for 1.2.3:

        moved build files to Ant 1.2

        fixed build files for Linux with JDK 1.3

        fixed bug: too many client-side releases of object references
                (could result in INV_OBJREF exceptions)


Changes for 1.2.2:

        fixed memory leaks
                server: properly release servant delegated
                client: added a finalizer to generated stubs

        allow "file:/"-IORs again

        added client-side time outs (see properties file)

        changed check for OAIAddr property (address selection
                on multi-homed hosts)

        IDL compiler:
                fixed bug in code generated for multi-dimensional sequences
                fixed bug in escapeing mechanism for reserved words

        fixed bug in LocateRequest code

        fixed bug in CorbaLoc

        fixed debug output for applets (thanks to Frank Lange of Philips)

Changes for 1.2.1:

        fixed a bug in connection management (null pointer in
                reconnect())

        removed a few build problems (dependance on non-security
                package from within orb, generate idl and jaco scripts
                automatically)

        updated compiler version number


Changes for 1.2:
================

        - new:
                - Domain Service
                - HTTP tunneling
                - improved SSL integration

        - IDL compiler:
                - #pragma version works now
                - accepts value type definitions
                  (but only syntacically :-), no code is generated)
                - bug fixes (typedefs, any)

        - Implementation Repository: minor changes and fixes

        - ORB: fixed ORBInitRef, now a Java property

        - bug fixes:
                - Any/TypeCode bug
                - ServiceContext bug (alignment)

        - lots of minor stuff

Changes for 1.1:
================

        - Interoperable Naming Service extensions
                - standardized name-to-string conversions
                - convenient URL schemes for object references

        - IIOP over SSL
                - first alpha release, includes a KeyStoreManager GUI

        - Portable Interceptors

        - Collection and Concurrency services

        - Appligator bug fixes and resource usage improvements

        - IDL compiler improvements (by Matt Briggs, Vertel Inc.)
                - new compiler switch no_skel to suppress skeleton
                  code generation
                - extended preprocessor support
                - removed inter-package dependencies

        - Improved Language Mapping compliance and IDL compiler bug fixes
                - correct helper generation for typedef's
                - ...

        - much easier to install and configure, (no more bootclasspath
          fiddling, coexist with Sun JDK CORBA classes)

        - new, platform-independent build files (for Jakarta's Ant)

        - internal bug fixes (memory managament, memory leaks,
          CDR encapsulation size  tolerance, ...)
