<?xml version="1.0"?>

<!DOCTYPE project [ <!ENTITY common SYSTEM "../../etc/common.xml"> ]>

<project name="regression-test" default="run-all" basedir="../../">

    <property name="jacorb.home" value="${basedir}" />
    <property file="${basedir}/test/regression/build.properties" />

    <property name="dir.classes-instrumented" value="${basedir}/classes-instrumented" />
    <property name="dir.test" value="${basedir}/test/regression" />

    <tstamp>
        <format property="jacorb.test.testid" pattern="yyyy-MM-dd.HH-mm-ss" />
    </tstamp>
    
    <property name="jacorb.test.outdir" value="${dir.test}/output/${jacorb.test.testid}" />

    <!-- ==================================================== -->
    <!--             JacORB Tests build file                  -->
    <!-- ==================================================== -->

   &common;

   <!-- Using test-base-init so we can set different src, class and idl directories -->
    <target name="test-base-init">
        <property name="dirs.base" value="${dir.test}" />
        <property name="src" value="${dir.test}/src" />
        <property name="src.generated" value="${src}/generated" />
        <property name="idl" value="${dir.test}/idl" />
        <property name="lib" value="${basedir}/lib" />

        <property name="BASE-INIT" value="true" />
    </target>

    <target name="test-init" depends="test-base-init,init,load-taskdef">
        <path id="cp.test">
            <pathelement location="${dir.test}/classes" />

            <fileset dir="${dir.test}/lib">
                <include name="*.jar" />
                <exclude name="emma*.jar"/>
            </fileset>
        </path>

        <path id="cp.compile-test">
            <path refid="cp.test" />
            <path refid="path.base" />
        </path>

        <available classname="com.sun.corba.se.internal.iiop.ShutdownUtilDelegate"
               property="isAvailable.ShutdownUtilDelegate" />

        <!-- include emma tasks for code coverage -->

        <path id="cp.emma">
            <pathelement location="${dir.test}/lib/emma.jar"/>
        </path>

        <path id="cp.emma.ant">
            <path refid="cp.emma" />
            <pathelement location="${dir.test}/lib/emma_ant.jar"/>
        </path>

        <taskdef resource="emma_ant.properties"
                 classpathref="cp.emma.ant"/>

        <macrodef name="jacorb-rmic">
            <attribute name="classname" />
            <attribute name="iiop" default="true" />
            <attribute name="iiopopts" default="-poa" />

            <sequential>
                <rmic base="${classdir}"
                  classname="@{classname}"
                  verify="${rmic.verify}"
                  iiop="@{iiop}"
                  iiopopts="@{iiopopts}"
                  debug="${rmic.debug}"
                  sourcebase="${src}/generated">
                </rmic>
            </sequential>
        </macrodef>

        <macrodef name="process-idl">
            <attribute name="includes" />
            <attribute name="ami" default="false"/>

            <sequential>
                <jacidl
                    srcdir="${idl}"
                    ami_callback="@{ami}"
                    destdir="${src}/generated"
                    includepath="${basedir}/idl/omg"
                    includes="@{includes}"
                    helpercompat="jacorb"/>
            </sequential>
        </macrodef>
    </target>


    <!-- ==================================================== -->
    <!--             compile and run tests                    -->
    <!-- ==================================================== -->

    <target name="build-all" depends="test-init,
                                      idl,
                                      compile-src,
                                      compile-rmic,
    	                              compile-src-notification,
                                      instrument" />

    <target name="compile-src" >
        <jacorb-javac javac-includes="**"
            javac-excludes="generated/**,
                            **/RMITestServant.java,
                            org/jacorb/test/notification/**,
        	                org/jacorb/test/jmx/**"
            javac-classpathref="cp.compile-test" />
    </target>

    <target name="compile-rmic" >
        <jacorb-rmic
          classname="org.jacorb.test.orb.rmi.RMITestImpl" />
        <jacorb-rmic
              classname="org.jacorb.test.bugs.bugjac149.RemoteIPingImpl" />
        <jacorb-javac javac-includes="**/RMITestServant.java" javac-classpathref="cp.compile-test" />
    </target>

	<target name="compile-src-notification" unless="NO_BUILD">
        <jacorb-javac
              javac-includes="org/jacorb/test/notification/**/*.java"
              javac-excludes="org/jacorb/test/notification/plugins/**,
                              org/jacorb/test/notification/jmx/**"
              javac-classpathref="cp.compile-test" />
    </target>

    <!-- run the tests -->

    <target name="run" depends="test-init,
                                jacunit-junit,
                                jacunit-junit-report-txt,
                                jacunit-junit-report-html,
                                jacunit-coverage-report,
                                jacunit-clean,
                                jacunit-checkfail" />

    <target name="jacunit-checkargs" depends="test-init">
        <condition property="jacorb.test.ssl" value="true">
            <isset property="TEST_SSL"/>
        </condition>

        <condition property="jacorb.test.imr" value="true">
            <isset property="TEST_IMR"/>
        </condition>

        <condition property="jacorb.test.coverage.process" value="true">
            <isset property="jacorb.test.coverage" />
        </condition>

        <!-- By default, we do run naming and notification tests -->
        <property name="jacorb.exclude-services" value="false"/>
        <property name="jacorb.test.verbose" value="false" />

        <!-- timeout if we want in tests for something to happen that takes a while -->
        <property name="jacorb.test.timeout.medium" value="10000" />

        <!-- timeout until a server comes up -->
        <property name="jacorb.test.timeout.server" value="120000" />

        <property name="jacorb.test.pkg" value="**" />
        <property name="jacorb.test.pattern" value="${jacorb.test.pkg}/*Test.class" />
        <property name="jacorb.test.timeout.global" value="240000" />

        <property name="jacorb.test.maxmemory" value="256m" />

        <property name="jacorb.test.server.version" value="cvs" />
        <property name="jacorb.test.client.version" value="cvs" />

        <property name="jacorb.test.launcherconfigfile" value="${dir.test}/resources/test.properties" />

        <property name="jacorb.test.home" value="${dir.test}" />

        <property name="dir.jacorb.client" value="${basedir}" />
        <path id="cp.jacorb.client" >
            <pathelement location="${dir.jacorb.client}/classes" />
            <fileset dir="${dir.jacorb.client}/lib" includes="*.jar" />
        </path>

        <condition property="rmi.jvmarg" value="-Djavax.rmi.CORBA.UtilClass=org.jacorb.test.orb.rmi.FixSunDelegateBug">
            <isset property="isAvailable.ShutdownUtilDelegate" />
        </condition>

        <property name="jacorb.test.rmi.jvmarg" value="-Djacorb.test.ignoredKey=ignoredValue" />

    	
        <mkdir dir="${jacorb.test.outdir}" />
    </target>

    <target name="jacunit-coverage-enabled" if="jacorb.test.coverage.process" >
        <property name="emma.coverage.out.file" value="${jacorb.test.outdir}/coverage-client.ec" />
        <property name="emma.verbosity.level" value="quiet" />
        <property name="jacorb.test.coverage" value="true" />

        <path id="_test.bootclasspath">
            <pathelement location="${dir.jacorb.client}/classes-instrumented" />
            <path refid="cp.emma" />
            <path refid="cp.jacorb.client" />
        </path>
    </target>

    <target name="jacunit-coverage-disabled" unless="jacorb.test.coverage.process" >
        <path id="_test.bootclasspath">
            <path refid="cp.jacorb.client" />
        </path>
    </target>

    <target name="jacunit-junit-jvm-custom" if="jacorb.test.client.jvm" >
        <java jvm="${jacorb.test.client.jvm}" fork="true" failonerror="true" classname="ignored" outputproperty="jacorb.test.client.jvminfo">
            <jvmarg line="-version"/>
        </java>

        <presetdef name="jacorb-junit">
            <junit jvm="${jacorb.test.client.jvm}" />
        </presetdef>
    </target>

    <target name="jacunit-junit-jvm-default" unless="jacorb.test.client.jvm" >
        <java fork="true" failonerror="true" classname="ignored" outputproperty="jacorb.test.client.jvminfo">
            <jvmarg line="-version"/>
        </java>

        <presetdef name="jacorb-junit" >
            <junit />
        </presetdef>
    </target>

    <target name="jacunit-junit"
            depends="test-init,
                     jacunit-checkargs,
                     jacunit-coverage-enabled,
                     jacunit-coverage-disabled,
                     jacunit-junit-jvm-custom,
                     jacunit-junit-jvm-default" >

        <taskdef name="jacunit-banner"
                classname="org.jacorb.test.common.launch.PrintTestBanner"
                classpathref="cp.test" />

        <propertyset id="jacorb.test.properties" >
            <propertyref prefix="jacorb.test" />
            <propertyref prefix="emma" />
        </propertyset>

        <jacunit-banner outputproperty="jacorb.test.testbanner" >
            <syspropertyset refid="jacorb.test.properties" />
        </jacunit-banner>

        <echo message="${jacorb.test.testbanner}" level="verbose" />

        <property name="_bootclasspath" refid="_test.bootclasspath" />

        <jacorb-junit
                fork="true"
                includeantruntime="true"
                timeout="${jacorb.test.timeout.global}"
                showoutput="true"
                errorproperty="test.failed"
                failureproperty="test.failed"
                maxmemory="${jacorb.test.maxmemory}">

            <formatter type="brief" usefile="false" />
            <formatter type="plain" />
            <formatter type="xml" unless="jacorb.test.j2me" />

            <syspropertyset refid="jacorb.test.properties" />

            <jvmarg value="-Xbootclasspath/p:${_bootclasspath}" />
            <jvmarg value="${jacorb.test.rmi.jvmarg}" />

            <classpath>
                <pathelement location="${classdir}" />

                <pathelement location="${src}" />

                <pathelement location="${dir.test}/resources" />

                <path refid="cp.test" />
            </classpath>

            <batchtest todir="${jacorb.test.outdir}" >
                <fileset dir="${dir.test}/classes" includes="${jacorb.test.pattern}">
                	<exclude name="**/AllTest.class" />
                    <exclude name="**/PackageTest.class" />

                    <exclude name="org/jacorb/test/idl/**" if="jacorb.test.j2me"/>
                    <exclude name="org/jacorb/test/imr/**" if="jacorb.test.j2me"/>
                    <exclude name="org/jacorb/test/ir/**" if="jacorb.test.j2me"/>
                    <exclude name="org/jacorb/test/orb/rmi/**" if="jacorb.test.j2me"/>
                    <exclude name="org/jacorb/test/naming/**" if="jacorb.test.exclude-services" />

                    <exclude name="org/jacorb/test/common/**" />
                </fileset>
            </batchtest>
        </jacorb-junit>
    </target>

    <target name="jacunit-clean" depends="jacunit-checkargs" >
        <delete>
            <fileset dir="${jacorb.test.outdir}">
                <include name="header.txt" />
                <include name="TESTS-TestSuites.xml" />
                <include name="*.tmp" />
                <include name="**/*.ec" unless="jacorb.test.coverage.skip"/>
            </fileset>
        </delete>
    </target>

    <target name="jacunit-realclean" depends="jacunit-clean">
        <delete includeemptydirs="true">
            <fileset dir="${jacorb.test.outdir}">
                <include name="coverage/**" />
                <include name="html/**" />
                <include name="TEST*.xml" />
                <include name="TEST*.txt" />
            </fileset>
        </delete>
    </target>

    <target name="jacunit-junit-report-html" depends="jacunit-checkargs" if="jacorb.test.junit.html.process">
        <property name="jacorb.test.junit.html.dir" value="${jacorb.test.outdir}/html" />

        <junitreport todir="${jacorb.test.outdir}">
            <fileset dir="${jacorb.test.outdir}">
                <include name="**/*.xml"/>
                <exclude name="**/TESTS-TestSuites.xml" />
            </fileset>
            <report format="frames" todir="${jacorb.test.junit.html.dir}"/>
        </junitreport>
    </target>

    <macrodef name="sumColumns">
        <attribute name="result" />
        <attribute name="srcFile" default="${jacorb.test.outdir}/AllResults.tmp" />
        <attribute name="pattern" />

        <sequential>
            <typedef name="sumfilter"
                     classname="org.jacorb.test.ant.SumFilter"
                     classpathref="cp.test"/>

            <loadfile property="@{result}" srcfile="@{srcFile}">
                <filterchain>
                    <replaceregex pattern="@{pattern}" replace="\1" />
                    <sumfilter />
                    <tailfilter lines="1"/>
                    <striplinebreaks/>
                </filterchain>
            </loadfile>

        </sequential>
    </macrodef>

    <target name="jacunit-junit-report-txt" depends="jacunit-checkargs, test-init">

        <concat destfile="${jacorb.test.outdir}/AllResults.tmp" >
            <fileset dir="${jacorb.test.outdir}" includes="TEST-*.txt" excludes="TEST-org.jacorb.test.AllTest.txt"/>
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="Tests run: \d+, Failures: \d+, Errors: \d+"/>
                </linecontainsregexp>
            </filterchain>
        </concat>

        <sumColumns result="result.testCount" pattern=".*Tests run: (\d+).*" />
        <sumColumns result="result.testFailures" pattern=".*Failures: (\d+).*" />
        <sumColumns result="result.testErrors" pattern=".*Errors: (\d+).*" />
        <sumColumns result="result.timeElapsed" pattern=".*elapsed: ((?:\d|,)+).*" />

        <concat force="true" destfile="${jacorb.test.outdir}/TEST-org.jacorb.test.AllTest.txt" >
            <header filtering="false" >
${jacorb.test.testbanner}

# accumulated results. see the single TEST-{packageName.testName}.txt files for detailed results
Tests run: ${result.testCount}, Failures: ${result.testFailures}, Errors: ${result.testErrors}, Time elapsed: ${result.timeElapsed} sec${line.separator}${line.separator}</header>
            <fileset dir="${jacorb.test.outdir}" includes="TEST-*.txt" excludes="TEST-org.jacorb.test.AllTest.txt"/>
            <filterchain>
                <replaceregex pattern="^Tests run:" replace="# Tests run:"/>
                <striplinecomments>
                    <comment value="#" />
                </striplinecomments>
            </filterchain>
        </concat>
    </target>

    <target name="jacunit-coverage-report" depends="jacunit-checkargs" if="jacorb.test.coverage.process" unless="jacorb.test.coverage.skip" >

        <property name="jacorb.test.coverage.dir" value="${jacorb.test.outdir}/coverage" />

        <path id="path.src" >
            <pathelement location="${basedir}/src" />
            <pathelement location="${basedir}/src/generated" />
        </path>

        <property name="dir.combined" value="${jacorb.test.coverage.dir}/coverage-combined" />
        <property name="dir.client" value="${jacorb.test.coverage.dir}/coverage-client/" />
        <property name="dir.server" value="${jacorb.test.coverage.dir}/coverage-server" />

        <mkdir dir="${dir.combined}" />
        <mkdir dir="${dir.client}" />
        <mkdir dir="${dir.server}" />

        <emma>
            <report sourcepathref="path.src"
                    columns="name,line,method,class"
                    sort="+name">
                <fileset dir="${basedir}">
                    <include name="coverage.em"/>
                </fileset>

                <fileset dir="${jacorb.test.outdir}" >
                    <include name="coverage-client.ec"/>
                    <include name="coverage-server.ec"/>
                </fileset>
                <html outfile="${dir.combined}/index.html"/>
            </report>

            <report sourcepathref="path.src"
                    columns="name,line,method,class"
                    sort="+name">
                <fileset dir="${basedir}">
                    <include name="coverage.em"/>
                </fileset>

                <fileset dir="${jacorb.test.outdir}" >
                    <include name="coverage-client.ec"/>
                </fileset>

                <html outfile="${dir.client}/index.html"/>
            </report>

            <report sourcepathref="path.src"
                    columns="name,line,method,class"
                    sort="+name">
                <fileset dir="${basedir}">
                    <include name="coverage.em"/>
                </fileset>

                <fileset dir="${jacorb.test.outdir}" >
                    <include name="coverage-server.ec"/>
                </fileset>

                <html outfile="${dir.server}/index.html"/>
            </report>
        </emma>

        <echo file="${jacorb.test.coverage.dir}/index.html" >
            &lt;html&gt;
            &lt;a href="coverage-combined/index.html" &gt; coverage-combined &lt;/a&gt;
            &lt;br/&gt;
            &lt;a href="coverage-client/index.html" &gt; coverage-client &lt;/a&gt;
            &lt;br/&gt;
            &lt;a href="coverage-server/index.html" &gt; coverage-server &lt;/a&gt;
            &lt;/html&gt;
        </echo>
    </target>

    <target name="jacunit-checkfail" if="jacorb.test.shouldantfail" >
        <fail if="test.failed" message="At least one JUnit test failed. check log for details."/>
    </target>

    <!-- ==================================================== -->
    <!--                  compile idl                         -->
    <!-- ==================================================== -->

    <target name="idl" unless="NO_BUILD">
        <antcall target="idl-wrapped" />
    </target>

    <target name="idl-wrapped"
            depends="test-init,
                     idl-tests,
                     idl-anyserver,
                     idl-basicserver,
	                 idl-arrayserver,
                     idl-codesetserver,
                     idl-charserver,
                     idl-longlongseqserver,
                     idl-callbackserver,
                     idl-timingserver,
                     idl-syncscopeserver,
                     idl-connectiontimeout,
                     idl-bidir,
                     idl-imr,
                     idl-iiopaddress,
                     idl-recursive,
                     idl-notification,
                     idl-notification-typed,
                     idl-value,
                     idl-value-test,
                     idl-exception,
                     idl-shutdown,
                     idl-dii,
                     idl-bugs,
                     idl-transport-current-server" />

    <!-- ==================================================== -->
    <!--                compile Tests.idl                     -->
    <!-- ==================================================== -->

    <target name="idl-transport-current-server">
        <process-idl includes="TransportCurrentServer.idl" />
    </target>

    <target name="idl-anyserver">
        <process-idl includes="AnyServer.idl"/>
    </target>

    <target name="idl-tests">
        <process-idl includes="Tests.idl" />
    </target>

    <target name="idl-basicserver">
        <process-idl includes="BasicServer.idl" />
    </target>

    <target name="idl-arrayserver">
       <process-idl includes="ArrayServer.idl" />
    </target>

	<target name="idl-codesetserver">
        <process-idl includes="CodesetServer.idl" />
    </target>

    <target name="idl-charserver">
        <process-idl includes="CharServer.idl" />
    </target>

    <target name="idl-longlongseqserver">
        <process-idl includes="LongLongSeqServer.idl" />
    </target>

    <target name="idl-callbackserver">
        <process-idl includes="CallbackServer.idl" ami="true"/>
    </target>

    <target name="idl-timingserver">
        <process-idl includes="TimingServer.idl" ami="true" />
    </target>

    <target name="idl-syncscopeserver">
        <process-idl includes="SyncScopeServer.idl" ami="true" />
    </target>

    <target name="idl-connectiontimeout">
        <process-idl includes="ConnectionTimeout.idl" />
    </target>

    <target name="idl-bidir">
        <process-idl includes="BiDir.idl" />
    </target>

    <target name="idl-iiopaddress">
        <process-idl includes="IIOPAddress.idl" />
    </target>

    <target name="idl-imr">
        <process-idl includes="IMRTest.idl" />
    </target>

    <target name="idl-recursive">
        <process-idl includes="RecursiveParamServer.idl" />
    </target>

    <target name="idl-notification">
        <process-idl includes="Notification.idl" />
    </target>

    <target name="idl-notification-typed">
        <process-idl includes="TypedNotification.idl" />
    </target>

    <target name="idl-value">
        <process-idl includes="value.idl" />
    </target>

    <target name="idl-value-test">
          <process-idl includes="ValueTest.idl" />
    </target>

    <target name="idl-exception">
        <process-idl includes="ExceptionServer.idl" />
    </target>

    <target name="idl-shutdown">
        <process-idl includes="ShutdownServer.idl" />
    </target>

    <target name="idl-dii">
        <process-idl includes="diiserver.idl" />
    </target>

    <target name="idl-bugs">
        <process-idl includes="bug*.idl"/>
    </target>

    <!-- ==================================================== -->
    <!--                  code coverage                       -->
    <!-- ==================================================== -->

    <target name="instrument" depends="test-init"
          description="Instrument the main JacORB code for coverage analysis">

        <pathconvert pathsep="," property="_generated.sources">
            <path>
                <fileset dir="${basedir}/src/generated">
                    <include name="**/*.java" />
                </fileset>
            </path>

            <mapper type="package" from="${basedir}/src/generated/*.java" to="*" />
        </pathconvert>

        <emma>
            <instr instrpath="${basedir}/classes"
             mode="copy"
             outdir="${dir.classes-instrumented}"
             outfile="${basedir}/coverage.em">
                <filter excludes="${_generated.sources}"  />
                <filter excludes="org.omg.*"/>
                <filter excludes="Cos*"/>
                <filter excludes="org.jacorb.ir.gui*"/>
                <filter excludes="org.jacorb.naming.namemanager.*"/>
                <filter excludes="org.jacorb.poa.gui.*"/>
                <filter excludes="org.jacorb.trading.*"/>
            </instr>
        </emma>
    </target>

    <target name="show">
        <echoproperties/>
    </target>

    <!-- ==== -->
    <!-- J2ME -->
    <!-- ==== -->

    <target name="j2me:no-build" unless="NO_BUILD" >
        <fail>
            don't compile the testsuite using J2ME as target.
            instead compile using a standard JDK (ant build-all).
            the testsuite will disable the tests that aren't supported by the J2ME VM
        </fail>
    </target>

    <target name="j2me:test-init">
        <property name="jacorb.test.j2me" value="true" />
        <property name="jacorb.test.annotations.parserclass" value="org.jacorb.test.common.NullTestAnnotationsParser" />
        <property name="jacorb.test.client.version" value="cvs-j2me" />
        <property name="jacorb.test.server.version" value="cvs-j2me" />
        <property name="jacorb.test.jacorb_version.1.property.jacorb.java.home" value="${dir.j2me}" />
        <property name="jacorb.test.client.jvm" value="${dir.j2me}/bin/cvm" />
        <property name="NO_BUILD" value="true" />
    </target>

    <target name="j2me:run-all" depends="j2me:verify, j2me:no-build, j2me:test-init, run-all" description="run all JacORB ME tests" />

    <!-- ==================================================== -->
    <!--                  run all tests                       -->
    <!-- ==================================================== -->

    <target name="run-all" description="Run and build all Jacorb tests. For any run*&#13;&#10;
                            tests the following -D parameters are&#13;&#10;
                            available:&#13;&#10;
                            jacorb.test.ssl=true/false&#13;&#10;
                            jacorb.test.coverage=true/false&#13;&#10;
                            jacorb.test.verbose=true/false" depends="build-all, run">
    </target>

    <!-- ==================================================== -->
    <!--                  run idl tests                       -->
    <!-- ==================================================== -->

    <target name="run-all-idl"
          description="Run all Jacorb tests in the idl package">
       <antcall target="run-all">
          <param name="jacorb.test.pkg" value="org/jacorb/test/idl/**" />
       </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                  run bug tests                       -->
    <!-- ==================================================== -->


    <target name="run-all-bugs"
          description="Run all Jacorb tests in the bugs package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/bugs/**" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                  run orb/poa tests                   -->
    <!-- ==================================================== -->


    <target name="run-all-orb"
          description="Run all Jacorb tests in the orb package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/orb/**" />
        </antcall>
    </target>


    <target name="run-all-poa"
          description="Run all Jacorb tests in the poa package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/poa/**" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                  run rmi tests                       -->
    <!-- ==================================================== -->


    <target name="run-all-rmi"
          description="Run all Jacorb tests in the rmi package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/orb/rmi/**" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                 run dynany tests                     -->
    <!-- ==================================================== -->


    <target name="run-all-dynany"
          description="Run all Jacorb tests in the dynany package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/orb/dynany/**" />
        </antcall>
    </target>

    <!-- ==================================================== -->
    <!--                 run dii tests                        -->
    <!-- ==================================================== -->

    <target name="run-all-dii"
          description="Run all Jacorb tests in the dii package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/dii/**" />
        </antcall>
    </target>


    <target name="run-all-imr">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/imrutility/**" />
        </antcall>
    </target>

        <!-- ==================================================== -->
        <!--                 run transport tests                  -->
        <!-- ==================================================== -->


        <target name="run-all-transport-current"
              description="Run all Jacorb tests in the tc (TransportCurrent) package">
            <antcall target="run-all">
                <param name="jacorb.test.pkg" value="org/jacorb/test/transport/**" />
            </antcall>
        </target>

    <!-- ==================================================== -->
    <!--                 run notification tests               -->
    <!-- ==================================================== -->


    <target name="run-all-notification"
          description="Run all Jacorb tests in the notification package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/notification/**" />
        </antcall>
    </target>

    <!-- ==================================================== -->
    <!--                   clean up                           -->
    <!-- ==================================================== -->

    <target name="clean" depends="test-base-init, init" description="Remove all generated source files and class files">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${classdir}" includes="**/*" />
            <fileset dir="${src}/generated" includes="**/*" />
            <fileset dir="${basedir}/classes-instrumented" includes="**/*"/>
            <fileset file="${src}/org/jacorb/test/orb/rmi/FixSunDelegateBug.java"/>
            <fileset dir="${basedir}">
                <include name="coverage.em"/>
            </fileset>
        </delete>
    </target>
</project>
