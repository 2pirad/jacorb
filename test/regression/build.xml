<?xml version="1.0"?>

<!DOCTYPE project [ <!ENTITY common SYSTEM "file:../../etc/common.xml"> ]>

<project name="regression-test" default="help" basedir="../../">

    <property name="jacorb.home" value="${basedir}" />
    <property file="${basedir}/test/regression/build.properties" />

    <!-- ==================================================== -->
    <!--             JacORB Tests build file                  -->
    <!-- ==================================================== -->
    <target name="help">
        <exec executable="java" outputproperty="OUTPUT">
            <arg line="-classpath ${java.class.path} org.apache.tools.ant.Main -logger org.apache.tools.ant.NoBannerLogger -projecthelp -buildfile ${basedir}/test/regression/build.xml" />
        </exec>
        <echo message="${OUTPUT}" />
    </target>

   &common;

   <!-- Using test-base-init so we can set different src, class and idl directories -->
    <target name="test-base-init">
        <property name="testdir" value="${basedir}/test/regression" />
        <property name="dirs.base" value="${testdir}" />
        <property name="src" value="${testdir}/src" />
        <property name="src.generated" value="${src}/generated" />
        <property name="idl" value="${testdir}/idl" />
        <property name="lib" value="${basedir}/lib" />

        <property name="BASE-INIT" value="true" />
    </target>

    <target name="test-init" depends="test-base-init,init,ant-version,load-taskdef">
        <path id="test.classpath">
            <fileset dir="${testdir}/lib">
                <include name="**/*.jar" />
            </fileset>
            <path refid="path.base" />
        </path>

        <property name="dirs.output" value="${testdir}/output" />

        <mkdir dir="${dirs.output}" />

        <!-- Configuration properties for rmi depending upon JDK version -->
        <property name="rmic.stubVersion" value="1.2" />
        <property name="rmic.iiop" value="yes" />
        <property name="rmic.iiopopts" value="-poa" />
        <available classname="com.sun.corba.se.internal.iiop.ShutdownUtilDelegate"
               property="rmi.ShutdownUtilDelegate" />
        <available classname="com.sun.corba.se.internal.iiop.ShutdownUtilDelegate"
               property="rmi.jvmarg"
               value="-Djavax.rmi.CORBA.UtilClass=org.jacorb.test.orb.rmi.FixSunDelegateBug" />
        <condition property="rmi.jvmarg" value="-D">
            <not>
                <available classname="com.sun.corba.se.internal.iiop.ShutdownUtilDelegate" />
            </not>
        </condition>
        <available classname="com.sun.corba.se.internal.iiop.ShutdownUtilDelegate"
               property="use.jdk.orb" />
        <available classname="com.ibm.CORBA.iiop.ORB"
               property="use.jdk.orb" />

        <!-- include emma tasks for code coverage -->
        <path id="emma.lib">
            <pathelement location="${testdir}/lib/emma.jar"/>
            <pathelement location="${testdir}/lib/emma_ant.jar"/>
        </path>

        <taskdef resource="emma_ant.properties"
             classpathref="emma.lib"/>
    </target>


    <!-- ==================================================== -->
    <!--             compile and run tests                    -->
    <!-- ==================================================== -->


    <target name="build-all" depends="test-init" unless="NO_BUILD">
        <antcall target="compile-idl" />
        <antcall target="fixup-rmi-14" />
        <antcall target="compile-src" />
        <antcall target="compile-rmi" />
        <antcall target="compile-src2" />
        <property name="NO_BUILD" value="true" />
    </target>


    <target name="fixup-rmi-14" if="rmi.ShutdownUtilDelegate">
        <copy file="${src}/org/jacorb/test/orb/rmi/FixSunDelegateBug.java.14"
          tofile="${src}/org/jacorb/test/orb/rmi/FixSunDelegateBug.java" />
    </target>



    <target name="compile-src-notification" depends="test-init">
        <jacorb-javac
      javac-includes="org/jacorb/test/notification/**"
      javac-excludes="org/jacorb/test/notification/util/regexp/**,
                           org/jacorb/test/notification/plugins/**,
                               org/jacorb/test/notification/jmx/**"
      javac-classpathref="test.classpath" />

        <antcall target="compile-src-notification-regexp" />
    </target>

    <target name="compile-src-notification-regexp"
          depends="test-init, check-regexp, compile-src-notification-jdk14,
                   compile-src-notification-jakarta, compile-src-notification-gnu" />

    <target name="compile-src-notification-jdk14" if="available.regexp.jdk">
        <jacorb-javac
      javac-includes="org/jacorb/test/notification/util/regexp/JDK14*" />
    </target>


    <target name="compile-src-notification-jakarta" if="available.regexp.jakarta-regexp">
        <jacorb-javac
      javac-includes="org/jacorb/test/notification/util/regexp/Jakarta*" />
    </target>


    <target name="compile-src-notification-gnu" if="available.regexp.gnu">
        <jacorb-javac
      javac-includes="org/jacorb/test/notification/util/regexp/GNU*" />
    </target>


    <target name="compile-src">
        <jacorb-javac javac-includes="**"
            javac-excludes="generated/**,**/RMITestServant.java,org/jacorb/test/notification/**,org/jacorb/test/jmx/**"
            javac-classpathref="test.classpath" />

        <antcall target="compile-src-notification" />
    </target>

    <target name="compile-rmi" depends="test-init, compile-src, compile-rmi-orb, compile-rmi-objrep" />

    <target name="compile-rmi-orb">
        <rmic base="${classdir}"
          classname="org.jacorb.test.orb.rmi.RMITestImpl"
          verify="${rmic.verify}"
          iiop="${rmic.iiop}"
          iiopopts="${rmic.iiopopts}"
          debug="${rmic.debug}"
          sourcebase="${src}/generated">
        </rmic>
    </target>

    <target name="compile-rmi-objrep" >
        <rmic base="${classdir}"
              classname="org.jacorb.test.bugs.bugjac149.RemoteIPingImpl"
              verify="${rmic.verify}"
              iiop="${rmic.iiop}"
              iiopopts="${rmic.iiopopts}"
              debug="${rmic.debug}"
              sourcebase="${src}/generated">
        </rmic>
    </target>

    <target name="compile-src2" depends="compile-rmi">
        <jacorb-javac javac-includes="**/RMITestServant.java" javac-classpathref="test.classpath" />
    </target>


    <target name="check-ssl">
        <condition property="jacorb.test.ssl" value="true">
            <isset property="TEST_SSL"/>
        </condition>

        <property name="jacorb.test.ssl" value="false"/>
    </target>

    <target name="check-imr">
        <condition property="jacorb.test.imr" value="true">
            <isset property="TEST_IMR"/>
        </condition>

        <property name="jacorb.test.imr" value="false"/>
    </target>

    <target name="run" depends="test-init, build-all, check-ssl, check-imr">
        <property name="test.cp" refid="test.classpath"/>

        <!-- By default, we don't run coverage-->
        <property name="jacorb.test.coverage" value="false"/>
        <!-- This property is for old style test results names. It also switches off -->
        <!-- placing test results in subdirectories                                  -->
        <property name="jacorb.test.outputfile.testname" value="false"/>
        <!-- By default, we do run naming and notification tests -->
        <property name="jacorb.exclude-services" value="false"/>
        <!-- currently only affects idl tests -->
        <property name="jacorb.test.verbose" value="false" />
        <property name="jacorb.test.timeout" value="15000" />

        <java fork="true" classname="org.jacorb.test.common.launch.TestLauncher">
            <classpath path="${test.cp}"/>

            <jvmarg value="-Djacorb.test.home=${testdir}" />
            <jvmarg value="-Djacorb.home=${jacorb.home}" />
            <jvmarg value="-Djacorb.test.outputfile.testname=${jacorb.test.outputfile.testname}"/>
            <jvmarg value="-Djacorb.test.coverage=${jacorb.test.coverage}"/>
            <jvmarg value="-Djacorb.test.verbose=${jacorb.test.verbose}" />
            <jvmarg value="-DEXCLUDE_SERVICES=${jacorb.exclude-services}" />
            <jvmarg value="-Djacorb.test.ssl=${jacorb.test.ssl}" />
            <jvmarg value="-Djacorb.test.imr=${jacorb.test.imr}" />
            <jvmarg value="-Djacorb.test.timeout=${jacorb.test.timeout}" />

             <!-- Note - passing multiple arguments to this class may affect the output file -->
             <!-- naming. See TestLauncher.getOutFilename                                    -->
             <arg value="${jacorb.test}"/>
          </java>
    </target>



    <!-- The following old run targets are deprecated -->
    <target name="run-old-jdk-orb-no-build" depends="test-init" if="use.jdk.orb">
        <junit fork="yes" printsummary="withOutAndErr">
            <jvmarg value="-Djacorb.test.home=${testdir}" />
            <formatter type="plain" />
            <test name="${jacorb.test}" outfile="TEST-${test}-jdkorb" todir="${dirs.output}" />
            <classpath>
                <path refid="test.classpath" />
            </classpath>
        </junit>
    </target>


    <!-- ==================================================== -->
    <!--                  compile idl                         -->
    <!-- ==================================================== -->


    <target name="compile-idl" depends="test-init">
        <!-- Test for correct package generation -->
        <jacidl generateir="false"
               srcdir="${idl}/compiler/misc"
               ami_callback="false"
               destdir="${src}/generated"
               includes="bugJac44.idl">
          <i2jpackage names=":apmInterface"/>
        </jacidl>
        <antcall target="idl-tests" />
        <antcall target="idl-anyserver"/>
        <antcall target="idl-basicserver" />
        <antcall target="idl-codesetserver"/>
        <antcall target="idl-charserver" />
        <antcall target="idl-longlongseqserver" />
        <antcall target="idl-callbackserver" />
        <antcall target="idl-timingserver" />
        <antcall target="idl-syncscopeserver" />
        <antcall target="idl-connectiontimeout" />
        <antcall target="idl-bidir" />
        <antcall target="idl-iiopaddress" />
        <antcall target="idl-recursive" />
        <antcall target="idl-notification" />
        <antcall target="idl-notification-typed" />
        <antcall target="idl-value" />
        <antcall target="idl-value-test" />
        <antcall target="idl-exception" />
        <antcall target="idl-shutdown" />
        <antcall target="idl-dii" />
        <antcall target="idl-bugs" />
    </target>


    <target name="process-idl">
        <property name="${props.idl}" value="true" />
        <property name="generateir" value="false" />
        <antcall target="generate-src" />
    </target>


    <target name="generate-src" if="${props.idl}">
        <jacidl generateir="true"
            srcdir="${idl}"
            ami_callback="${callback.idl}"
            destdir="${src}/generated"
            includepath="${basedir}/idl/omg"
            includes="${file.idl}" />

        <path id="src.generated">
            <pathelement location="${src}/generated"/>
        </path>

        <antcall target="jacorb-javac">
            <param name="javac-src" value="${src}/generated" />
            <param name="javac-includes" value="${pkg.idl}/**" />
            <param name="javac-sourcepath" value="src.generated" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                compile Tests.idl                     -->
    <!-- ==================================================== -->

      <target name="idl-anyserver">
          <property name="props.idl" value="AnyServer"/>
          <property name="pkg.idl" value="org/jacorb/test"/>
          <property name="callback.idl" value="false"/>
          <property name="file.idl" value="AnyServer.idl"/>
          <antcall target="process-idl"/>
      </target>


    <target name="idl-tests">
        <property name="props.idl" value="test" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="Tests.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-basicserver">
        <property name="props.idl" value="BasicServer" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="BasicServer.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-codesetserver">
        <property name="props.idl" value="CodesetServer"/>
        <property name="pkg.idl" value="org/jacorb/test"/>
        <property name="callback.idl" value="false"/>
        <property name="file.idl" value="CodesetServer.idl"/>
        <antcall target="process-idl"/>
      </target>

    <target name="idl-charserver">
        <property name="props.idl" value="CharServer" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="CharServer.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-longlongseqserver">
        <property name="props.idl" value="LongLongSeqServer" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="LongLongSeqServer.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-callbackserver">
        <property name="props.idl" value="CallbackServer" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="true" />
        <property name="file.idl" value="CallbackServer.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-timingserver">
        <property name="props.idl" value="TimingServer" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="true" />
        <property name="file.idl" value="TimingServer.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-syncscopeserver">
        <property name="props.idl" value="SyncScopeServer" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="true" />
        <property name="file.idl" value="SyncScopeServer.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-connectiontimeout">
        <property name="props.idl" value="ConnectionTimeout" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="ConnectionTimeout.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-bidir">
        <property name="props.idl" value="BiDir" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="BiDir.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-iiopaddress">
        <property name="props.idl" value="IIOPAddress" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="IIOPAddress.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-recursive">
        <property name="props.idl" value="RecursiveParamServer" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="RecursiveParamServer.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-notification">
        <property name="props.idl" value="Notification" />
        <property name="pkg.idl" value="org/jacorb/test/notification" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="Notification.idl" />
        <antcall target="process-idl" />
    </target>


    <target name="idl-notification-typed">
        <property name="props.idl" value="TypedNotification" />
        <property name="pkg.idl" value="org/jacorb/test/notification/typed" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="TypedNotification.idl" />
        <property name="generateir" value="true" />
        <antcall target="process-idl" />
    </target>


    <target name="idl-value">
        <property name="props.idl" value="value" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="value.idl" />
        <antcall target="process-idl" />
    </target>

      <target name="idl-value-test">
        <property name="props.idl" value="value" />
        <property name="pkg.idl" value="org/jacorb/test/value" />
        <property name="callback.idl" value="false"/>
        <property name="file.idl" value="ValueTest.idl" />
        <antcall target="process-idl" />
      </target>

    <target name="idl-exception">
        <property name="props.idl" value="ExceptionServer" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false"/>
        <property name="file.idl" value="ExceptionServer.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-shutdown">
        <property name="props.idl" value="BasicServer" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="ShutdownServer.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-dii">
        <property name="props.idl" value="DiiServer" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="diiserver.idl" />
        <antcall target="process-idl" />
    </target>

    <target name="idl-bugs">
        <property name="props.idl" value="Bugs" />
        <property name="pkg.idl" value="org/jacorb/test" />
        <property name="callback.idl" value="false" />
        <property name="file.idl" value="bug*.idl" />
        <antcall target="process-idl" />
    </target>


    <!-- ==================================================== -->
    <!--                  code coverage                       -->
    <!-- ==================================================== -->

    <target name="instrument" depends="test-init"
          description="Instrument the main JacORB code for coverage analysis">
        <delete failonerror="false" includeEmptyDirs="true">
            <fileset dir="${basedir}">
                <include name="coverage.em"/>
                <include name="classes-instrumented/**"/>
            </fileset>
        </delete>
        <emma>
            <instr instrpath="${basedir}/classes"
             mode="copy"
             outdir="${basedir}/classes-instrumented"
             outfile="${basedir}/coverage.em">
                <filter excludes="org.omg.*"/>
                <filter excludes="Cos*"/>
                <filter excludes="org.jacorb.ir.gui*"/>
                <filter excludes="org.jacorb.naming.namemanager.*"/>
                <filter excludes="org.jacorb.poa.gui.*"/>
                <filter excludes="org.jacorb.trading.*"/>
            </instr>
        </emma>
    </target>

    <target name="run-all-with-coverage" depends="build-all"
            description="Run all the JacORB tests with coverage analysis">
        <delete failonerror="false">
            <fileset dir="${testdir}/coverage"
               includes="*.ec"/>
        </delete>
        <path id="coverage.path">
            <pathelement location="${basedir}/classes-instrumented"/>
            <path refid="test.classpath"/>
        </path>
        <pathconvert dirsep="${file.separator}"
                 pathsep="${path.separator}"
                 property="coverage.path.string"
                 refid="coverage.path"/>
       <antcall target="run">
          <param name="jacorb.test.coverage" value="true"/>
          <param name="jacorb.test" value="org.jacorb.test.AllTest"/>
       </antcall>
    </target>

    <target name="show">
        <echoproperties/>
    </target>

    <target name="report-coverage" depends="test-init"
            description="Report the coverage analysis. Pass in&#13;&#10;
                            -Djacorb.test.id=xxx to specify test&#13;&#10;
                            results location">

        <path id="path.src" >
            <pathelement location="${basedir}/src" />
            <pathelement location="${basedir}/src/generated" />
        </path>

       <condition property="jacorb.test.prefix"
                  value="test/regression/output/${jacorb.test.id}/">
          <isset property="jacorb.test.id"/>
       </condition>
       <property name="jacorb.test.prefix" value="test/regression/output/"/>

       <echo message="Using ${jacorb.test.prefix} as test prefix..."/>

        <emma>
            <report sourcepathref="path.src"
              columns="name,line,method,class"
              sort="+name">
                <fileset dir="${basedir}">
                    <include name="coverage.em"/>
                    <include name="${jacorb.test.prefix}coverage-client.ec"/>
                    <include name="${jacorb.test.prefix}coverage-server.ec"/>
                </fileset>
                <html outfile="${basedir}/${jacorb.test.prefix}coverage-combined/index.html"/>
            </report>
            <report sourcepathref="path.src"
              columns="name,line,method,class"
              sort="+name">
                <fileset dir="${basedir}">
                    <include name="coverage.em"/>
                    <include name="${jacorb.test.prefix}coverage-client.ec"/>
                </fileset>
                <html outfile="${basedir}/${jacorb.test.prefix}coverage-client/index.html"/>
            </report>
            <report sourcepathref="path.src"
              columns="name,line,method,class"
              sort="+name">
                <fileset dir="${basedir}">
                    <include name="coverage.em"/>
                    <include name="${jacorb.test.prefix}coverage-server.ec"/>
                </fileset>
                <html outfile="${basedir}/${jacorb.test.prefix}coverage-server/index.html"/>
            </report>
        </emma>
    </target>

    <!-- ==================================================== -->
    <!--                  run all tests                       -->
    <!-- ==================================================== -->


    <target name="run-all" description="Run and build all Jacorb tests. For any run*&#13;&#10;
                            tests the following -D parameters are&#13;&#10;
                            available:&#13;&#10;
                            jacorb.test.coverage=true/false&#13;&#10;
                            jacorb.test.outputfile.testname=true/false&#13;&#10;
                            jacorb.test.verbose=true/false">
        <antcall target="run">
            <param name="jacorb.test" value="org.jacorb.test.AllTest" />
        </antcall>
    </target>


    <target name="run-all-no-build" description="Run all Jacorb tests without compiling.">
        <antcall target="run">
            <param name="jacorb.test" value="org.jacorb.test.AllTest"/>
            <param name="NO_BUILD" value="true"/>
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                  run idl tests                       -->
    <!-- ==================================================== -->

    <target name="run-all-idl"
          description="Run all Jacorb tests in the idl package">
       <antcall target="run">
          <param name="jacorb.test" value="org.jacorb.test.idl.AllTest" />
       </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                  run bug tests                       -->
    <!-- ==================================================== -->


    <target name="run-all-bugs"
          description="Run all Jacorb tests in the bugs package">
        <antcall target="run">
            <param name="jacorb.test" value="org.jacorb.test.bugs.AllTest" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                  run orb/poa tests                   -->
    <!-- ==================================================== -->


    <target name="run-all-orb"
          description="Run all Jacorb tests in the orb package">
        <antcall target="run">
            <param name="jacorb.test" value="org.jacorb.test.orb.AllTest" />
        </antcall>
    </target>


    <target name="run-all-poa"
          description="Run all Jacorb tests in the poa package">
        <antcall target="run">
            <param name="jacorb.test" value="org.jacorb.test.poa.AllTest" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                  run rmi tests                       -->
    <!-- ==================================================== -->


    <target name="run-all-rmi"
          description="Run all Jacorb tests in the rmi package">
        <antcall target="run">
            <param name="jacorb.test" value="org.jacorb.test.orb.rmi.AllTest" />
        </antcall>
        <antcall target="run-old-jdk-orb-no-build">
            <param name="jacorb.test" value="org.jacorb.test.orb.rmi.AllTest" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                 run dynany tests                     -->
    <!-- ==================================================== -->


    <target name="run-all-dynany"
          description="Run all Jacorb tests in the dynany package">
        <antcall target="run">
            <param name="jacorb.test" value="org.jacorb.test.orb.dynany.AllTest" />
        </antcall>
    </target>

    <!-- ==================================================== -->
    <!--                 run dii tests                        -->
    <!-- ==================================================== -->

    <target name="run-all-dii"
          description="Run all Jacorb tests in the dii package">
        <antcall target="run">
            <param name="jacorb.test" value="org.jacorb.test.dii.AllTest" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                 run notification tests               -->
    <!-- ==================================================== -->


    <target name="run-all-notification"
          description="Run all Jacorb tests in the notification package">

        <antcall target="run">
            <param name="jacorb.test" value="org.jacorb.test.notification.AllTest" />
        </antcall>

        <antcall target="run-notification-regexp" />
    </target>


    <target name="run-notification-regexp" depends="check-regexp,
        run-notification-regexp-jdk14,
            run-notification-regexp-gnu,
        run-notification-regexp-jakarta" />

    <target name="run-notification-regexp-jdk14" if="available.regexp.jdk">
        <antcall target="run-no-build">
            <param name="jacorb.test" value="org.jacorb.test.notification.util.regexp.JDK14PatternWrapperTest" />
        </antcall>
    </target>

    <target name="run-notification-regexp-gnu" if="available.regexp.gnu">
        <antcall target="run-no-build">
            <param name="jacorb.test" value="org.jacorb.test.notification.util.regexp.GNUPatternWrapperTest" />
        </antcall>
    </target>

    <target name="run-notification-regexp-jakarta" if="available.regexp.jakarta-regexp">
        <antcall target="run-no-build">
            <param name="jacorb.test" value="org.jacorb.test.notification.util.regexp.JakartaRegexpPatternWrapperTest" />
        </antcall>
    </target>

    <target name="run-package-notification-seperate">
        <antcall target="build-all" />

        <antcall target="run-package-notification-seperate-no-build" />
    </target>


    <target name="run-package-notification-seperate-no-build">

        <antcall target="run-no-build">
            <param name="jacorb.test" value="org.jacorb.test.notification.PackageTest" />
        </antcall>

        <antcall target="run-no-build">
            <param name="jacorb.test" value="org.jacorb.test.notification.node.PackageTest" />
        </antcall>

        <antcall target="run-no-build">
            <param name="jacorb.test" value="org.jacorb.test.notification.engine.PackageTest" />
        </antcall>

        <antcall target="run-no-build">
            <param name="jacorb.test" value="org.jacorb.test.notification.evaluate.PackageTest" />
        </antcall>

        <antcall target="run-no-build">
            <param name="jacorb.test" value="org.jacorb.test.notification.queue.PackageTest" />
        </antcall>

        <antcall target="run-no-build">
            <param name="jacorb.test" value="org.jacorb.test.notification.util.PackageTest" />
        </antcall>

        <antcall target="run-notification-regexp" />
    </target>

    <!-- ==================================================== -->
    <!--                   clean up                           -->
    <!-- ==================================================== -->

    <target name="clean" depends="test-init" description="Remove all generated source files and class files">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${classdir}" includes="**/*" />
            <fileset dir="${src}/generated" />
            <fileset dir="${basedir}/classes-instrumented" />
            <fileset file="${src}/orb/rmi/FixSunDelegateBug.java" />
        </delete>
    </target>

</project>
