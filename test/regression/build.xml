<?xml version="1.0"?>

<!DOCTYPE project [ <!ENTITY common SYSTEM "file:../../etc/common.xml"> ]>

<project name="regression-test" default="help" basedir="../../">

	<property name="jacorb.home" value="${basedir}" />

	<!-- ==================================================== -->
	<!--             JacORB Tests build file                  -->
	<!-- ==================================================== -->
	<target name="help">
		<exec executable="java" outputproperty="OUTPUT">
			<arg line="-classpath ${java.class.path} org.apache.tools.ant.Main -logger org.apache.tools.ant.NoBannerLogger -projecthelp -buildfile ${basedir}/test/regression/build.xml" />
		</exec>
		<echo message="${OUTPUT}" />
	</target>

   &common;

   <!-- Using test-base-init so we can set different src, class and idl directories -->
	<target name="test-base-init">
		<property name="testdir" value="${basedir}/test/regression" />
		<property name="dirs.base" value="${testdir}" />
		<property name="src" value="${testdir}/src" />
		<property name="src.generated" value="${src}/generated" />
		<property name="idl" value="${testdir}/idl" />
		<property name="lib" value="${basedir}/lib" />

		<property name="BASE-INIT" value="true" />
	</target>

	<target name="test-init" depends="test-base-init,init,ant-version,load-taskdef">
        <path id="test.classpath">
			<fileset dir="${testdir}/lib">
				<include name="**/*.jar" />
			</fileset>

			<path refid="path.base" />
		</path>

        <macrodef name="jacorb-run-test">
			<attribute name="client" default="cvs" />
			<attribute name="server" default="cvs" />
			<attribute name="coverage" default="false" />
			<attribute name="test" />

			<sequential>
				<java classname="org.jacorb.test.common.launch.TestLauncher" classpathref="test.classpath">
					<sysproperty key="jacorb.test.client.version" value="@{client}" />
					<sysproperty key="jacorb.test.server.version" value="@{server}" />
					<sysproperty key="jacorb.test.coverage" value="@{coverage}" />
					<arg value="@{test}" />
				</java>
			</sequential>
		</macrodef>

		<property name="dirs.output" value="${testdir}/output" />

		<mkdir dir="${dirs.output}" />

		<!-- Configuration properties for rmi depending upon JDK version -->
		<property name="rmic.stubVersion" value="1.2" />
		<property name="rmic.iiop" value="yes" />
		<property name="rmic.iiopopts" value="-poa" />
		<available classname="com.sun.corba.se.internal.iiop.ShutdownUtilDelegate"
               property="rmi.ShutdownUtilDelegate" />
		<available classname="com.sun.corba.se.internal.iiop.ShutdownUtilDelegate"
               property="rmi.jvmarg"
               value="-Djavax.rmi.CORBA.UtilClass=org.jacorb.test.orb.rmi.FixSunDelegateBug" />
		<condition property="rmi.jvmarg" value="-D">
			<not>
				<available classname="com.sun.corba.se.internal.iiop.ShutdownUtilDelegate" />
			</not>
		</condition>
		<available classname="com.sun.corba.se.internal.iiop.ShutdownUtilDelegate"
               property="use.jdk.orb" />
		<available classname="com.ibm.CORBA.iiop.ORB"
               property="use.jdk.orb" />

		<!-- include emma tasks for code coverage -->
		<path id="emma.lib">
			<pathelement location="${testdir}/lib/emma.jar"/>
			<pathelement location="${testdir}/lib/emma_ant.jar"/>
		</path>

		<taskdef resource="emma_ant.properties"
             classpathref="emma.lib"/>
	</target>


	<!-- ==================================================== -->
	<!--             compile and run tests                    -->
	<!-- ==================================================== -->


	<target name="build-all" depends="test-init" unless="NO_BUILD">
		<antcall target="compile-idl" />
		<antcall target="fixup-rmi-14" />
		<antcall target="compile-src" />
		<antcall target="compile-rmi" />
		<antcall target="compile-src2" />
		<property name="NO_BUILD" value="true" />
	</target>


	<target name="fixup-rmi-14" if="rmi.ShutdownUtilDelegate">
		<copy file="${src}/org/jacorb/test/orb/rmi/FixSunDelegateBug.java.14"
          tofile="${src}/org/jacorb/test/orb/rmi/FixSunDelegateBug.java" />
	</target>



	<target name="compile-src-notification" depends="test-init">
		<jacorb-javac
      javac-includes="org/jacorb/test/notification/**"
      javac-excludes="org/jacorb/test/notification/util/regexp/**,
                           org/jacorb/test/notification/plugins/**,
    	                       org/jacorb/test/notification/jmx/**"
      javac-classpathref="test.classpath" />

		<antcall target="compile-src-notification-regexp" />
	</target>

	<target name="compile-src-notification-regexp"
          depends="test-init, check-regexp, compile-src-notification-jdk14,
                   compile-src-notification-jakarta, compile-src-notification-gnu" />

	<target name="compile-src-notification-jdk14" if="available.regexp.jdk">
		<jacorb-javac
      javac-includes="org/jacorb/test/notification/util/regexp/JDK14*" />
	</target>


	<target name="compile-src-notification-jakarta" if="available.regexp.jakarta-regexp">
		<jacorb-javac
      javac-includes="org/jacorb/test/notification/util/regexp/Jakarta*" />
	</target>


	<target name="compile-src-notification-gnu" if="available.regexp.gnu">
		<jacorb-javac
      javac-includes="org/jacorb/test/notification/util/regexp/GNU*" />
	</target>


	<target name="compile-src">
		<jacorb-javac javac-includes="**"
			javac-excludes="generated/**,**/RMITestServant.java,org/jacorb/test/notification/**,org/jacorb/test/jmx/**"
			javac-classpathref="test.classpath" />

		<antcall target="compile-src-notification" />
	</target>


	<target name="compile-rmi" depends="test-init, compile-src">
		<rmic base="${classdir}"
          classname="org.jacorb.test.orb.rmi.RMITestImpl"
          verify="${rmic.verify}"
          iiop="${rmic.iiop}"
          iiopopts="${rmic.iiopopts}"
          debug="${rmic.debug}"
          sourcebase="${src}/generated">
		</rmic>
	</target>


	<target name="compile-src2" depends="compile-rmi">
		<jacorb-javac javac-includes="**/RMITestServant.java" javac-classpathref="test.classpath" />
	</target>


	<target name="run" depends="build-all, run-no-build" />

	<target name="run-no-build" depends="test-init">
		<java classname="org.jacorb.test.common.launch.TestLauncher"
          classpathref="test.classpath">
			<arg value="${test}"/>
		</java>
	</target>



	<!-- The following old run targets are deprecated -->

	<target name="run-old" depends="test-init">
		<junit fork="yes" printsummary="withOutAndErr" showoutput="true">
			<jvmarg value="-Dtestdir=${testdir}" />
			<jvmarg value="-Djacorb.home=${jacorb.home}" />
			<jvmarg value="${rmi.jvmarg}" />
			<jvmarg value="-Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB" />
			<jvmarg value="-Dorg.omg.CORBA.ORBSingletonClass=org.jacorb.orb.ORBSingleton" />
			<bootclasspath>
				<path refid="path.base" />
			</bootclasspath>

			<classpath>
				<path refid="test.classpath" />
			</classpath>
			<formatter type="plain" />
			<test name="${test}" todir="${dirs.output}" />
		</junit>
	</target>


	<target name="run-old-jdk-orb-no-build" depends="test-init" if="use.jdk.orb">
		<junit fork="yes" printsummary="withOutAndErr">
			<jvmarg value="-Dtestdir=${testdir}" />
			<formatter type="plain" />
			<test name="${test}" outfile="TEST-${test}-jdkorb" todir="${dirs.output}" />
			<classpath>
				<path refid="test.classpath" />
			</classpath>
		</junit>
	</target>


	<!-- ==================================================== -->
	<!--                  compile idl                         -->
	<!-- ==================================================== -->


	<target name="compile-idl" depends="test-init">
		<antcall target="idl-tests" />
		<antcall target="idl-basicserver" />
		<antcall target="idl-charserver" />
		<antcall target="idl-longlongseqserver" />
		<antcall target="idl-callbackserver" />
		<antcall target="idl-timingserver" />
		<antcall target="idl-syncscopeserver" />
		<antcall target="idl-connectiontimeout" />
		<antcall target="idl-bidir" />
		<antcall target="idl-iiopaddress" />
		<antcall target="idl-recursive" />
		<antcall target="idl-notification" />
		<antcall target="idl-notification-typed" />
		<antcall target="idl-value" />
		<antcall target="idl-exception" />
		<antcall target="idl-shutdown" />
		<antcall target="idl-bugs" />
	</target>


	<target name="process-idl">
		<!-- This condition doesn't work when we compile multiple IDL
     files to the same directory.  I'm working to find a clean
     solution, AS.

      <condition property="${props.idl}">
         <or>
            <not>
               <available file="${classdir}/${pkg.idl}"/>
            </not>
            <not>
               <available file="${src}/generated/${pkg.idl}"/>
            </not>
            <uptodate targetfile="${idl}/${file.idl}">
               <srcfiles dir="${src}/generated/${pkg.idl}"
                         includes="**/*.java"/>
            </uptodate>
         </or>
      </condition>
-->
		<property name="${props.idl}" value="true" />
		<property name="generateir" value="false" />
		<antcall target="generate-src" />
	</target>


	<target name="generate-src" if="${props.idl}">
		<jacidl generateir="true"
            srcdir="${idl}"
            ami_callback="${callback.idl}"
            destdir="${src}/generated"
            includepath="${basedir}/idl/omg"
            includes="${file.idl}" />

		<path id="src.generated">
			<pathelement location="${src}/generated"/>
		</path>

		<antcall target="jacorb-javac">
			<param name="javac-src" value="${src}/generated" />
			<param name="javac-includes" value="${pkg.idl}/**" />
			<param name="javac-sourcepath" value="src.generated" />
		</antcall>
	</target>


	<!-- ==================================================== -->
	<!--                compile Tests.idl                     -->
	<!-- ==================================================== -->


	<target name="idl-tests">
		<property name="props.idl" value="test" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="Tests.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-basicserver">
		<property name="props.idl" value="BasicServer" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="BasicServer.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-charserver">
		<property name="props.idl" value="CharServer" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="CharServer.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-longlongseqserver">
		<property name="props.idl" value="LongLongSeqServer" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="LongLongSeqServer.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-callbackserver">
		<property name="props.idl" value="CallbackServer" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="true" />
		<property name="file.idl" value="CallbackServer.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-timingserver">
		<property name="props.idl" value="TimingServer" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="true" />
		<property name="file.idl" value="TimingServer.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-syncscopeserver">
		<property name="props.idl" value="SyncScopeServer" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="true" />
		<property name="file.idl" value="SyncScopeServer.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-connectiontimeout">
		<property name="props.idl" value="ConnectionTimeout" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="ConnectionTimeout.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-bidir">
		<property name="props.idl" value="BiDir" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="BiDir.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-iiopaddress">
		<property name="props.idl" value="IIOPAddress" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="IIOPAddress.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-recursive">
		<property name="props.idl" value="RecursiveParamServer" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="RecursiveParamServer.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-notification">
		<property name="props.idl" value="Notification" />
		<property name="pkg.idl" value="org/jacorb/test/notification" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="Notification.idl" />
		<antcall target="process-idl" />
	</target>


	<target name="idl-notification-typed">
		<property name="props.idl" value="TypedNotification" />
		<property name="pkg.idl" value="org/jacorb/test/notification/typed" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="TypedNotification.idl" />
		<property name="generateir" value="true" />
		<antcall target="process-idl" />
	</target>


	<target name="idl-value">
		<property name="props.idl" value="value" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="value.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-exception">
		<property name="props.idl" value="ExceptionServer" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false"/>
		<property name="file.idl" value="ExceptionServer.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-shutdown">
		<property name="props.idl" value="BasicServer" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="ShutdownServer.idl" />
		<antcall target="process-idl" />
	</target>

	<target name="idl-bugs">
		<property name="props.idl" value="Bugs" />
		<property name="pkg.idl" value="org/jacorb/test" />
		<property name="callback.idl" value="false" />
		<property name="file.idl" value="bug*.idl" />
		<antcall target="process-idl" />
	</target>


	<!-- ==================================================== -->
	<!--                  code coverage                       -->
	<!-- ==================================================== -->

	<target name="instrument" depends="test-init"
          description="Instrument the main JacORB code for coverage analysis">
		<delete failonerror="false" includeEmptyDirs="true">
			<fileset dir="${basedir}">
				<include name="coverage.em"/>
				<include name="classes-instrumented/**"/>
			</fileset>
		</delete>
		<emma>
			<instr instrpath="${basedir}/classes"
             mode="copy"
             outdir="${basedir}/classes-instrumented"
             outfile="${basedir}/coverage.em">
				<filter excludes="org.omg.*"/>
				<filter excludes="Cos*"/>
				<filter excludes="org.jacorb.ir.gui*"/>
				<filter excludes="org.jacorb.naming.namemanager.*"/>
				<filter excludes="org.jacorb.poa.gui.*"/>
				<filter excludes="org.jacorb.trading.*"/>
			</instr>
		</emma>
	</target>

	<!-- this target is obsolete, use TestLauncher for the time being -->
	<target name="run-with-coverage" depends="test-init">
		<delete failonerror="false">
			<fileset dir="${testdir}/coverage"
               includes="*.ec"/>
		</delete>
		<path id="coverage.path">
			<pathelement location="${basedir}/classes-instrumented"/>
			<path refid="test.classpath"/>
		</path>
		<pathconvert dirsep="${file.separator}"
                 pathsep="${path.separator}"
                 property="coverage.path.string"
                 refid="coverage.path"/>
		<junit fork="yes" printsummary="withOutAndErr" showoutput="true">
			<jvmarg value="-Xbootclasspath/p:${coverage.path.string}"/>
			<jvmarg value="-Dtestdir=${testdir}" />
			<jvmarg value="-Djacorb.home=${jacorb.home}" />
			<jvmarg value="${rmi.jvmarg}" />
			<jvmarg value="-Djacorb.test.coverage=true"/>
			<jvmarg value="-Demma.coverage.out.file=${testdir}/coverage/client.ec"/>
			<jvmarg value="-Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB" />
			<jvmarg value="-Dorg.omg.CORBA.ORBSingletonClass=org.jacorb.orb.ORBSingleton" />
			<classpath>
				<path refid="coverage.path"/>
			</classpath>
			<formatter type="plain" />
			<test name="org.jacorb.test.AllTest" todir="${dirs.output}" />
		</junit>
	</target>

	<target name="show">
		<echoproperties/>
	</target>

	<target name="report-coverage" depends="test-init">
		<path id="path.src" >
			<pathelement location="${basedir}/src" />
			<pathelement location="${basedir}/src/generated" />
		</path>

		<emma>
			<report sourcepathref="path.src"
              columns="name,line,method,class"
              sort="+name">
				<fileset dir="${basedir}">
					<include name="coverage.em"/>
					<include name="test/regression/output/${jacorb.test.id}/coverage-client.ec"/>
					<include name="test/regression/output/${jacorb.test.id}/coverage-server.ec"/>
				</fileset>
				<html outfile="${testdir}/output/${jacorb.test.id}/coverage-combined/index.html"/>
			</report>
			<report sourcepathref="path.src"
              columns="name,line,method,class"
              sort="+name">
				<fileset dir="${basedir}">
					<include name="coverage.em"/>
					<include name="test/regression/output/${jacorb.test.id}/coverage-client.ec"/>
				</fileset>
				<html outfile="${testdir}/output/${jacorb.test.id}/coverage-client/index.html"/>
			</report>
			<report sourcepathref="path.src"
              columns="name,line,method,class"
              sort="+name">
				<fileset dir="${basedir}">
					<include name="coverage.em"/>
					<include name="test/regression/output/${jacorb.test.id}/coverage-server.ec"/>
				</fileset>
				<html outfile="${testdir}/output/${jacorb.test.id}/coverage-server/index.html"/>
			</report>
		</emma>
	</target>

	<!-- ==================================================== -->
	<!--                  run all tests                       -->
	<!-- ==================================================== -->


	<target name="run-all" description="Run all Jacorb tests">
		<antcall target="run">
			<param name="test" value="org.jacorb.test.AllTest" />
		</antcall>
		<antcall target="compile-idl-test-generated" />
	</target>


	<target name="run-all-no-build" description="Run all Jacorb tests">
		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.AllTest" />
		</antcall>
		<antcall target="compile-idl-test-generated" />
	</target>


	<!-- ==================================================== -->
	<!--                  run idl tests                       -->
	<!-- ==================================================== -->

	<target name="run-all-idl"
          description="Run all Jacorb tests in the idl package and its subpackages">
		<antcall target="run">
			<param name="test" value="org.jacorb.test.idl.AllTest" />
		</antcall>
		<antcall target="compile-idl-test-generated" />
	</target>

	<target name="compile-idl-test-generated" depends="test-init">
		<!-- Compile the test idl -->
		<antcall target="jacorb-javac">
			<param name="javac-includes" value="generated/**" />
		</antcall>
		<echo message="Successfully compiled test idl" />
	</target>

	<!-- ==================================================== -->
	<!--                  run bug tests                       -->
	<!-- ==================================================== -->


	<target name="run-all-bugs"
          description="Run all Jacorb tests in the bugs package">
		<antcall target="run">
			<param name="test" value="org.jacorb.test.bugs.AllTest" />
		</antcall>
	</target>


	<target name="run-all-bugs-no-build"
          description="Run all Jacorb tests in the bugs package">
		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.bugs.AllTest" />
		</antcall>
	</target>



	<!-- ==================================================== -->
	<!--                  run orb tests                       -->
	<!-- ==================================================== -->


	<target name="run-all-orb"
          description="Run all Jacorb tests in the orb package and its subpackages">
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.AllTest" />
		</antcall>
	</target>


	<target name="run-all-orb-no-build"
          description="Run all Jacorb tests in the orb package and its subpackages">
		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.orb.AllTest" />
		</antcall>
	</target>


	<target name="run-all-poa"
          description="Run all Jacorb tests in the poa package and its subpackages">
		<antcall target="run">
			<param name="test" value="org.jacorb.test.poa.AllTest" />
		</antcall>
	</target>


	<!-- ==================================================== -->
	<!--                  run rmi tests                       -->
	<!-- ==================================================== -->


	<target name="run-all-rmi"
          description="Run all Jacorb tests in the rmi package and its subpackages">
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.rmi.AllTest" />
		</antcall>
		<antcall target="run-old-jdk-orb-no-build">
			<param name="test" value="org.jacorb.test.orb.rmi.AllTest" />
		</antcall>
	</target>


	<target name="run-all-rmi-no-build"
          description="Run all Jacorb tests in the rmi package and its subpackages">
		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.orb.rmi.AllTest" />
		</antcall>
		<antcall target="run-old-jdk-orb-no-build">
			<param name="test" value="org.jacorb.test.orb.rmi.AllTest" />
		</antcall>
	</target>


	<!-- ==================================================== -->
	<!--                 run dynany tests                     -->
	<!-- ==================================================== -->


	<target name="run-all-dynany"
          description="Run all Jacorb tests in the dynany package and its subpackages">
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.AllTest" />
		</antcall>
	</target>


	<target name="run-all-dynany-separate"
          description="Run all Jacorb tests in the dynany package and its subpackages, logging results in separate files">
		<antcall target="run-package-dynany-separate" />
	</target>


	<!-- Run all Jacorb tests in the dynany package only, logging results in separate files -->
	<target name="run-package-dynany-separate">
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyArrayTest" />
		</antcall>
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyBaseTest" />
		</antcall>
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyBoundedSeqTest" />
		</antcall>
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyEmptyExTest" />
		</antcall>
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyEnumTest" />
		</antcall>
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyFixedTest" />
		</antcall>
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyNonEmptyExTest" />
		</antcall>
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyStructTest" />
		</antcall>
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyUnboundedSeqTest" />
		</antcall>
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyUnionIntTest" />
		</antcall>
		<antcall target="run">
			<param name="test" value="org.jacorb.test.orb.dynany.DynAnyUnionTest" />
		</antcall>
	</target>


	<!-- ==================================================== -->
	<!--                 run notification tests               -->
	<!-- ==================================================== -->


	<target name="run-all-notification"
          description="Run all Jacorb tests in the notification package and its subpackages">

		<antcall target="run">
			<param name="test" value="org.jacorb.test.notification.AllTest" />
		</antcall>

		<antcall target="run-notification-regexp" />
	</target>


	<target name="run-all-notification-no-build"
          description="Run all Jacorb tests in the notification package and its subpackages" depends="test-init" >

		<jacorb-run-test test="org.jacorb.test.notification.AllTest" coverage="true"/>

		<antcall target="run-notification-regexp" />
	</target>


	<target name="run-notification">
		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.notification.AllTest" />
		</antcall>
	</target>


	<target name="run-notification-regexp" depends="check-regexp,
        run-notification-regexp-jdk14,
    		run-notification-regexp-gnu,
        run-notification-regexp-jakarta" />

	<target name="run-notification-regexp-jdk14" if="available.regexp.jdk">
		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.notification.util.regexp.JDK14PatternWrapperTest" />
		</antcall>
	</target>

	<target name="run-notification-regexp-gnu" if="available.regexp.gnu">
		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.notification.util.regexp.GNUPatternWrapperTest" />
		</antcall>
	</target>

	<target name="run-notification-regexp-jakarta" if="available.regexp.jakarta-regexp">
		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.notification.util.regexp.JakartaRegexpPatternWrapperTest" />
		</antcall>
	</target>


	<target name="run-all-notification-rebuild" depends="test-init, compile-src-notification, run-all-notification-no-build" />


	<target name="run-package-notification-seperate">
		<antcall target="build-all" />

		<antcall target="run-package-notification-seperate-no-build" />
	</target>


	<target name="run-package-notification-seperate-no-build">

		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.notification.PackageTest" />
		</antcall>

		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.notification.node.PackageTest" />
		</antcall>

		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.notification.engine.PackageTest" />
		</antcall>

		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.notification.evaluate.PackageTest" />
		</antcall>

		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.notification.queue.PackageTest" />
		</antcall>

		<antcall target="run-no-build">
			<param name="test" value="org.jacorb.test.notification.util.PackageTest" />
		</antcall>

		<antcall target="run-notification-regexp" />
	</target>

	<!-- ==================================================== -->
	<!--                   clean up                           -->
	<!-- ==================================================== -->


	<target name="clean" depends="test-init" description="Remove all generated source files and class files">
		<delete dir="${classdir}/org" failonerror="false" />
		<delete dir="${src}/generated" failonerror="false" />
		<delete dir="${classdir}" failonerror="false" />
		<delete dir="${basedir}/classes-instrumented" failonerror="false" />
		<delete file="${src}/orb/rmi/FixSunDelegateBug.java" failonerror="false" />
	</target>

</project>
