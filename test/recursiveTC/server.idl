module demo
{
module hello 
{
    interface GoodDay 
    {
	string hello_simple();

	wstring hello_wide(in wstring msg);
        wchar getwchar(in wchar x);


        /* Enumeration of value types for ParmValue's. 
         * They may be strings or nested repeating groups. 
        */ 
        enum ParmValueType { 
                string_type,            // Single-valued 
                nested_type             // Repeating groups. 
        }; 

        /* Represents a name-value pair where the value can either be a 
         * String or a nested parameter list.  This allows for tree structures 
         * of arbitrary complexity. 
        */ 
        struct Parm { 
                string name; 

                /* Represents a value of a parameter.  It may be single valued or 
                 * the parent of a sequence of ParmValue's 
                */ 
                union ParmValue switch (ParmValueType) { 
                        case string_type : string string_value; 
                        case nested_type : sequence < sequence < Parm > > nested_value; 
                } value; 
        };


        void passParm( in Parm p ); 

    };


};


};
