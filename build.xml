<?xml version="1.0"?>

<!DOCTYPE project [ <!ENTITY common SYSTEM "file:./etc/common.xml"> ]>

<project name="main" default="all" basedir=".">

   <!-- ==================================================== -->
   <!--            JacORB build file                         -->
   <!-- $Id: build.xml,v 1.70 2006-12-07 13:30:22 alphonse.bendt Exp $ -->
   <!-- ==================================================== -->

    <property file="${basedir}/build.properties" />
    <property environment="env" />

   &common;

   <!-- top-level target -->
   <target name="all" depends="init,compiler,omg_idl,jacorb,libs"
           description="Build JacORB.  To build with debugging, use -Ddebug=true."/>

   <!-- ==================================================== -->
   <!--                   IDL compiler                       -->
   <!-- ==================================================== -->

   <target name="compiler" depends="init,idlsrc,idllib,idlcmd"/>

   <target name="idlcmd">
      <copy overwrite="yes" file="bin/idltemplate" tofile="bin/idl" />
      <copy overwrite="yes" file="bin/idltemplate.bat" tofile="bin/idl.bat" />
      <replace file="bin/idl" token="@@@" value="${basedir}"/>
      <replace file="bin/idl.bat" token="@@@" value="${basedir}"/>
      <chmod file="bin/idl" perm="ugo+rx"/>
   </target>

   <!-- package idl.jar -->
   <target name="idllib" depends="idlsrc" >
      <jar jarfile="${lib}/idl.jar"
           basedir="${classdir}"
           includes="org/jacorb/idl/**"
           />
   </target>

   <target name="idlsrc">
      <ant antfile="${src}/org/jacorb/idl/build.xml" dir="${basedir}" />
   </target>



   <!-- ==================================================== -->
   <!--                   OMG IDL files                      -->
   <!-- ==================================================== -->

   <target name="omg_idl" depends="compiler">
      <ant antfile="${basedir}/idl/build.xml" dir="${basedir}"/>
   </target>


   <!-- ==================================================== -->
   <!--                   JacORB implementation              -->
   <!-- ==================================================== -->

   <target name="jacorb" depends="init">
      <ant antfile="${src}/org/jacorb/build.xml" dir="${basedir}"/>
   </target>


   <!-- ==================================================== -->
   <!--                  Libraries                           -->
   <!-- ==================================================== -->

   <target name="libs" depends="init,jar,jaco"/>

   <target name="jar" depends="init">
      <delete file="${lib}/jacorb.jar" failonerror="false"/>
      <jar jarfile="${lib}/jacorb.jar"
           basedir="${classdir}"
           includes="org/jacorb/**,org/omg/**"
           excludes="org/jacorb/idl/**,org/jacorb/demo/**,org/jacorb/test/**, org/jacorb/notification/jmx/jboss/**"
           manifest="${basedir}/etc/jacorb_jar.manifest"
           index="true"
           />
   </target>

   <target name="jaco" depends="init">
      <!-- Use the java.endorsed.dirs mechanism to replace the SDK CORBA classes with those in jacorb.jar for SDK 1.4 -->

      <path id="cp.raw" >
         <pathelement location="${basedir}/lib/jacorb.jar" />
         <pathelement location="${basedir}/lib/logkit-1.2.jar" />
         <pathelement location="${basedir}/lib/avalon-framework-4.1.5.jar" />
      </path>

      <pathconvert targetos="unix" property="cp.unix" refid="cp.raw" >
         <map from="${basedir}" to="${JACORB_HOME}" />
      </pathconvert>

      <pathconvert targetos="windows" property="cp.windows" refid="cp.raw" >
      </pathconvert>

      <condition property="jaco.classpath" value="-Djava.endorsed.dirs=${JACORB_HOME}/lib -classpath ${cp.unix}:${CLASSPATH}">
         <equals arg1="${ant.java.version}" arg2="1.4"/>
      </condition>

      <condition property="jacobat.classpath" value="-Djava.endorsed.dirs=&quot;${basedir}\lib&quot; -classpath &quot;${cp.windows};%CLASSPATH%&quot;">
         <equals arg1="${ant.java.version}" arg2="1.4"/>
      </condition>

      <!-- ... else use -Xbootclasspath for older SDKs -->
      <property name="jaco.classpath" value="-Xbootclasspath/p:${cp.unix}:${JRE_HOME}/lib/rt.jar:${CLASSPATH}"/>
      <property name="jacobat.classpath" value="-Xbootclasspath/p:&quot;${cp.windows};${java.home}\lib\rt.jar;%CLASSPATH%&quot;"/>

       <copy overwrite="yes" file="bin/jacotemplate.bat" tofile="bin/jaco.bat" />

      <copy overwrite="yes"
            file="bin/ntfy-wrapper.template"
            tofile="bin/ntfy-wrapper" />

      <replace file="bin/ntfy-wrapper"
               token="@@@JACORB_HOME@@@"
               value="${basedir}" />

      <copy overwrite="yes"
            file="bin/ns-wrapper.template"
            tofile="bin/ns-wrapper" />

      <replace file="bin/ns-wrapper"
               token="@@@JACORB_HOME@@@"
               value="${basedir}" />


      <replace file="bin/jaco.bat" token="@@@CLASSPATH@@@"
               value="${jacobat.classpath}"/>
      <replace file="bin/jaco.bat" token="@@@JACORB_HOME@@@"
               value="${basedir}" />

        <loadfile   srcFile="bin/resolve_jacorb_home.tok"
                    property="token.resolve-jacorb-home"
                    failonerror="true"/>

        <copy todir="bin">
            <fileset dir="bin">
                <include name="*.tpl"/>
            </fileset>

            <globmapper from="*.tpl" to="*"/>

            <filterset>
                <filter token="RESOLVE_JACORB_HOME" value="${token.resolve-jacorb-home}"/>
            </filterset>

            <filterset begintoken="@@@" endtoken="@@@">
                <filter token="JACORB_HOME" value="${basedir}" />
                <filter token="JRE_HOME" value="${java.home}" />
                <filter token="CLASSPATH" value="${jaco.classpath}" />
            </filterset>
        </copy>

      <condition property="eol" value="crlf">
         <or>
            <os family="windows"/>
            <os family="dos"/>
         </or>
      </condition>

      <!-- shell scripts should always be set to LF -->
      <property name="eol" value="lf" />

      <fixcrlf srcDir="bin"
               includes="*"
               excludes="*.exe,*.conf,*template*"
               eol="${eol}" />

      <chmod perm="ugo+rx">
         <fileset dir="bin">
            <include name="*" />
            <exclude name="*.bat" />
            <exclude name="*.exe" />
            <exclude name="*.conf" />
            <exclude name="*template*" />
         </fileset>
      </chmod>
   </target>

   <!-- This target creates a jar file that contains the -->
   <!-- core ORB components and (generated) OMG classes -->
   <target name="core_jacorb_jar" depends="init">
      <delete file="${lib}/core_jacorb.jar"/>
      <jar jarfile="${lib}/core_jacorb.jar"
           basedir="${classdir}"
           includes="org/jacorb/orb/**,org/jacorb/poa/**,org/jacorb/util/**,org/jacorb/security/ssl/**,org/omg/CONV_FRAME/**,org/omg/CORBA/**,org/omg/CORBA_2_3/**,org/omg/CosNaming/**,org/omg/Dynamic/**,org/omg/DynamicAny/**,org/omg/GIOP/**,org/omg/IIOP/**,org/omg/IOP/**,org/omg/Portable*/**,org/omg/BiDirPolicy/**,org/omg/ETF/**,org/omg/SSLIOP/**,org/omg/TimeBase/**"
           excludes="org/jacorb/poa/gui/*,org/jacorb/util/tracing/*"
           />
   </target>

   <!-- This target creates a jar file that contains the -->
   <!-- following JacORB services and utilities: -->
   <!-- ImR + GUI, IR + GUI, POA GUI, Tracing, Proxy -->
   <target name="jacorb_services_jar" depends="init">
      <delete file="${lib}/jacorb_services.jar"/>
      <jar jarfile="${lib}/jacorb_services.jar"
           basedir="${classdir}"
           includes="org/jacorb/imr/**,org/jacorb/ir/**,org/jacorb/poa/gui/*,org/jacorb/util/CAD*,org/jacorb/util/tracing/*,org/jacorb/proxy/*"
           />
   </target>

   <!-- This target creates a jar file that contains the -->
   <!-- following OMG services: -->
   <!-- Concurrency, Events, Trading, Transaction, but not Naming -->
   <target name="omg_services_jar" depends="init">
      <delete file="${lib}/omg_services.jar"/>
      <jar jarfile="${lib}/omg_services.jar"
           basedir="${classdir}"
           includes="org/jacorb/concurrency/**,org/jacorb/events/**,org/jacorb/trading/**,org/jacorb/transaction/**,org/omg/Cos*/**"
           excludes="org/omg/CosNaming/**"
           />
   </target>


   <!-- This target creates a jar file that contains the -->
   <!-- (genrated) OMG and JacORB security classes -->
   <target name="security_jar" depends="init">
      <delete file="${lib}/security.jar"/>
      <jar jarfile="${lib}/security.jar"
           basedir="${classdir}"
           includes="org/jacorb/security/**,org/omg/Security*/**,org/omg/SSLIOP/**,org/omg/TimeBase/**"
           />
   </target>


   <!-- ==================================================== -->
   <!--                   clean up                           -->
   <!-- ==================================================== -->

    <target name="clean" depends="init" description="Clean the checkout">
        <ant dir="${src}/org/jacorb" target="clean"/>
        <delete file="${basedir}/bin/idl"/>
        <delete file="${basedir}/bin/idl.bat"/>
        <delete file="${basedir}/bin/jaco"/>
        <delete file="${basedir}/bin/jaco.bat"/>
        <delete file="${basedir}/bin/ntfy-wrapper" />
        <delete file="${basedir}/bin/ns-wrapper" />
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${classdir}" includes="**/*" />
        </delete>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${src.generated}" includes="**/*" />
        </delete>
    </target>

    <target name="realclean" depends="clean" description="Clean the checkout including generated jars">
        <delete failonerror="false" >
            <fileset dir="lib/" includes="jacorb.jar, idl.jar"/>
        </delete >
    </target>

   <!-- ==================================================== -->
   <!--                  API documentation                   -->
   <!-- ==================================================== -->

   <target name="doc" depends="init" description="Create the Javadoc">
        <property name="PKGNAMES" value="org.jacorb.idl.*,org.jacorb.util.*,org.jacorb.orb.*,org.jacorb.imr.*,org.jacorb.ir.*,org.jacorb.poa.*,org.jacorb.events.*,org.jacorb.naming.*,org.jacorb.security.level2.*,org.jacorb.security.sas.*,org.omg.*,org.jacorb.notification.*" />
        <property name="PKGNAMES_EXCLUDED" value="org.jacorb.notification.filter.bsh" />
        <property name="SRCDIR2" value="" />

        <!-- ignore xdoclet tags -->
        <property name="IGNORED_TAGS" value="-tag jmx.mbean:X -tag jboss.xmbean:X -tag jmx.managed-attribute:X -tag jmx.managed-operation:X" />

        <mkdir dir="${basedir}/doc/api"/>

        <javadoc destdir="${basedir}/doc/api"
                 additionalparam="${IGNORED_TAGS}"
                 classpathref="path.base"
                 Splitindex="Yes"
                 Use="Yes"
                 maxmemory="256m"
                 packagenames="${PKGNAMES}"
                 excludepackagenames="${PKGNAMES_EXCLUDED}">
            <sourcepath>
                <path refid="sourcepath.base" />
                <path path="${SRCDIR2}" />
             </sourcepath>
        </javadoc>
   </target>

   <target name="convert.jdk5" description="convert sources to use java.util.concurrent (JDK 1.5+)">
      <replace dir="${basedir}" token="edu.emory.mathcs.backport." value="">
         <include name="**/notification/**/*.java" />
      </replace>
   </target>

   <target name="convert.jdk4" description="convert sources to use backport-util-concurrent (pre JDK 1.5)">
      <replace dir="${basedir}" token=" java.util.concurrent." value=" edu.emory.mathcs.backport.java.util.concurrent.">
         <include name="**/notification/**/*.java" />
      </replace>
   </target>


   <!-- ==================================================== -->
   <!--                  PMD                                 -->
   <!-- ==================================================== -->

    <target name="pmd-locate" if="env.PMD_HOME" >
        <property name="pmd.home" value="${env.PMD_HOME}" />
    </target>

    <target name="pmd-path1" depends="pmd-locate" if="pmd.home">
        <path id="pmd.path" >
            <fileset dir="${pmd.home}/lib" >
                <include name="*.jar" />
            </fileset>
        </path>
    </target>

    <target name="pmd-path2" depends="pmd-path1" unless="pmd.home">
        <path id="pmd.path" >
            <pathelement path="${java.class.path}"/>
        </path>
    </target>

    <target name="pmd-check" depends="pmd-path2" >
        <available classname="net.sourceforge.pmd.ant.PMDTask" property="pmd.isavailable" classpathref="pmd.path"/>

        <fail unless="pmd.isavailable" >
            error
            unable to locate PMD (http://pmd.sourceforge.net).
            either set the environment variable PMD_HOME,
            set the ant property pmd.home or add the PMD
            classes to your CLASSPATH.
        </fail>

        <pathconvert property="_pmd.cp" refid="pmd.path" />
        <echo level="verbose">pmd is using classpath: ${_pmd.cp}</echo>
    </target>

    <target name="pmd-taskdef" depends="init, pmd-check">
        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.path"/>
    </target>


    <target name="pmd" depends="init, pmd-taskdef">
        <echo message="this might take some time..." />
        <pmd rulesetfiles="${basedir}/etc/pmd-ruleset.xml" shortFilenames="true">
            <formatter type="summaryhtml" toFile="pmd_report.html"/>
            <fileset dir="${src}/org/jacorb">
                <!-- So much is generated code is there much point? -->
                <!--             <include name="idl/**/*.java"/>    -->
                <include name="imr/**/*.java"/>
                <include name="orb/**/*.java"/>
                <include name="poa/**/*.java"/>
                <include name="security/**/*.java"/>
                <include name="util/**/*.java"/>
                <!-- Exclude tracing as very old unsupported code -->
                <exclude name="util/tracing/*.java"/>
             </fileset>
        </pmd>
    </target>


   <!-- ==================================================== -->
   <!--                FINDBUGS                              -->
   <!-- ==================================================== -->

    <target name="findbugs-locate" if="env.FINDBUGS_HOME">
        <property name="findbugs.home" value="${env.FINDBUGS_HOME}" />
    </target>

    <target name="findbugs-path1" depends="findbugs-locate" if="findbugs.home" >
        <path id="findbugs.path">
            <fileset dir="${findbugs.home}/lib" >
                <include name="*.jar" />
            </fileset>
        </path>
    </target>

    <target name="findbugs-path2" depends="findbugs-path1" unless="findbugs.home">
        <echo message="findbugs-path2" />
        <path id="findbugs.path" >
            <pathelement path="${java.class.path}"/>
        </path>
    </target>

    <target name="findbugs-check" depends="findbugs-path2">
        <available classname="edu.umd.cs.findbugs.anttask.FindBugsTask" property="findbugs.isavailable" classpathref="findbugs.path"/>

        <fail unless="findbugs.isavailable" >
            error
            unable to locate FindBugs (http://findbugs.sourceforge.net/).
            either set the environment variable FINDBUGS_HOME,
            set the ant property findbugs.home or add the FindBugs
            classes to your CLASSPATH.
        </fail>

        <pathconvert property="_findbugs.cp" refid="findbugs.path" />
        <echo level="verbose">findbugs is using classpath: ${_findbugs.cp}</echo>
    </target>

    <target name="findbugs-taskdef" depends="init, findbugs-check">
        <pathconvert property="_findbugs.cp" refid="findbugs.path" />
        <echo level="verbose">findbugs is using classpath: ${_findbugs.cp}</echo>

        <taskdef name="findBugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.path"/>
    </target>

    <target name="findbugs" depends="findbugs-taskdef">
        <echo message="this might take some time..." />
        <findBugs home="${findbugs.home}"
                output="html"
                outputFile="${basedir}/findbugs_report.html"
                excludeFilter="${basedir}/etc/findbugs-ruleset.xml"
                reportLevel="medium"
                effort="default"
                jvmargs="-Xmx500M"
                timeout="12000000">
            <sourcePath path="${src}"/>
            <auxClasspath path="${classdir}"/>
            <auxClasspath path="${basedir}/lib/avalon-framework-4.1.5.jar"/>
            <systemProperty name="findbugs.de.comment" value="true"/>
            <class location="${basedir}/classes/org/jacorb/imr"/>
            <class location="${basedir}/classes/org/jacorb/orb"/>
            <class location="${basedir}/classes/org/jacorb/poa"/>
            <class location="${basedir}/classes/org/jacorb/security"/>
            <class location="${basedir}/classes/org/jacorb/util"/>
        </findBugs>
    </target>
</project>
